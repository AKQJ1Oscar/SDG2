//------------------------------- Código C GNU -------------------------------//

C:\Users\oscar\Desktop\SDII_14-05-15\XM-11.elf:     file format elf32-m68k

00020000 <__start>	moveal #196608,%sp
00020006 		movew #8192,%sr
0002000a 		jsr 00022bae <__init>
00020010 <bucle>	jsr 0002162a <bucleMain>
00020016 		bras 00020010 <bucle>
00020018 		rts
0002001a <_prep_TOUT0>	addal #-60,%sp
00020020 		moveml %d0-%fp,%sp@
00020024 		jsr 000208bc <rutina_tout0>
0002002a 		moveml %sp@,%d0-%fp
0002002e 		addal #60,%sp
00020034 		rte
00020036 <_prep_TOUT1>	addal #-60,%sp
0002003c 		moveml %d0-%fp,%sp@
00020040 		jsr 00022c90 <rutina_tout1>
00020046 		moveml %sp@,%d0-%fp
0002004a 		addal #60,%sp
00020050 		rte
00020052 <_prep_TOUT2>	addal #-60,%sp
00020058 		moveml %d0-%fp,%sp@
0002005c 		jsr 00022c98 <rutina_tout2>
00020062 		moveml %sp@,%d0-%fp
00020066 		addal #60,%sp
0002006c 		rte
0002006e <_prep_TOUT3>	addal #-60,%sp
00020074 		moveml %d0-%fp,%sp@
00020078 		jsr 00022ca0 <rutina_tout3>
0002007e 		moveml %sp@,%d0-%fp
00020082 		addal #60,%sp
00020088 		rte
0002008a <_prep_INT1>	addal #-60,%sp
00020090 		moveml %d0-%fp,%sp@
00020094 		jsr 00020c78 <rutina_int1>
0002009a 		moveml %sp@,%d0-%fp
0002009e 		addal #60,%sp
000200a4 		rte
000200a6 <_prep_INT2>	addal #-60,%sp
000200ac 		moveml %d0-%fp,%sp@
000200b0 		jsr 00022c78 <rutina_int2>
000200b6 		moveml %sp@,%d0-%fp
000200ba 		addal #60,%sp
000200c0 		rte
000200c2 <_prep_INT3>	addal #-60,%sp
000200c8 		moveml %d0-%fp,%sp@
000200cc 		jsr 00022c80 <rutina_int3>
000200d2 		moveml %sp@,%d0-%fp
000200d6 		addal #60,%sp
000200dc 		rte
000200de <_prep_INT4>	addal #-60,%sp
000200e4 		moveml %d0-%fp,%sp@
000200e8 		jsr 00022c88 <rutina_int4>
000200ee 		moveml %sp@,%d0-%fp
000200f2 		addal #60,%sp
000200f8 		rte
000200fa 		rts
// Autor: Javier Guillén Álvarez
//----------------------------------------------------------------------------------
// ALIAS para cuando no se especifican opciones
void outNumDec(UINT base, double n, UINT dec, UBYTE opciones)
{
000200fc <outNumDec>	linkw %fp,#-32
00020100 		lea %sp@(-40),%sp
00020104 		moveml %d2-%d7/%a2-%a5,%sp@
00020108 		movel %fp@(8),%d3
0002010c 		movel %fp@(12),%d6
00020110 		movel %fp@(16),%d7
00020114 		movel %fp@(20),%d4
00020118 		movel %fp@(24),%d2
0002011c 		moveaw %d2,%a4
  // Imprime la parte entera
  outNum(base, (int)n, opciones);  
0002011e 		lea 00024272 <__fixdfsi>,%a2
00020124 		movel %d7,%sp@-
00020126 		movel %d6,%sp@-
00020128 		jsr %a2@
0002012a 		addql #8,%sp
0002012c 		moveal %d0,%a0
0002012e 		lea 00024312 <_etext>,%a3
00020134 		lea 00024323 <_etext+0x11>,%a1
0002013a 		moveq #1,%d0
0002013c 		andl %d0,%d2
0002013e 		moveal %a2,%a5
00020140 		tstb %d2
00020142 		bnes 00020156 <outNumDec+0x5a>
00020144 		tstl %a0
00020146 		bges 00020156 <outNumDec+0x5a>
00020148 		moveq #45,%d2
0002014a 		moveb %d2,%d1
0002014c 		moveq #19,%d0
0002014e 		trap #15
00020150 		movel %a0,%d2
00020152 		negl %d2
00020154 		bras 00020158 <outNumDec+0x5c>
00020156 		movel %a0,%d2
00020158 		lea %fp@(-1),%a0
0002015c 		clrb %d1
0002015e 		moveb %d1,%fp@(-1)
00020162 		movel %a4,%d0
00020164 		moveq #2,%d1
00020166 		andl %d1,%d0
00020168 		moveal %d0,%a2
0002016a 		movel %a2,%d5
0002016c 		tstb %d5
0002016e 		beqs 0002017c <outNumDec+0x80>
00020170 		movel %d2,%d1
00020172 		divull %d3,%d0,%d1
00020176 		moveb %a1@(00000000,%d0:l),%a0@-
0002017a 		bras 00020186 <outNumDec+0x8a>
0002017c 		movel %d2,%d1
0002017e 		divull %d3,%d0,%d1
00020182 		moveb %a3@(00000000,%d0:l),%a0@-
00020186 		divull %d3,%d2,%d2
0002018a 		bnes 0002016c <outNumDec+0x70>
0002018c 		movel %a0,%sp@-
0002018e 		jsr 000225d8 <output>
00020194 		addql #4,%sp
  
  if(dec != 0){
00020196 		tstl %d4
00020198 		beqw 0002025a <outNumDec+0x15e>
    double dDecimal = n - (int)n;
0002019c 		movel %d7,%sp@-
0002019e 		movel %d6,%sp@-
000201a0 		jsr %a5@
000201a2 		addql #4,%sp
000201a4 		movel %d0,%sp@
000201a6 		jsr 000240f8 <__floatsidf>
000201ac 		addql #4,%sp
000201ae 		movel %d1,%sp@-
000201b0 		movel %d0,%sp@-
000201b2 		movel %d7,%sp@-
000201b4 		movel %d6,%sp@-
000201b6 		jsr 00022d02 <__subdf3>
000201bc 		lea %sp@(16),%sp
000201c0 		moveal %d0,%a0
000201c2 		moveal %d1,%a1

    // Multiplica la parte decimal por 10^dec
    while(dec--){
000201c4 		subql #1,%d4
000201c6 		movel %a4,%d5
000201c8 		moveq #1,%d0
000201ca 		andl %d0,%d5
000201cc 		moveq #-1,%d1
000201ce 		cmpl %d4,%d1
000201d0 		beqs 000201f4 <outNumDec+0xf8>
      dDecimal *= 10;
000201d2 		clrl %sp@-
000201d4 		movel #1076101120,%sp@-
000201da 		movel %a1,%sp@-
000201dc 		movel %a0,%sp@-
000201de 		jsr 00023198 <__muldf3>
000201e4 		lea %sp@(16),%sp
000201e8 		moveal %d0,%a0
000201ea 		moveal %d1,%a1
    }
000201ec 		subql #1,%d4
000201ee 		moveq #-1,%d0
000201f0 		cmpl %d4,%d0
000201f2 		bnes 000201d2 <outNumDec+0xd6>
000201f4 		moveq #46,%d2
000201f6 		moveb %d2,%d1
000201f8 		moveq #19,%d0
000201fa 		trap #15

    // Imprime la marca de decimal
    outch('.');

    // Imprime 'dec' decimales
    outNum(base, (int)dDecimal, opciones);
000201fc 		movel %a1,%sp@-
000201fe 		movel %a0,%sp@-
00020200 		jsr %a5@
00020202 		addql #8,%sp
00020204 		moveal %d0,%a0
00020206 		tstb %d5
00020208 		bnes 0002021c <outNumDec+0x120>
0002020a 		tstl %a0
0002020c 		bges 0002021c <outNumDec+0x120>
0002020e 		moveq #45,%d2
00020210 		moveb %d2,%d1
00020212 		moveq #19,%d0
00020214 		trap #15
00020216 		movel %a0,%d2
00020218 		negl %d2
0002021a 		bras 0002021e <outNumDec+0x122>
0002021c 		movel %a0,%d2
0002021e 		lea %fp@(-1),%a0
00020222 		clrb %d1
00020224 		moveb %d1,%fp@(-1)
00020228 		movel %a2,%d4
0002022a 		tstb %d4
0002022c 		beqs 0002023c <outNumDec+0x140>
0002022e 		movel %d2,%d1
00020230 		divull %d3,%d0,%d1
00020234 		lea 00024323 <_etext+0x11>,%a1
0002023a 		bras 00020248 <outNumDec+0x14c>
0002023c 		movel %d2,%d1
0002023e 		divull %d3,%d0,%d1
00020242 		lea 00024312 <_etext>,%a1
00020248 		moveb %a1@(00000000,%d0:l),%a0@-
0002024c 		divull %d3,%d2,%d2
00020250 		bnes 0002022a <outNumDec+0x12e>
00020252 		movel %a0,%sp@-
00020254 		jsr 000225d8 <output>
  }
}
0002025a 		moveml %fp@(-72),%d2-%d7/%a2-%a5
00020260 		unlk %fp
00020262 		rts
//
// Autor: Javier Guillén Álvarez
//------------------------------------------------------------------------------
void ADC_test(long int datoDAC)
{  
00020264 <ADC_test>	linkw %fp,#-32
00020268 		lea %sp@(-40),%sp
0002026c 		moveml %d2-%d7/%a2-%a5,%sp@
00020270 		movel %fp@(8),%d5
00020274 		moveal #268435616,%a0
0002027a 		movew #-32752,%a0@
0002027e 		moveal #268435632,%a1
00020284 		clrw %a1@
00020286 		lea %a0@(20),%a0
0002028a 		movew #-26729,%a0@
0002028e 		clrw %a0@
00020290 		clrw %a0@
00020292 		movew #32,%a1@
00020296 		movew #-29184,%a0@
0002029a 		movew #-29184,%a0@
0002029e 		movew #3584,%a0@
000202a2 		lea %a0@(-12),%a0
000202a6 		movew #4608,%a0@
000202aa 		subql #4,%a0
000202ac 		movew %a0@,%d0
000202ae 		oril #32768,%d0
000202b4 		movew %d0,%a0@
000202b6 		lea 00024334 <_etext+0x22>,%a1
000202bc 		lea 00024312 <_etext>,%a4
000202c2 		lea 00024323 <_etext+0x11>,%a3
000202c8 		movel %fp,%d6
000202ca 		subql #1,%d6
000202cc 		lea 00024336 <_etext+0x24>,%a5
000202d2 		movel #148281,%d7
000202d8 		addql #8,%a0
000202da 		movew %a0@,%d0
000202dc 		moveq #1,%d1
000202de 		andl %d1,%d0
000202e0 		tstw %d0
000202e2 		beqs 000202da <ADC_test+0x76>
000202e4 		moveal #268435628,%a0
000202ea 		movew %a0@,%d0
000202ec 		orl %d1,%d0
000202ee 		movew %d0,%a0@
000202f0 		addql #4,%a0
000202f2 		movew #16,%a0@
000202f6 		addql #4,%a0
000202f8 		movew %a0@,%d0
000202fa 		movew %a0@,%d0
000202fc 		andil #65535,%d0
00020302 		movew %a0@,%d1
00020304 		andil #65535,%d1
0002030a 		asrl #3,%d1
0002030c 		lsll #5,%d0
0002030e 		addl %d0,%d1
00020310 		btst #11,%d1
00020314 		beqs 0002031e <ADC_test+0xba>
00020316 		oril #-4096,%d1
0002031c 		bras 00020324 <ADC_test+0xc0>
0002031e 		andil #4095,%d1
  int datoLeido=0,errorAbs=0,errorRelat=0;
   
  datoLeido = ADC_dato();
  
  datoLeido *= 2; // Para igualar la escala con el DAC
00020324 		movel %d1,%d3
00020326 		addl %d3,%d3

//------------------------------------------------------------------------------
// INLINE void output(char *start)
//
// Descripción: imprime un texto en la pantalla del PC
// Entrada:     char *start, texto que imprimir, terminado en 0
// Salida:      void
// Devuelve:    void
//------------------------------------------------------------------------------
INLINE void output(char *start)
{
  if (start!=0){
00020328 		tstl %a1
0002032a 		beqs 0002033e <ADC_test+0xda>
    int i=0;
    for (i=0; start[i]!=0; i++){
0002032c 		tstb %a1@
0002032e 		beqs 0002033e <ADC_test+0xda>
00020330 		moveal %a1,%a0
00020332 		moveb %a0@+,%d2
00020334 		moveb %d2,%d1
00020336 		moveq #19,%d0
00020338 		trap #15
0002033a 		tstb %a0@
0002033c 		bnes 00020332 <ADC_test+0xce>
0002033e 		movel %d3,%d2
00020340 		moveal %d6,%a0
00020342 		clrb %d4
00020344 		moveb %d4,%fp@(-1)
00020348 		moveal %d3,%a2
0002034a 		subal %d5,%a2
0002034c 		clrb %d0
0002034e 		beqs 0002035e <ADC_test+0xfa>
00020350 		movel %d2,%d1
00020352 		moveq #10,%d4
00020354 		divull %d4,%d0,%d1
00020358 		moveb %a3@(00000000,%d0:l),%a0@-
0002035c 		bras 0002036a <ADC_test+0x106>
0002035e 		movel %d2,%d1
00020360 		moveq #10,%d4
00020362 		divull %d4,%d0,%d1
00020366 		moveb %a4@(00000000,%d0:l),%a0@-
0002036a 		moveq #10,%d1
0002036c 		divull %d1,%d2,%d2
00020370 		bnes 0002034c <ADC_test+0xe8>
00020372 		movel %a0,%sp@-
00020374 		jsr 000225d8 <output>
0002037a 		addql #4,%sp
0002037c 		tstl %a5
0002037e 		beqs 00020392 <ADC_test+0x12e>
00020380 		tstb %a5@
00020382 		beqs 00020392 <ADC_test+0x12e>
00020384 		moveal %a5,%a0
00020386 		moveb %a0@+,%d2
00020388 		moveb %d2,%d1
0002038a 		moveq #19,%d0
0002038c 		trap #15
0002038e 		tstb %a0@
00020390 		bnes 00020386 <ADC_test+0x122>
00020392 		movel %d5,%d2
00020394 		moveal %d6,%a0
00020396 		clrb %d4
00020398 		moveb %d4,%fp@(-1)
0002039c 		subal %a5,%a5
0002039e 		movew %a5,%d0
000203a0 		tstb %d0
000203a2 		beqs 000203b2 <ADC_test+0x14e>
000203a4 		movel %d2,%d1
000203a6 		moveq #10,%d4
000203a8 		divull %d4,%d0,%d1
000203ac 		moveb %a3@(00000000,%d0:l),%a0@-
000203b0 		bras 000203be <ADC_test+0x15a>
000203b2 		movel %d2,%d1
000203b4 		moveq #10,%d4
000203b6 		divull %d4,%d0,%d1
000203ba 		moveb %a4@(00000000,%d0:l),%a0@-
000203be 		moveq #10,%d1
000203c0 		divull %d1,%d2,%d2
000203c4 		bnes 0002039e <ADC_test+0x13a>
000203c6 		movel %a0,%sp@-
000203c8 		jsr 000225d8 <output>
000203ce 		addql #4,%sp
000203d0 		tstl %d7
000203d2 		beqs 000203e6 <ADC_test+0x182>
000203d4 		moveal %d7,%a0
000203d6 		tstb %a0@
000203d8 		beqs 000203e6 <ADC_test+0x182>
000203da 		moveb %a0@+,%d2
000203dc 		moveb %d2,%d1
000203de 		moveq #19,%d0
000203e0 		trap #15
000203e2 		tstb %a0@
000203e4 		bnes 000203da <ADC_test+0x176>

  output(" ");
  print_number (10, 1, (long)datoLeido);
  output("\t ");
  print_number (10, 1, (long)datoDAC);
  output("\t  ");
  
  if (datoDAC >	datoLeido)
000203e6 		cmpl %d5,%d3
000203e8 		bges 000203ee <ADC_test+0x18a>
     errorAbs=datoDAC-datoLeido;
000203ea 		moveal %d5,%a2
000203ec 		subal %d3,%a2
000203ee 		movel %a2,%d2
000203f0 		moveal %d6,%a0
000203f2 		clrb %d0
000203f4 		moveb %d0,%fp@(-1)
000203f8 		clrl %d4
000203fa 		tstb %d4
000203fc 		beqs 0002040c <ADC_test+0x1a8>
000203fe 		movel %d2,%d1
00020400 		moveq #10,%d7
00020402 		divull %d7,%d0,%d1
00020406 		moveb %a3@(00000000,%d0:l),%a0@-
0002040a 		bras 00020418 <ADC_test+0x1b4>
0002040c 		movel %d2,%d1
0002040e 		moveq #10,%d7
00020410 		divull %d7,%d0,%d1
00020414 		moveb %a4@(00000000,%d0:l),%a0@-
00020418 		moveq #10,%d1
0002041a 		divull %d1,%d2,%d2
0002041e 		bnes 000203fa <ADC_test+0x196>
00020420 		movel %a0,%sp@-
00020422 		jsr 000225d8 <output>
00020428 		addql #4,%sp
0002042a 		movel #148285,%d4
00020430 		beqs 00020448 <ADC_test+0x1e4>
00020432 		tstb 0002433d <_etext+0x2b>
00020438 		beqs 00020448 <ADC_test+0x1e4>
0002043a 		moveal %d4,%a0
0002043c 		moveb %a0@+,%d2
0002043e 		moveb %d2,%d1
00020440 		moveq #19,%d0
00020442 		trap #15
00020444 		tstb %a0@
00020446 		bnes 0002043c <ADC_test+0x1d8>
  else
     errorAbs=datoLeido-datoDAC;

  print_number (10, 1, errorAbs);
  output("\t\t  ");

  if (datoDAC>0)
00020448 		tstl %d5
0002044a 		bles 00020460 <ADC_test+0x1fc>
     errorRelat = (100 * errorAbs)/datoDAC;
0002044c 		lea %a2@(00000000,%a2:l:2),%a0
00020450 		movel %a0,%d0
00020452 		lsll #5,%d0
00020454 		addal %d0,%a0
00020456 		movel %a0,%d1
00020458 		addl %a2,%d1
0002045a 		divsll %d5,%d1,%d1
0002045e 		bras 0002047a <ADC_test+0x216>
  else if (datoLeido>0)
00020460 		tstl %d3
00020462 		bles 00020478 <ADC_test+0x214>
     errorRelat = (100 * errorAbs)/datoLeido;
00020464 		lea %a2@(00000000,%a2:l:2),%a0
00020468 		movel %a0,%d0
0002046a 		lsll #5,%d0
0002046c 		addal %d0,%a0
0002046e 		movel %a0,%d1
00020470 		addl %a2,%d1
00020472 		divsll %d3,%d1,%d1
00020476 		bras 0002047a <ADC_test+0x216>
  else
     errorRelat = 100;
00020478 		moveq #100,%d1
0002047a 		movel %d1,%d2
0002047c 		moveal %d6,%a0
0002047e 		clrb %d7
00020480 		moveb %d7,%fp@(-1)
00020484 		clrl %d3
00020486 		tstb %d3
00020488 		beqs 00020498 <ADC_test+0x234>
0002048a 		movel %d2,%d1
0002048c 		moveq #10,%d4
0002048e 		divull %d4,%d0,%d1
00020492 		moveb %a3@(00000000,%d0:l),%a0@-
00020496 		bras 000204a4 <ADC_test+0x240>
00020498 		movel %d2,%d1
0002049a 		moveq #10,%d7
0002049c 		divull %d7,%d0,%d1
000204a0 		moveb %a4@(00000000,%d0:l),%a0@-
000204a4 		moveq #10,%d1
000204a6 		divull %d1,%d2,%d2
000204aa 		bnes 00020486 <ADC_test+0x222>
000204ac 		movel %a0,%sp@-
000204ae 		jsr 000225d8 <output>
000204b4 		movel #148290,%d4
000204ba 		beqs 000204d2 <ADC_test+0x26e>
000204bc 		tstb 00024342 <_etext+0x30>
000204c2 		beqs 000204d2 <ADC_test+0x26e>
000204c4 		moveal %d4,%a0
000204c6 		moveb %a0@+,%d2
000204c8 		moveb %d2,%d1
000204ca 		moveq #19,%d0
000204cc 		trap #15
000204ce 		tstb %a0@
000204d0 		bnes 000204c6 <ADC_test+0x262>

  print_number (10, 1, errorRelat);
  output("%\n");
}
000204d2 		moveml %fp@(-72),%d2-%d7/%a2-%a5
000204d8 		unlk %fp
000204da 		rts
// Descripción:
//   Función de inicialización del LCD
//--------------------------------------
void LCD_init()
{
000204dc <LCD_init>	linkw %fp,#0
000204e0 		movel %d2,%sp@-
  LCD_inst(FS_CONF8);	// Function Set: 8bits, 2líneas, 5x7puntos
000204e2 		movew #14336,%d1
000204e6 		movel #14464,%d0

void set16_puertoS (UWORD valor)
{
  UWORD* pchar;
  puertoS = valor;
000204ec 		movew %d0,000309d4 <puertoS>
  pchar=(UWORD*)BASE_PUERTO_S;
  (*pchar)=puertoS;
000204f2 		movew %d0,40000000 <_end+0x3ffcf5ec>
       outch(start[i]);
    }
  }
}

//------------------------------------------------------------------------------
// INLINE void retardo(UINT microsegundos) 
//
// Descripción: Introduce un retardo de los microsegundos indicados aproximadamente
//
// NOTA: La fórmula de cálculo de 'ret' proporciona un error de +-5% si
//       microsegundos >= 100. El error aumenta para tiempos menores.
//
// Autor: Javier Guillén Álvarez
//------------------------------------------------------------------------------
INLINE void retardo(UINT microsegundos) 
{
  UINT ret = (44 * microsegundos - 32)/16;
000204f8 		movel #8248,%d0
  while(ret--);
000204fe 		subql #1,%d0
00020500 		moveq #-1,%d2
00020502 		cmpl %d0,%d2
00020504 		bnes 000204fe <LCD_init+0x22>
00020506 		movew %d1,000309d4 <puertoS>
0002050c 		movew %d1,40000000 <_end+0x3ffcf5ec>
00020512 		movel #8248,%d0
00020518 		subql #1,%d0
0002051a 		moveq #-1,%d1
0002051c 		cmpl %d0,%d1
0002051e 		bnes 00020518 <LCD_init+0x3c>
  LCD_inst(CLR_DISP);	// Clear Display 
00020520 		movew #256,%d1
00020524 		movel #384,%d0
0002052a 		movew %d0,000309d4 <puertoS>
00020530 		movew %d0,40000000 <_end+0x3ffcf5ec>
00020536 		movel #8248,%d0
0002053c 		subql #1,%d0
0002053e 		moveq #-1,%d2
00020540 		cmpl %d0,%d2
00020542 		bnes 0002053c <LCD_init+0x60>
00020544 		movew %d1,000309d4 <puertoS>
0002054a 		movew %d1,40000000 <_end+0x3ffcf5ec>
00020550 		movel #8248,%d0
00020556 		subql #1,%d0
00020558 		moveq #-1,%d1
0002055a 		cmpl %d0,%d1
0002055c 		bnes 00020556 <LCD_init+0x7a>
  LCD_inst(MODE_SET);	// Autoincremento del cursor y sin desplazamiento (shift)
0002055e 		movew #1536,%d1
00020562 		movel #1664,%d0
00020568 		movew %d0,000309d4 <puertoS>
0002056e 		movew %d0,40000000 <_end+0x3ffcf5ec>
00020574 		movel #8248,%d0
0002057a 		subql #1,%d0
0002057c 		moveq #-1,%d2
0002057e 		cmpl %d0,%d2
00020580 		bnes 0002057a <LCD_init+0x9e>
00020582 		movew %d1,000309d4 <puertoS>
00020588 		movew %d1,40000000 <_end+0x3ffcf5ec>
0002058e 		movel #8248,%d0
00020594 		subql #1,%d0
00020596 		moveq #-1,%d1
00020598 		cmpl %d0,%d1
0002059a 		bnes 00020594 <LCD_init+0xb8>
  LCD_inst(CD_ON);	// Activa el display, el cursor y el parpadeo
0002059c 		movew #3840,%d1
000205a0 		movel #3968,%d0
000205a6 		movew %d0,000309d4 <puertoS>
000205ac 		movew %d0,40000000 <_end+0x3ffcf5ec>
000205b2 		movel #8248,%d0
000205b8 		subql #1,%d0
000205ba 		moveq #-1,%d2
000205bc 		cmpl %d0,%d2
000205be 		bnes 000205b8 <LCD_init+0xdc>
000205c0 		movew %d1,000309d4 <puertoS>
000205c6 		movew %d1,40000000 <_end+0x3ffcf5ec>
000205cc 		movel #8248,%d0
000205d2 		subql #1,%d0
000205d4 		moveq #-1,%d1
000205d6 		cmpl %d0,%d1
000205d8 		bnes 000205d2 <LCD_init+0xf6>
}
000205da 		movel %sp@+,%d2
000205dc 		unlk %fp
000205de 		rts

//--------------------------------------
// void LCD_reset()
//
// Descripción:
//   Función de inicialización del LCD
//--------------------------------------
void LCD_reset()
{
000205e0 <LCD_reset>	linkw %fp,#0
000205e4 		movel %d2,%sp@-
000205e6 		movel #41248,%d0
000205ec 		subql #1,%d0
000205ee 		moveq #-1,%d1
000205f0 		cmpl %d0,%d1
000205f2 		bnes 000205ec <LCD_reset+0xc>
  int i;
  retardo(RET_15MS);		// Retardo inicial
  for(i = 0; i < 3; i++){	// Se repite 3 veces,
000205f4 		clrl %d1
000205f6 		moveaw #12416,%a1
000205fa 		moveaw #12288,%a0
000205fe 		movew %a1,000309d4 <puertoS>
00020604 		movew %a1,40000000 <_end+0x3ffcf5ec>
0002060a 		movel #8248,%d0
00020610 		addql #1,%d1
00020612 		subql #1,%d0
00020614 		moveq #-1,%d2
00020616 		cmpl %d0,%d2
00020618 		bnes 00020612 <LCD_reset+0x32>
0002061a 		movew %a0,000309d4 <puertoS>
00020620 		movew %a0,40000000 <_end+0x3ffcf5ec>
00020626 		movel #8248,%d0
0002062c 		subql #1,%d0
0002062e 		moveq #-1,%d2
00020630 		cmpl %d0,%d2
00020632 		bnes 0002062c <LCD_reset+0x4c>
00020634 		movel #41248,%d0
0002063a 		subql #1,%d0
0002063c 		moveq #-1,%d2
0002063e 		cmpl %d0,%d2
00020640 		bnes 0002063a <LCD_reset+0x5a>
00020642 		moveq #2,%d0
00020644 		cmpl %d1,%d0
00020646 		bges 000205fe <LCD_reset+0x1e>
    LCD_inst(FS_8BITS);		//   Instrucción para funcionamiento en 8 bits
    retardo(RET_15MS);		//   Hay que esperar más de 4.1ms
  }
}
00020648 		movel %sp@+,%d2
0002064a 		unlk %fp
0002064c 		rts
// Descripción:
//   Explora el teclado matr<icial y devuelve la tecla 
//   pulsada
//------------------------------------------------------
char teclado(void) {
0002064e <teclado>	linkw %fp,#0
00020652 		lea %sp@(-28),%sp
00020656 		moveml %d2-%d7/%a2,%sp@
	//char tecla;
	BYTE fila, columna, fila_mask;
	static char teclas[4][4] = {{"123C"},
								{"456D"},
								{"789E"},
								{"A0BF"}};
	// Bucle de exploración del teclado
	while (TRUE) {
0002065a 		lea 00030102 <teclas.108>,%a2
		// Excitamos una columna
		for (columna = NUM_COLS - 1; columna >= 0; columna--) {
00020660 		moveq #3,%d6
			salida = salida & 0xFFF0;				 				// Realizamos un AND binario  con el valor actual de salida y 0xFFF0 para no interferir
00020662 		movew 00030112 <salida>,%d0
00020668 		andil #65520,%d0
			salida = salida | (EXCIT << columna);    
0002066e 		moveb %d6,%d2
00020670 		extbl %d2
00020672 		moveq #1,%d1
00020674 		lsll %d2,%d1
00020676 		orl %d1,%d0
00020678 		movew %d0,00030112 <salida>
0002067e 		movew %d0,000309d4 <puertoS>
00020684 		movew %d0,40000000 <_end+0x3ffcf5ec>
0002068a 		movel #54998,%d0
00020690 		subql #1,%d0
00020692 		moveq #-1,%d1
00020694 		cmpl %d0,%d1
00020696 		bnes 00020690 <teclado+0x42>
			set16_puertoS (salida);									// Se envía la excitación de columna
			retardo(20000);											// Esperamos respuesta de optoacopladores
			
			// Exploramos las filas en busca de respuesta
			for (fila = NUM_FILAS - 1; fila >= 0; fila--) {
00020698 		moveq #3,%d5
0002069a 		moveq #1,%d7
0002069c 		clrl %d3
0002069e 		clrl %d4
000206a0 		moveal %d2,%a1
				fila_mask = EXCIT << fila;					// Máscara para leer el bit de la fila actual
000206a2 		moveb %d5,%d1
000206a4 		extbl %d1
000206a6 		movel %d7,%d0
000206a8 		lsll %d1,%d0
}

//------------------------------------------
// UWORD lee16_puertoE (void)
//
// Descripción:
//   Lee los 16 bits del puerto de entrada
//------------------------------------------
UWORD lee16_puertoE (void)
{
  return *((UWORD*) BASE_PUERTO_E);
000206aa 		movew 50000002 <_end+0x4ffcf5ee>,%d3
				if (lee16_puertoE() & fila_mask) {				// Si encuentra tecla pulsada,
000206b0 		movew %d3,%d4
000206b2 		moveb %d0,%d2
000206b4 		extbl %d2
000206b6 		movel %d4,%d0
000206b8 		andl %d2,%d0
000206ba 		moveal %d1,%a0
000206bc 		beqs 000206ea <teclado+0x9c>
					while (lee_puertoE() & fila_mask);				//	Esperamos a que se suelte
000206be 		clrl %d1
000206c0 		clrl %d3
}

//-------------------------------------------
// UBYTE lee_puertoE (void)
//
// Descripción:
//   Lee el byte bajo del puerto de entrada
//-------------------------------------------
UBYTE lee_puertoE (void)
{
  return  (UBYTE)*((UWORD*) BASE_PUERTO_E);
000206c2 		moveb 50000003 <_end+0x4ffcf5ef>,%d1
000206c8 		moveb %d1,%d3
000206ca 		movel %d3,%d0
000206cc 		andl %d2,%d0
000206ce 		bnes 000206c2 <teclado+0x74>
000206d0 		movel #54998,%d0
000206d6 		subql #1,%d0
000206d8 		moveq #-1,%d1
000206da 		cmpl %d0,%d1
000206dc 		bnes 000206d6 <teclado+0x88>
					retardo(20000);						//	Retardo antirrebotes
					return teclas[fila][columna];					//	Devolvemos la tecla pulsada
000206de 		lea %a1@(00000000,%a0:l:4),%a0
000206e2 		moveb %a0@(00000000,%a2:l),%d0
000206e6 		extbl %d0
000206e8 		bras 00020700 <teclado+0xb2>
000206ea 		movel %d5,%d0
000206ec 		subql #1,%d0
000206ee 		moveb %d0,%d5
000206f0 		bges 000206a2 <teclado+0x54>
000206f2 		movel %d6,%d0
000206f4 		subql #1,%d0
000206f6 		moveb %d0,%d6
000206f8 		bgew 00020662 <teclado+0x14>
				}
			}
			// Siguiente columna
		}
		// Exploración finalizada sin encontrar una tecla pulsada
	}
000206fc 		braw 00020660 <teclado+0x12>
	// Reiniciamos exploración
}00020700 		moveml %sp@,%d2-%d7/%a2
00020704 		lea %sp@(28),%sp
00020708 		unlk %fp
0002070a 		rts
// Parámetros:
//   char* cadena
//     puntero al búfer donde almacena la cadena leída.
//------------------------------------------------------
int getCadTeclado(char* cadena) {
0002070c <getCadTeclado>	linkw %fp,#0
00020710 		lea %sp@(-40),%sp
00020714 		moveml %d2-%d7/%a2-%a5,%sp@
00020718 		moveal %fp@(8),%a3
	int i = 0;													// Lleva la cuenta de la posición en el array
0002071c 		clrl %d4
	char w;														// Variable donde se almacena cada caracter leído del teclado
	int num = 0;													// Número que devuelve la función
	int cifras = 0;	
0002071e 		clrl %d5
00020720 		lea 00024345 <_etext+0x33>,%a0
00020726 		lea %pc@(0002064e <teclado>),%a5
0002072a 		lea 00024349 <_etext+0x37>,%a4
00020730 		tstl %a0
00020732 		beqs 00020744 <getCadTeclado+0x38>
00020734 		tstb %a0@
00020736 		beqs 00020744 <getCadTeclado+0x38>
00020738 		moveb %a0@+,%d2
0002073a 		moveb %d2,%d1
0002073c 		moveq #19,%d0
0002073e 		trap #15
00020740 		tstb %a0@
00020742 		bnes 00020738 <getCadTeclado+0x2c>
	output("			");												// Número de cifras del número
	do {														// Se ejecuta:
00020744 		clrl %d7
00020746 		lea %a3@(00000000,%d4:l),%a2
0002074a 		clrl %d6
0002074c 		bras 00020758 <getCadTeclado+0x4c>
0002074e 		addql #1,%a2
00020750 		addql #1,%d4
00020752 		moveq #3,%d0
00020754 		cmpl %d4,%d0
00020756 		blts 000207c2 <getCadTeclado+0xb6>
		w = teclado();												//	Lee el teclado matricial y almacena la tecla pulsada en w
00020758 		jsr %a5@
0002075a 		moveb %d0,%d2
		if (w <= '9' && w >= '0') {										//	Si la tecla pulsada es un número
0002075c 		moveq #-48,%d0
0002075e 		addl %d2,%d0
00020760 		moveb %d0,%d7
00020762 		moveq #9,%d1
00020764 		cmpl %d7,%d1
00020766 		bcss 0002078a <getCadTeclado+0x7e>
			if (i == 0 && w == '0') {									//		Si para la primera cifra intentamos poner un 0
00020768 		moveb %d2,%d3
0002076a 		extbl %d3
0002076c 		tstl %d4
0002076e 		bnes 0002077e <getCadTeclado+0x72>
00020770 		moveq #48,%d0
00020772 		cmpl %d3,%d0
00020774 		bnes 0002077e <getCadTeclado+0x72>
				i--;											//			Se ignora la tecla pulsada
00020776 		lea %a3@(-1),%a2
0002077a 		moveq #-1,%d4
			} else {											//		Si para la primera cifra no intentamos poner un 0
0002077c 		bras 0002079e <getCadTeclado+0x92>
				cifras++;										//			Aumenta el número de cifras del número
0002077e 		addql #1,%d5
				cadena[i] = w;										// 			Almacena el caracter leído en el array cadena
00020780 		moveb %d2,%a2@
00020782 		moveb %d2,%d1
00020784 		moveq #19,%d0
00020786 		trap #15
				outch(cadena[i]);									// 			Imprime en el terminal el caracter leído
			}
		} else if (w != 'D' && w != 'E') {									//	Si la tecla pulsada no es un número ni la tecla de borrar o de enter 
00020788 		bras 0002079e <getCadTeclado+0x92>
0002078a 		moveq #-68,%d0
0002078c 		addl %d2,%d0
0002078e 		moveb %d0,%d6
00020790 		moveb %d2,%d3
00020792 		extbl %d3
00020794 		moveq #1,%d1
00020796 		cmpl %d6,%d1
00020798 		bccs 0002079e <getCadTeclado+0x92>
			i--;												//		Se ignora la tecla pulsada
0002079a 		subql #1,%a2
0002079c 		subql #1,%d4
		}
		if (w == 'D') { 											//	Si la tecla pulsada es la de borrar
0002079e 		moveq #68,%d0
000207a0 		cmpl %d3,%d0
000207a2 		bnes 000207bc <getCadTeclado+0xb0>
			if (i >	0) {											//		Si no estamos en la primera posición del array
000207a4 		tstl %d4
000207a6 		bles 000207b8 <getCadTeclado+0xac>
				cifras--;										//			Disminuye el número de cifras del número
000207a8 		subql #1,%d5
000207aa 		moveq #8,%d2
000207ac 		moveb %d2,%d1
000207ae 		moveq #19,%d0
000207b0 		trap #15
				outch('\b');										//			Se borra el último número imprimido en el terminal
				i -= 2;											//			Retrocede una posición en el array
000207b2 		subql #2,%a2
000207b4 		subql #2,%d4
			} else {											// 		Si estamos en la primera posición
000207b6 		bras 000207bc <getCadTeclado+0xb0>
				i--;											//			Se ignora la tecla pulsada
000207b8 		subql #1,%a2
000207ba 		subql #1,%d4
			}
		}
	} while ((w != 'E') && (++i < 4));										// Mientras no se pulse la tecla de enter y el número tenga 4 cifras o menos
000207bc 		moveq #69,%d1
000207be 		cmpl %d3,%d1
000207c0 		bnes 0002074e <getCadTeclado+0x42>
000207c2 		movel %d4,%d3
000207c4 		addql #1,%d3
000207c6 		tstl %a4
000207c8 		beqs 000207dc <getCadTeclado+0xd0>
000207ca 		tstb %a4@
000207cc 		beqs 000207dc <getCadTeclado+0xd0>
000207ce 		moveal %a4,%a0
000207d0 		moveb %a0@+,%d2
000207d2 		moveb %d2,%d1
000207d4 		moveq #19,%d0
000207d6 		trap #15
000207d8 		tstb %a0@
000207da 		bnes 000207d0 <getCadTeclado+0xc4>

	output("\r\n");													// Se guardan e imprimen los caracteres de:
	cadena[i++] = '\r';												// - Retorno de carro
000207dc 		moveq #13,%d0
000207de 		moveb %d0,%a3@(00000000,%d4:l)
000207e2 		movel %d3,%d4
	cadena[i++] = '\n';												// - Cambio de línea
000207e4 		moveq #10,%d1
000207e6 		moveb %d1,%a3@(00000000,%d4:l)
	cadena[i]   = '\0';												// - Fin de cadena
000207ea 		clrb %d0
000207ec 		moveb %d0,%a3@(00000001,%d4:l)
	
	if (cifras == 4) {												// Devuelve el número si tiene 4 cifras
000207f0 		moveq #4,%d1
000207f2 		cmpl %d5,%d1
000207f4 		bnes 00020848 <getCadTeclado+0x13c>
		num = 1000*(cadena[0] - 48) + 100*(cadena[1] - 48) + 10*(cadena[2] - 48) + (cadena[3] - 48);
000207f6 		moveb %a3@,%d0
000207f8 		extbl %d0
000207fa 		moveal %d0,%a1
000207fc 		lea %a1@(-48),%a0
00020800 		movel %a0,%d1
00020802 		lsll #5,%d1
00020804 		subl %a0,%d1
00020806 		lea %a0@(00000000,%d1:l:4),%a0
0002080a 		movel %a0,%d1
0002080c 		lsll #3,%d1
0002080e 		moveb %a3@(1),%d0
00020812 		extbl %d0
00020814 		moveal %d0,%a2
00020816 		lea %a2@(-48),%a1
0002081a 		lea %a1@(00000000,%a1:l:2),%a0
0002081e 		movel %a0,%d0
00020820 		lsll #5,%d0
00020822 		addal %d0,%a0
00020824 		addal %a1,%a0
00020826 		lea %a0@(00000000,%d1:l),%a0
0002082a 		moveb %a3@(2),%d1
0002082e 		extbl %d1
00020830 		moveq #-48,%d0
00020832 		addl %d0,%d1
00020834 		movel %d1,%d0
00020836 		lsll #3,%d0
00020838 		moveal %d0,%a2
0002083a 		lea %a2@(00000000,%d1:l:2),%a1
0002083e 		lea %a1@(ffffffd0,%a0:l),%a0
00020842 		moveb %a3@(3),%d0
		return num;
00020846 		bras 0002089e <getCadTeclado+0x192>
	}
	else if (cifras == 3) {												// Devuelve el número si tiene 3 cifras
00020848 		moveq #3,%d0
0002084a 		cmpl %d5,%d0
0002084c 		bnes 00020882 <getCadTeclado+0x176>
		num = 100*(cadena[0] - 48) + 10*(cadena[1] - 48) + (cadena[2] - 48);
0002084e 		moveb %a3@,%d0
00020850 		extbl %d0
00020852 		moveal %d0,%a0
00020854 		lea %a0@(-48),%a1
00020858 		lea %a1@(00000000,%a1:l:2),%a0
0002085c 		movel %a0,%d0
0002085e 		lsll #5,%d0
00020860 		addal %d0,%a0
00020862 		addal %a1,%a0
00020864 		moveb %a3@(1),%d1
00020868 		extbl %d1
0002086a 		moveq #-48,%d0
0002086c 		addl %d0,%d1
0002086e 		movel %d1,%d0
00020870 		lsll #3,%d0
00020872 		moveal %d0,%a2
00020874 		lea %a2@(00000000,%d1:l:2),%a1
00020878 		lea %a1@(ffffffd0,%a0:l),%a0
0002087c 		moveb %a3@(2),%d0
		return num;
00020880 		bras 0002089e <getCadTeclado+0x192>
	}
	else if (cifras == 2) {												// Devuelve el número si tiene 2 cifras
00020882 		moveq #2,%d0
00020884 		cmpl %d5,%d0
00020886 		bnes 000208a4 <getCadTeclado+0x198>
		num = 10*(cadena[0] - 48) + (cadena[1] - 48);
00020888 		moveb %a3@,%d1
0002088a 		extbl %d1
0002088c 		moveq #-48,%d0
0002088e 		addl %d0,%d1
00020890 		movel %d1,%d0
00020892 		lsll #3,%d0
00020894 		moveal %d0,%a1
00020896 		lea %a1@(ffffffd0,%d1:l:2),%a0
0002089a 		moveb %a3@(1),%d0
0002089e 		extbl %d0
		return num;
000208a0 		addl %a0,%d0
000208a2 		bras 000208b2 <getCadTeclado+0x1a6>
	}
	else if (cifras == 1) {												// Devuelve el número si tiene 1 cifra
000208a4 		moveq #1,%d0
000208a6 		cmpl %d5,%d0
000208a8 		bnes 000208b2 <getCadTeclado+0x1a6>
		num = (cadena[0] - 48);
000208aa 		moveb %a3@,%d0
000208ac 		extbl %d0
		return num;
000208ae 		moveq #-48,%d1
000208b0 		addl %d1,%d0
	}
	else if (cifras == 0) {												// Devuelve un 1 si no introducimos nada
		return 1;
	}
	return 1;
}000208b2 		moveml %fp@(-40),%d2-%d7/%a2-%a5
000208b8 		unlk %fp
000208ba 		rts
//
// Descripción:
//   Función de atención a la interrupción para TIMER0
//------------------------------------------------------
void rutina_tout0(void) {
000208bc <rutina_tout0>	linkw %fp,#-16
000208c0 		lea %sp@(-40),%sp
000208c4 		moveml %d2-%d7/%a2-%a5,%sp@
000208c8 		moveal #268435616,%a0
000208ce 		movew #-32752,%a0@
000208d2 		moveal #268435632,%a1
000208d8 		clrw %a1@
000208da 		lea %a0@(20),%a0
000208de 		movew #-26729,%a0@
000208e2 		clrw %a0@
000208e4 		clrw %a0@
000208e6 		movew #32,%a1@
000208ea 		movew #-29184,%a0@
000208ee 		movew #-29184,%a0@
000208f2 		movew #3584,%a0@
000208f6 		lea %a0@(-12),%a0
000208fa 		movew #4608,%a0@
000208fe 		subql #4,%a0
00020900 		movew %a0@,%d0
00020902 		oril #32768,%d0
00020908 		movew %d0,%a0@
0002090a 		addql #8,%a0
0002090c 		movew %a0@,%d0
0002090e 		moveq #1,%d1
00020910 		andl %d1,%d0
00020912 		tstw %d0
00020914 		beqs 0002090c <rutina_tout0+0x50>
00020916 		moveal #268435628,%a0
0002091c 		movew %a0@,%d0
0002091e 		orl %d1,%d0
00020920 		movew %d0,%a0@
00020922 		addql #4,%a0
00020924 		movew #16,%a0@
00020928 		addql #4,%a0
0002092a 		movew %a0@,%d0
0002092c 		movew %a0@,%d0
0002092e 		andil #65535,%d0
00020934 		movew %a0@,%d1
00020936 		clrl %d5
00020938 		movew %d1,%d5
0002093a 		asrl #3,%d5
0002093c 		lsll #5,%d0
0002093e 		addl %d0,%d5
00020940 		btst #11,%d5
00020944 		beqs 0002094e <rutina_tout0+0x92>
00020946 		oril #-4096,%d5
0002094c 		bras 00020954 <rutina_tout0+0x98>
0002094e 		andil #4095,%d5
	static int sumaSeno[MAX_FRECS];											// Almacena todos los valores (el sumatorio) de la parte imaginaria de la DFT
	static int sumaCoseno[MAX_FRECS];										// Almacena todos los valores (el sumatorio) de la parte real de la DFT
	int dato = ADC_dato();												// Número obtenido tras interpretar el número leído a la entrada (int ADC_leeRxRAM() de m5272adc_dac.c)
	mbar_writeShort(MCFSIM_TER0,BORRA_REF); 									// Reset del bit de fin de cuenta
00020954 		moveal #268435984,%a0
0002095a 		movew #2,%a0@

	/*	Se incrementa contadorDFT para llevar la cuenta de cuantas interrupciones van.
		Recorremos con i las 20 frecuencias. Si estamos en la primera interrupción, ponemos cada componente de los arrays sumaSeno[] y sumaCoseno[] a 0.
		Después se rellena cada posición de dichos arrays (cada posición representa una frecuencia distinta) con el dato multiplpicado por un valor de
		sinusoide10HZ[]. Para el seno este valor es resto de dividir entre el numero de muestras (400) el valor del paso correspondiente a cada frecuencia
		(pasos[i]) multiplicado por contadorDFT. Para el coseno es similar, hay que sumar al producto pasos[i] * contadorDFT el desfase necesario para
		convertir el seno en un coseno. Sabemos que cos(x) = sen(x + pi/2). Este desfase se traduce como un desfase de la cuarta parte de
		NUM_MUESTRAS_PERIODO_10HZ, que son 100 muestras.
		Después, si hemos hecho todas las interrupciones necesarias (contadorDFT == n_dft), contadorDFT se reinicia a 0, realizamos el desescalado de
		los arrays del seno y del coseno, y en el array S_out[] guardamos para cada frecuencia el resultado que devuelva la función busquedaBinaria
		de sumaCoseno[k]^2 + sumaSeno[k]^2, es decir, el módulo de la DFT. El objetivo de busquedaBinaria es escalar dicho módulo.
	*/
	contadorDFT++;																	// Incrementamos contadorDFT
0002095e 		movel 00030118 <contadorDFT>,%d0
00020964 		movel %d0,%d2
00020966 		addql #1,%d2
00020968 		movel %d2,00030118 <contadorDFT>
	if (contadorDFT == 1) {																// Si contadorDFT es 1
0002096e 		tstl %d0
00020970 		bnes 0002099a <rutina_tout0+0xde>
}

//------------------------------------------------------------------------------
// INLINE LONG _strlen(char *st)
//
// Descripción: Calcula la longitud de una cadena de char terminada en 0
// Entrada:     char *st, puntero a la cadena de texto que medir (acabada en 0)
// Salida:      void
// Devuelve:    LONG, número de caracteres de la cadena (sin contar el 0 final)
//------------------------------------------------------------------------------
INLINE LONG _strlen(char *st)
{
  LONG len = 0;
  char *pt = st;
  while (*pt++) len++;
  return len;
}

//------------------------------------------------------------------------------
// INLINE LONG memcpy(char *st)
//
// Descripción: Inicializa una zona de memoria con un valor determinado
// Entrada:     char *dest, char *src fuente de la información, size_t tamaño a copiar
// Salida:      void 
// Devuelve:    void puntero a la zona de memoria
//------------------------------------------------------------------------------
INLINE void *memcpy(void *dst0, const void *src0, size_t n)
{
  char* dst = (char*) dst0;
  const char* src = (const char*) src0;
  while (n--) *dst++ = *src++;
  return dst0;
}

//------------------------------------------------------------------------------
// INLINE LONG memset(char *st)
//
// Descripción: Sets the first num bytes pointed by buffer to the value specified by c parameter.
// Entrada:     char *buffer, int c, size_t número de bytes
// Salida:      void 
// Devuelve:    void puntero a la zona de memoria
//------------------------------------------------------------------------------
INLINE void *memset(void *dst0, int c, size_t n)
{
00020972 		clrl %d1
  char* dst = (char*) dst0;
00020974 		lea 00030854 <__bss_start>,%a0
  while (n--) *dst++ = c;
0002097a 		moveq #29,%d0
0002097c 		moveb %d1,%a0@+
0002097e 		subql #1,%d0
00020980 		moveq #-1,%d3
00020982 		cmpl %d0,%d3
00020984 		bnes 0002097c <rutina_tout0+0xc0>
00020986 		clrl %d1
00020988 		lea 000308cc <sumaCoseno.119>,%a0
0002098e 		moveq #29,%d0
00020990 		moveb %d1,%a0@+
00020992 		subql #1,%d0
00020994 		moveq #-1,%d7
00020996 		cmpl %d0,%d7
00020998 		bnes 00020990 <rutina_tout0+0xd4>
	 	memset(sumaSeno, 0, MAX_FRECS);														//	Todas las posiciones de sumaSeno[i] se ponen a 0
	 	memset(sumaCoseno, 0, MAX_FRECS);													//	Todas las posiciones de sumaCoseno[i] se ponen a 0
	}
	for (i = 0; i < n_frecs; i++) {															// Para cada frecuencia
0002099a 		clrl 000309e6 <i>
000209a0 		moveal 00030128 <n_frecs>,%a1
000209a6 		tstl %a1
000209a8 		beqs 00020a1a <rutina_tout0+0x15e>
000209aa 		lea 00030854 <__bss_start>,%a4
000209b0 		lea 00030148 <pasos>,%a5
000209b6 		movel 00030118 <contadorDFT>,%d6
000209bc 		subql #1,%d6
000209be 		lea 000301c0 <sinusoide10Hz>,%a3
000209c4 		lea 000308cc <sumaCoseno.119>,%a2
000209ca 		subal %a0,%a0
		sumaSeno[i] += (dato * (sinusoide10Hz[(pasos[i] * (contadorDFT - 1))%NUM_MUESTRAS_PERIODO_10HZ]));					//	Rellenamos sumaSeno[i] con los valores correspondientes a cada frecuencia 
000209cc 		movel %a0,%d4
000209ce 		movel %a0,%d2
000209d0 		lsll #2,%d2
000209d2 		movel %d6,%d1
000209d4 		movel %a5@(00000000,%d2:l),%d0
000209d8 		mulsl %d0,%d1
000209dc 		movel %d1,%d0
000209de 		movel #400,%d7
000209e4 		divull %d7,%d3,%d0
000209e8 		movel %d5,%d0
000209ea 		movel %a3@(00000000,%d3:l:4),%d3
000209ee 		mulsl %d3,%d0
000209f2 		addl %d0,%a4@(00000000,%d2:l)
		sumaCoseno[i] += (dato * (sinusoide10Hz[((pasos[i] * (contadorDFT - 1)) + NUM_MUESTRAS_PERIODO_10HZ/4)%NUM_MUESTRAS_PERIODO_10HZ]));	//	Rellenamos sumaCoseno[i] con los valores correspondientes a cada frecuencia 
000209f6 		moveq #100,%d0
000209f8 		addl %d0,%d1
000209fa 		divull %d7,%d3,%d1
000209fe 		movel %d5,%d0
00020a00 		movel %a3@(00000000,%d3:l:4),%d3
00020a04 		mulsl %d3,%d0
00020a08 		addl %d0,%a2@(00000000,%d2:l)
00020a0c 		addql #1,%a0
00020a0e 		addql #1,%d4
00020a10 		cmpal %d4,%a1
00020a12 		bhis 000209cc <rutina_tout0+0x110>
00020a14 		movel %a0,000309e6 <i>
	}
	if (contadorDFT == n_dft) {															// Si hemos hecho todas las interrupciones necesarias
00020a1a 		movel 00030124 <n_dft>,%d1
00020a20 		cmpl 00030118 <contadorDFT>,%d1
00020a26 		bnew 00020b54 <rutina_tout0+0x298>
		contadorDFT = 0;															//	Reiniciamos contadorDFT
00020a2a 		clrl 00030118 <contadorDFT>
		for (j = 0; j < n_frecs; j++) {														//	Para cada frecuencia
00020a30 		clrl 0003094c <j>
00020a36 		movel 00030128 <n_frecs>,%d0
00020a3c 		beqw 00020b54 <rutina_tout0+0x298>
00020a40 		movel #198740,%d6
00020a46 		lea 000308cc <sumaCoseno.119>,%a5
00020a4c 		subal %a1,%a1
00020a4e 		movel 00030002 <umbrales.103>,%d2
00020a54 		movel %d2,%fp@(-4)
00020a58 		movel 00030082 <adapt_DAC.104>,%d3
00020a5e 		movel %d3,%fp@(-8)
00020a62 		movel 0003007a <umbrales.103+0x78>,%d7
00020a68 		movel %d7,%fp@(-12)
00020a6c 		moveal 000300fe <adapt_DAC.104+0x7c>,%a0
00020a72 		movel %a0,%fp@(-16)
00020a76 		movel 000309da <dft_lcd>,%d5
00020a7c 		moveal 000309f2 <frec_lcd>,%a2
00020a82 		movel %d0,%d7
			sumaSeno[j] >>= 10;														// 		Desescalado de 1024 (mover a la derecha 10 bits) para que no se produzcan desbordamientos
00020a84 		movel %a1,%d2
00020a86 		lsll #2,%d2
00020a88 		moveal %d6,%a0
00020a8a 		movel %a0@(00000000,%d2:l),%d1
00020a8e 		moveq #10,%d0
00020a90 		asrl %d0,%d1
00020a92 		movel %d1,%a0@(00000000,%d2:l)
			sumaCoseno[j] >>= 10;														// 		Desescalado de 1024 (mover a la derecha 10 bits) para que no se produzcan desbordamientos
00020a96 		movel %a5@(00000000,%d2:l),%d0
00020a9a 		moveq #10,%d3
00020a9c 		asrl %d3,%d0
00020a9e 		movel %d0,%a5@(00000000,%d2:l)
			S_out[j] = busquedaBinaria((sumaCoseno[j] * sumaCoseno[j]) + (sumaSeno[j] * sumaSeno[j]));					// 		Almacenamos en S_out[j] el módulo cuantificado de la DFT de cada frecuencia	
00020aa2 		mulsl %d0,%d0
00020aa6 		mulsl %d1,%d1
// Parámetros:
//   int numero
//     módulo de la DFT
//------------------------------------------------------
int busquedaBinaria(int numero) {
00020aaa 		addl %d0,%d1
	int contadorUmbrales;									// Contador que llegará hasta 5 y se reiniciará
	int izquierda = 0;									// Margen inferior de la búsqueda
00020aac 		clrl %d4
	int derecha = N_UMBRALES - 1;								// Margen superior de la búsqueda
00020aae 		moveq #31,%d3
	int centro = (izquierda + derecha)/2;							// Centro (la media de izquierda y derecha)
00020ab0 		moveq #15,%d0

	// Array con los distintos umbrales que puede alcanzar la señal 
	static int umbrales[N_UMBRALES] = {63095,84924,114304,153849,207075,278715,375140,504923,679607,914724,1231182,1657123,2230422,3002059,4040653,5438559,
					7320085,9852544,13261133,17848959,24023991,32335339,43522083,58578997,78845006,106122250,142836338,192252044,258763624,348285572,468778561,686492401};
	// Array con los valores cuantificados de la señal según su valor. umbrales[i] se escalará a adapt_DAC[i] 			
	static int adapt_DAC[N_UMBRALES] = {122,245,368,491,614,737,860,983,1105,1228,1351,1474,1597,1720,1843,1966,2088,2211,2334,2457,2580,2703,2826,2949,3072,3194,3317,3440,3563,3686,3809,3932};
   
	if (numero < umbrales[0]) return adapt_DAC[0];						// Si el número que recibe busquedaBinaria es menor que el mínimo valor de los umbrales, devuelve el valor mínimo de los valores de adapt_DAC
00020ab2 		cmpl %fp@(-4),%d1
00020ab6 		bges 00020ac4 <rutina_tout0+0x208>
00020ab8 		movel %fp@(-8),%d1
00020abc 		lea 00030958 <S_out>,%a4
00020ac2 		bras 00020b0a <rutina_tout0+0x24e>
	if (numero >	umbrales[N_UMBRALES - 2]) return adapt_DAC[N_UMBRALES - 1];		// Si el numero que recibe busquedaBinaria es mayor que el segundo máximo valor de los umbrales, devuelve el valor máximo de los valores de adapt_DAC
00020ac4 		cmpl %fp@(-12),%d1
00020ac8 		bles 00020ad6 <rutina_tout0+0x21a>
00020aca 		movel %fp@(-16),%d1
00020ace 		lea 00030958 <S_out>,%a4
00020ad4 		bras 00020b0a <rutina_tout0+0x24e>

	for (contadorUmbrales = 0; contadorUmbrales < 5; contadorUmbrales++) {			// El proceso de la búsqueda binaria dura 5 iteraciones
00020ad6 		lea 00030082 <adapt_DAC.104>,%a3
00020adc 		lea 00030958 <S_out>,%a4
00020ae2 		lea 00030002 <umbrales.103>,%a0
00020ae8 		moveq #4,%d2
		if (numero < umbrales[centro]) {						// Si el número que recibe busquedaBinaria es menor que el valor central del array umbrales[] 
00020aea 		cmpl %a0@(00000000,%d0:l:4),%d1
00020aee 		bges 00020af6 <rutina_tout0+0x23a>
			derecha = centro;							// El margen superior pasa a ser el valor previo de centro
00020af0 		movel %d0,%d3
			centro = (izquierda + derecha)/2;					// Recalculamos el nuevo valor de centro para el valor actualizado de derecha
00020af2 		movel %d4,%d0
		} else {									// Si el número que recibe busquedaBinaria es mayor que el valor central del array umbrales[]
00020af4 		bras 00020af8 <rutina_tout0+0x23c>
			izquierda = centro;							// El margen inferior pasa a ser el valor previo de centro
00020af6 		movel %d0,%d4
			centro = (izquierda + derecha)/2;					// Recalculamos el nuevo valor de centro para el valor actualizado de izquierda
00020af8 		addl %d3,%d0
00020afa 		movel %d0,%d0
00020afc 		bpls 00020b00 <rutina_tout0+0x244>
00020afe 		addql #1,%d0
00020b00 		asrl #1,%d0
00020b02 		subql #1,%d2
00020b04 		bpls 00020aea <rutina_tout0+0x22e>
		}		
	}
	contadorUmbrales = 0;									// Reseteamos contadorUmbrales
	return adapt_DAC[centro];								// Devolvemos el valor encontrado en el array de valores escalados para el valor que recibe la función busquedaBinaria
00020b06 		movel %a3@(00000000,%d0:l:4),%d1
00020b0a 		movel %a1,%d0
00020b0c 		lsll #2,%d0
00020b0e 		movel %d1,%a4@(00000000,%d0:l)
			if (j == 0) {
00020b12 		tstl %a1
00020b14 		bnes 00020b1c <rutina_tout0+0x260>
				dft_lcd = S_out[0];
00020b16 		movel %a4@,%d5
				frec_lcd = 0;
00020b18 		subal %a2,%a2
			}
			if (j >	0 && S_out[j] > dft_lcd) {
00020b1a 		bras 00020b36 <rutina_tout0+0x27a>
00020b1c 		cmpl %d1,%d5
00020b1e 		bccs 00020b36 <rutina_tout0+0x27a>
				dft_lcd = S_out[j];
00020b20 		movel %d1,%d5
				frec_lcd = 10 * pasos[j];
00020b22 		lea 00030148 <pasos>,%a0
00020b28 		movel %a0@(00000000,%d0:l),%d1
00020b2c 		movel %d1,%d0
00020b2e 		lsll #3,%d0
00020b30 		moveal %d0,%a0
00020b32 		lea %a0@(00000000,%d1:l:2),%a2
00020b36 		movel %a1,%d0
00020b38 		addql #1,%a1
00020b3a 		addql #1,%d0
00020b3c 		cmpl %d0,%d7
00020b3e 		bhiw 00020a84 <rutina_tout0+0x1c8>
00020b42 		movel %a2,000309f2 <frec_lcd>
00020b48 		movel %d5,000309da <dft_lcd>
00020b4e 		movel %a1,0003094c <j>
			}
		}
	}
	
	/*	Cada vez que contadorS_out sea igual a t_comp (8) reseteamos contadorS_out a 0, y si hemos sacado la última frecuencia (f=20), procedemos a volver
		a empezar, sacando la primera (f=1). Y cuando contadorS_our sea 0, sacamos por el DAC S_out[f], el cual se visualizará en el osciloscopio.
	*/
	if (contadorS_out == t_comp) {											// Si han transcurrido t_comp segundos
00020b54 		movel 00030138 <t_comp>,%d0
00020b5a 		cmpl 0003011c <contadorS_out>,%d0
00020b60 		bnes 00020b7c <rutina_tout0+0x2c0>
		contadorS_out = 0;											// 	Reseteamos contadorS_out
00020b62 		clrl 0003011c <contadorS_out>
		if (f == n_frecs) {											// 	Si hemos contado todas las frecuencias
00020b68 		movel 00030128 <n_frecs>,%d1
00020b6e 		cmpl 00030114 <f>,%d1
00020b74 		bnes 00020b7c <rutina_tout0+0x2c0>
			f = 0;												// 		Reset de f (índice de la componente de frecuencia a visualizar)
00020b76 		clrl 00030114 <f>
		}
	}
	if (contadorS_out == 0) {											// Si contadorS_out es 0
00020b7c 		tstl 0003011c <contadorS_out>
00020b82 		bnew 00020c06 <rutina_tout0+0x34a>
		DAC_dato(S_out[f]);											// 	Sacamos S_out[f] por el DAC 
00020b86 		movel 00030114 <f>,%d0
00020b8c 		lea 00030958 <S_out>,%a0
00020b92 		movel %a0@(00000000,%d0:l:4),%d1
00020b96 		tstb 00030000 <primeraVez.45>
00020b9c 		bnes 00020bb0 <rutina_tout0+0x2f4>
00020b9e 		moveal #268435628,%a0
00020ba4 		movew %a0@,%d0
00020ba6 		moveq #1,%d2
00020ba8 		andl %d2,%d0
00020baa 		tstw %d0
00020bac 		beqs 00020ba4 <rutina_tout0+0x2e8>
00020bae 		bras 00020bb8 <rutina_tout0+0x2fc>
00020bb0 		clrb %d3
00020bb2 		moveb %d3,00030000 <primeraVez.45>
00020bb8 		moveal #268435628,%a0
00020bbe 		movew %a0@,%d0
00020bc0 		moveq #1,%d7
00020bc2 		orl %d7,%d0
00020bc4 		movew %d0,%a0@
00020bc6 		lea %a0@(-12),%a0
00020bca 		movew #-32765,%a0@
00020bce 		andil #4095,%d1
00020bd4 		moveal #268435632,%a1
00020bda 		clrw %a1@
00020bdc 		lea %a0@(20),%a0
00020be0 		addl %d1,%d1
00020be2 		movew %d1,%a0@
00020be4 		movew #32,%a1@
00020be8 		movew #19712,%a0@
00020bec 		lea %a0@(-12),%a0
00020bf0 		movew #4096,%a0@
00020bf4 		subql #4,%a0
00020bf6 		movew %a0@,%d0
00020bf8 		oril #32768,%d0
00020bfe 		movew %d0,%a0@
		f++;													// 	Incrementamos f
00020c00 		addl %d7,00030114 <f>
	}
	contadorS_out++;												// Incrementamos contadorS_out++;
00020c06 		moveq #1,%d0
00020c08 		addl %d0,0003011c <contadorS_out>

	/*	Usamos set16_S para sacar un 1 cada t_barrido y así resetear la rampa 
		Cuando contadorReset sea 0, sacamos un 0 por una de las salidas digitales del ENT2004CF, y cuando contadorReset sea 160, sacamos un 1 por esa salida
		digital, y reseteamos contadorReset
	*/
	if (contadorReset == 0) {											// Si contadorReset es 0
00020c0e 		movel 00030120 <contadorReset>,%d1
00020c14 		bnes 00020c34 <rutina_tout0+0x378>
		salida = salida & 0xFFEF;										//	Realizamos un AND binario a salida para no interferir en el puerto. 
00020c16 		movew 00030112 <salida>,%d0
00020c1c 		andil #65519,%d0
00020c22 		movew %d0,00030112 <salida>
00020c28 		movew %d0,000309d4 <puertoS>
00020c2e 		movew %d0,40000000 <_end+0x3ffcf5ec>
		set16_puertoS(salida);											// 	Sacamos un 0 por la salida digital
	}
	contadorReset++;												// Incrementamos contadorReset
00020c34 		movel %d1,%d2
00020c36 		addql #1,%d2
00020c38 		movel %d2,00030120 <contadorReset>
	if (contadorReset == t_barrido) {										// Si ha pasado un tiempo t_barrido
00020c3e 		movel %d1,%d0
00020c40 		addql #1,%d0
00020c42 		cmpl 0003012c <t_barrido>,%d0
00020c48 		bnes 00020c6c <rutina_tout0+0x3b0>
	        salida = salida | 0x0010;										//	Realizamos un OR binario a salida para no interferir en el puerto
00020c4a 		movew 00030112 <salida>,%d0
00020c50 		moveq #16,%d3
00020c52 		orl %d3,%d0
00020c54 		movew %d0,00030112 <salida>
00020c5a 		movew %d0,000309d4 <puertoS>
00020c60 		movew %d0,40000000 <_end+0x3ffcf5ec>
		set16_puertoS(salida);											// 	Sacamos un 1 por la salida digital
		contadorReset = 0;											// 	Reseteamos contadorReset
00020c66 		clrl 00030120 <contadorReset>
	}
}
00020c6c 		moveml %sp@,%d2-%d7/%a2-%a5
00020c70 		lea %sp@(40),%sp
00020c74 		unlk %fp
00020c76 		rts

//------------------------------------------------------
// void rutina_int1(void)
//
// Descripción:
//   Función de atención a la interrupción para la
//   interrupción externa.
//------------------------------------------------------
void rutina_int1(void) {
00020c78 <rutina_int1>	linkw %fp,#0
00020c7c 		lea %sp@(-32),%sp
00020c80 		moveml %d2-%d5/%a2-%a5,%sp@
00020c84 		lea 0002434c <_etext+0x3a>,%a0
00020c8a 		lea %pc@(000205e0 <LCD_reset>),%a5
00020c8e 		lea %pc@(000204dc <LCD_init>),%a4
00020c92 		lea 000309f8 <array>,%a3
00020c98 		movel #148524,%d4
00020c9e 		tstl %a0
00020ca0 		beqs 00020cb2 <rutina_int1+0x3a>
00020ca2 		tstb %a0@
00020ca4 		beqs 00020cb2 <rutina_int1+0x3a>
00020ca6 		moveb %a0@+,%d2
00020ca8 		moveb %d2,%d1
00020caa 		moveq #19,%d0
00020cac 		trap #15
00020cae 		tstb %a0@
00020cb0 		bnes 00020ca6 <rutina_int1+0x2e>
	output("LCD activado\r\n\r\n");											// Imprime el mensaje de la interrupción
	LCD_reset();
00020cb2 		jsr %a5@
	LCD_init();
00020cb4 		jsr %a4@
	LCD_inst(CLR_DISP);												// Limpiamos display
00020cb6 		movew #256,%d1
00020cba 		movel #384,%d0
00020cc0 		movew %d0,000309d4 <puertoS>
00020cc6 		movew %d0,40000000 <_end+0x3ffcf5ec>
00020ccc 		movel #8248,%d0
00020cd2 		subql #1,%d0
00020cd4 		moveq #-1,%d2
00020cd6 		cmpl %d0,%d2
00020cd8 		bnes 00020cd2 <rutina_int1+0x5a>
00020cda 		movew %d1,000309d4 <puertoS>
00020ce0 		movew %d1,40000000 <_end+0x3ffcf5ec>
00020ce6 		movel #8248,%d0
00020cec 		subql #1,%d0
00020cee 		moveq #-1,%d5
00020cf0 		cmpl %d0,%d5
00020cf2 		bnes 00020cec <rutina_int1+0x74>
	LCD_inst(LIN_1LCD);												// Movemos el cursor a la 1ª línea
00020cf4 		movew #-32768,%d1
00020cf8 		movel #32896,%d0
00020cfe 		movew %d0,000309d4 <puertoS>
00020d04 		movew %d0,40000000 <_end+0x3ffcf5ec>
00020d0a 		movel #8248,%d0
00020d10 		subql #1,%d0
00020d12 		moveq #-1,%d2
00020d14 		cmpl %d0,%d2
00020d16 		bnes 00020d10 <rutina_int1+0x98>
00020d18 		movew %d1,000309d4 <puertoS>
00020d1e 		movew %d1,40000000 <_end+0x3ffcf5ec>
00020d24 		movel #8248,%d0
00020d2a 		subql #1,%d0
00020d2c 		moveq #-1,%d5
00020d2e 		cmpl %d0,%d5
00020d30 		bnes 00020d2a <rutina_int1+0xb2>
	frecuencia = "f[Hz]=";												// Mensaje de frecuencia para el LCD
00020d32 		lea 0002435d <_etext+0x4b>,%a0
00020d38 		movel %a0,00030948 <frecuencia>
	dft = "|H(jf)|=";												// Mensaje de DFT para el LCD
00020d3e 		movel #148324,%d0
00020d44 		movel %d0,00030954 <dft>
	
	frecuencia_ = numeroarray(frec_lcd);										// frec_lcd se convierte a char
00020d4a 		movel 000309f2 <frec_lcd>,%d3
// Parámetros:
//   int num
//------------------------------------------------------
char * numeroarray(int num) {
	if (num >	1000) {                                                                         
00020d50 		cmpil #1000,%d3
00020d56 		bles 00020d62 <rutina_int1+0xea>
		tam = 4;														// Si el número es mayor que 1000, el número de cifras es 4
00020d58 		moveq #4,%d1
00020d5a 		movel %d1,00030a04 <tam>
	} else if (num >	100) {
00020d60 		bras 00020db4 <rutina_int1+0x13c>
00020d62 		moveq #100,%d2
00020d64 		cmpl %d3,%d2
00020d66 		bges 00020d7a <rutina_int1+0x102>
		tam = 3;														// Si el número es mayor que 100, el número de cifras es 3
00020d68 		moveq #3,%d5
00020d6a 		movel %d5,00030a04 <tam>
		array[3] = ' ';													// Y la posición 3 del array que se devuelve es un espacio en blanco
00020d70 		moveq #32,%d0
00020d72 		moveb %d0,000309fb <array+0x3>
	} else if (num >	10) {
00020d78 		bras 00020db4 <rutina_int1+0x13c>
00020d7a 		moveq #10,%d1
00020d7c 		cmpl %d3,%d1
00020d7e 		bges 00020d98 <rutina_int1+0x120>
		tam = 2;														// Si el número es mayor que 10, el número de cifras es 2
00020d80 		moveq #2,%d2
00020d82 		movel %d2,00030a04 <tam>
		array[2] = ' ';													// Y la posición 2 del array que se devuelve es un espacio en blanco
00020d88 		moveq #32,%d5
00020d8a 		moveb %d5,000309fa <array+0x2>
		array[3] = ' ';													// Y la posición 3 del array que se devuelve es un espacio en blanco
00020d90 		moveb %d5,000309fb <array+0x3>
	} else {															// En el resto de casos:
00020d96 		bras 00020db4 <rutina_int1+0x13c>
		tam = 1;														// El número tendrá 1 cifra                                                                                         
00020d98 		moveq #1,%d0
00020d9a 		movel %d0,00030a04 <tam>
		array[1] = ' ';                                                 // Y las posiciones 1,2,3 del array serán espacios en blanco
00020da0 		moveq #32,%d1
00020da2 		moveb %d1,000309f9 <array+0x1>
		array[2] = ' ';
00020da8 		moveb %d1,000309fa <array+0x2>
		array[3] = ' ';
00020dae 		moveb %d1,000309fb <array+0x3>
	}
	p = tam - 1;														// Al número de cifras le restamos uno 
00020db4 		movel 00030a04 <tam>,%d2
00020dba 		subql #1,%d2
00020dbc 		movel %d2,00030944 <p>
	do {
		array[p] = num%10 + 48;											// En la posición 'p' introducimos el resto de dividir el número entre 10 y lo convertimos en un char
00020dc2 		movel 00030944 <p>,%d0
00020dc8 		movel %d3,%d2
00020dca 		moveq #10,%d5
00020dcc 		divsll %d5,%d1,%d2
00020dd0 		moveq #48,%d2
00020dd2 		addl %d2,%d1
00020dd4 		moveb %d1,%a3@(00000000,%d0:l)
		num = num * 0.1;												// Dividimos por 10
00020dd8 		movel %d3,%sp@-
00020dda 		jsr 000240f8 <__floatsidf>
00020de0 		addql #4,%sp
00020de2 		movel #-1717986918,%sp@-
00020de8 		movel #1069128089,%sp@-
00020dee 		movel %d1,%sp@-
00020df0 		movel %d0,%sp@-
00020df2 		jsr 00023198 <__muldf3>
00020df8 		lea %sp@(16),%sp
00020dfc 		movel %d1,%sp@-
00020dfe 		movel %d0,%sp@-
00020e00 		jsr 00024272 <__fixdfsi>
00020e06 		addql #8,%sp
00020e08 		movel %d0,%d3
		p--;															//Reducimos 'p' para pasar a una posición anterior del array
00020e0a 		moveq #-1,%d5
00020e0c 		addl %d5,00030944 <p>
	} while (num !=0);													// Mientras que num no sea 0
00020e12 		tstl %d3
00020e14 		bnes 00020dc2 <rutina_int1+0x14a>
00020e16 		movel %a3,000309de <frecuencia_>
	while(*frecuencia) {												// Imprime el mensaje frecuencia en el display
00020e1c 		moveal 00030948 <frecuencia>,%a0
00020e22 		tstb %a0@
00020e24 		beqs 00020e94 <rutina_int1+0x21c>
		LCD_dato(*frecuencia++); 										// carácter a carácter
00020e26 		moveal 00030948 <frecuencia>,%a0
00020e2c 		moveb %a0@,%d1
00020e2e 		extw %d1
00020e30 		moveq #1,%d0
00020e32 		addl %d0,00030948 <frecuencia>
00020e38 		movel %d1,%d0
00020e3a 		lsll #8,%d0
00020e3c 		movew %d0,%d1
00020e3e 		oril #192,%d0
00020e44 		movew %d0,000309d4 <puertoS>
00020e4a 		movew %d0,40000000 <_end+0x3ffcf5ec>
00020e50 		movel #8248,%d0
00020e56 		subql #1,%d0
00020e58 		moveq #-1,%d2
00020e5a 		cmpl %d0,%d2
00020e5c 		bnes 00020e56 <rutina_int1+0x1de>
00020e5e 		moveq #64,%d0
00020e60 		orl %d1,%d0
00020e62 		movew %d0,000309d4 <puertoS>
00020e68 		movew %d0,40000000 <_end+0x3ffcf5ec>
00020e6e 		movel #8248,%d0
00020e74 		subql #1,%d0
00020e76 		moveq #-1,%d5
00020e78 		cmpl %d0,%d5
00020e7a 		bnes 00020e74 <rutina_int1+0x1fc>
00020e7c 		movel #137498,%d0
00020e82 		moveal 00030948 <frecuencia>,%a0
00020e88 		subql #1,%d0
00020e8a 		moveq #-1,%d1
00020e8c 		cmpl %d0,%d1
00020e8e 		bnes 00020e88 <rutina_int1+0x210>
		retardo(RET_50MS);											// Imprime 1 caracter cada 50 milisegundos
	}
00020e90 		tstb %a0@
00020e92 		bnes 00020e26 <rutina_int1+0x1ae>
	while(*frecuencia_) {												// Imprime la frecuencia en el display
00020e94 		movel 000309de <frecuencia_>,%d0
00020e9a 		moveal %d0,%a0
00020e9c 		tstb %a0@
00020e9e 		beqs 00020f08 <rutina_int1+0x290>
		LCD_dato(*frecuencia_++); 										// carácter a carácter
00020ea0 		moveb %a0@,%d1
00020ea2 		extw %d1
00020ea4 		moveq #1,%d2
00020ea6 		addl %d2,000309de <frecuencia_>
00020eac 		movel %d1,%d0
00020eae 		lsll #8,%d0
00020eb0 		movew %d0,%d1
00020eb2 		oril #192,%d0
00020eb8 		movew %d0,000309d4 <puertoS>
00020ebe 		movew %d0,40000000 <_end+0x3ffcf5ec>
00020ec4 		movel #8248,%d0
00020eca 		subql #1,%d0
00020ecc 		moveq #-1,%d5
00020ece 		cmpl %d0,%d5
00020ed0 		bnes 00020eca <rutina_int1+0x252>
00020ed2 		moveq #64,%d0
00020ed4 		orl %d1,%d0
00020ed6 		movew %d0,000309d4 <puertoS>
00020edc 		movew %d0,40000000 <_end+0x3ffcf5ec>
00020ee2 		movel #8248,%d0
00020ee8 		subql #1,%d0
00020eea 		moveq #-1,%d1
00020eec 		cmpl %d0,%d1
00020eee 		bnes 00020ee8 <rutina_int1+0x270>
00020ef0 		movel #137498,%d0
00020ef6 		moveal 000309de <frecuencia_>,%a0
00020efc 		subql #1,%d0
00020efe 		moveq #-1,%d2
00020f00 		cmpl %d0,%d2
00020f02 		bnes 00020efc <rutina_int1+0x284>
		retardo(RET_50MS);											// Imprime 1 caracter cada 50 milisegundos
	}
00020f04 		tstb %a0@
00020f06 		bnes 00020ea0 <rutina_int1+0x228>
	
	LCD_inst(LIN_2LCD);												// Movemos el cursor a la 2ª línea
00020f08 		movew #-16384,%d1
00020f0c 		movel #49280,%d0
00020f12 		movew %d0,000309d4 <puertoS>
00020f18 		movew %d0,40000000 <_end+0x3ffcf5ec>
00020f1e 		movel #8248,%d0
00020f24 		subql #1,%d0
00020f26 		moveq #-1,%d5
00020f28 		cmpl %d0,%d5
00020f2a 		bnes 00020f24 <rutina_int1+0x2ac>
00020f2c 		movew %d1,000309d4 <puertoS>
00020f32 		movew %d1,40000000 <_end+0x3ffcf5ec>
00020f38 		movel #8248,%d0
00020f3e 		subql #1,%d0
00020f40 		moveq #-1,%d1
00020f42 		cmpl %d0,%d1
00020f44 		bnes 00020f3e <rutina_int1+0x2c6>
	dft_ = numeroarray(dft_lcd);											// dft_lcd se convierte a char
00020f46 		movel 000309da <dft_lcd>,%d3
00020f4c 		cmpil #1000,%d3
00020f52 		bles 00020f5e <rutina_int1+0x2e6>
00020f54 		moveq #4,%d2
00020f56 		movel %d2,00030a04 <tam>
00020f5c 		bras 00020fb0 <rutina_int1+0x338>
00020f5e 		moveq #100,%d5
00020f60 		cmpl %d3,%d5
00020f62 		bges 00020f76 <rutina_int1+0x2fe>
00020f64 		moveq #3,%d0
00020f66 		movel %d0,00030a04 <tam>
00020f6c 		moveq #32,%d1
00020f6e 		moveb %d1,000309fb <array+0x3>
00020f74 		bras 00020fb0 <rutina_int1+0x338>
00020f76 		moveq #10,%d2
00020f78 		cmpl %d3,%d2
00020f7a 		bges 00020f94 <rutina_int1+0x31c>
00020f7c 		moveq #2,%d5
00020f7e 		movel %d5,00030a04 <tam>
00020f84 		moveq #32,%d0
00020f86 		moveb %d0,000309fa <array+0x2>
00020f8c 		moveb %d0,000309fb <array+0x3>
00020f92 		bras 00020fb0 <rutina_int1+0x338>
00020f94 		moveq #1,%d1
00020f96 		movel %d1,00030a04 <tam>
00020f9c 		moveq #32,%d2
00020f9e 		moveb %d2,000309f9 <array+0x1>
00020fa4 		moveb %d2,000309fa <array+0x2>
00020faa 		moveb %d2,000309fb <array+0x3>
00020fb0 		movel 00030a04 <tam>,%d5
00020fb6 		subql #1,%d5
00020fb8 		movel %d5,00030944 <p>
00020fbe 		movel 00030944 <p>,%d0
00020fc4 		movel %d3,%d2
00020fc6 		moveq #10,%d5
00020fc8 		divsll %d5,%d1,%d2
00020fcc 		moveq #48,%d2
00020fce 		addl %d2,%d1
00020fd0 		moveb %d1,%a3@(00000000,%d0:l)
00020fd4 		movel %d3,%sp@-
00020fd6 		jsr 000240f8 <__floatsidf>
00020fdc 		addql #4,%sp
00020fde 		movel #-1717986918,%sp@-
00020fe4 		movel #1069128089,%sp@-
00020fea 		movel %d1,%sp@-
00020fec 		movel %d0,%sp@-
00020fee 		jsr 00023198 <__muldf3>
00020ff4 		lea %sp@(16),%sp
00020ff8 		movel %d1,%sp@-
00020ffa 		movel %d0,%sp@-
00020ffc 		jsr 00024272 <__fixdfsi>
00021002 		addql #8,%sp
00021004 		movel %d0,%d3
00021006 		moveq #-1,%d5
00021008 		addl %d5,00030944 <p>
0002100e 		tstl %d3
00021010 		bnes 00020fbe <rutina_int1+0x346>
00021012 		movel %a3,000309fc <dft_>
	while(*dft) {													// Imprime el mensaje módulo de la dft en el display
00021018 		moveal 00030954 <dft>,%a0
0002101e 		tstb %a0@
00021020 		beqs 00021090 <rutina_int1+0x418>
		LCD_dato(*dft++); 											// carácter a carácter
00021022 		moveal 00030954 <dft>,%a0
00021028 		moveb %a0@,%d1
0002102a 		extw %d1
0002102c 		moveq #1,%d0
0002102e 		addl %d0,00030954 <dft>
00021034 		movel %d1,%d0
00021036 		lsll #8,%d0
00021038 		movew %d0,%d1
0002103a 		oril #192,%d0
00021040 		movew %d0,000309d4 <puertoS>
00021046 		movew %d0,40000000 <_end+0x3ffcf5ec>
0002104c 		movel #8248,%d0
00021052 		subql #1,%d0
00021054 		moveq #-1,%d2
00021056 		cmpl %d0,%d2
00021058 		bnes 00021052 <rutina_int1+0x3da>
0002105a 		moveq #64,%d0
0002105c 		orl %d1,%d0
0002105e 		movew %d0,000309d4 <puertoS>
00021064 		movew %d0,40000000 <_end+0x3ffcf5ec>
0002106a 		movel #8248,%d0
00021070 		subql #1,%d0
00021072 		moveq #-1,%d5
00021074 		cmpl %d0,%d5
00021076 		bnes 00021070 <rutina_int1+0x3f8>
00021078 		movel #137498,%d0
0002107e 		moveal 00030954 <dft>,%a0
00021084 		subql #1,%d0
00021086 		moveq #-1,%d1
00021088 		cmpl %d0,%d1
0002108a 		bnes 00021084 <rutina_int1+0x40c>
		retardo(RET_50MS);											// Imprime 1 caracter cada 50 milisegundos
	}
0002108c 		tstb %a0@
0002108e 		bnes 00021022 <rutina_int1+0x3aa>
	while(*dft_) {													// Imprime el módulo de la dft en el display
00021090 		movel 000309fc <dft_>,%d0
00021096 		moveal %d0,%a0
00021098 		tstb %a0@
0002109a 		beqs 00021104 <rutina_int1+0x48c>
		LCD_dato(*dft_++); 											// carácter a carácter
0002109c 		moveb %a0@,%d1
0002109e 		extw %d1
000210a0 		moveq #1,%d2
000210a2 		addl %d2,000309fc <dft_>
000210a8 		movel %d1,%d0
000210aa 		lsll #8,%d0
000210ac 		movew %d0,%d1
000210ae 		oril #192,%d0
000210b4 		movew %d0,000309d4 <puertoS>
000210ba 		movew %d0,40000000 <_end+0x3ffcf5ec>
000210c0 		movel #8248,%d0
000210c6 		subql #1,%d0
000210c8 		moveq #-1,%d5
000210ca 		cmpl %d0,%d5
000210cc 		bnes 000210c6 <rutina_int1+0x44e>
000210ce 		moveq #64,%d0
000210d0 		orl %d1,%d0
000210d2 		movew %d0,000309d4 <puertoS>
000210d8 		movew %d0,40000000 <_end+0x3ffcf5ec>
000210de 		movel #8248,%d0
000210e4 		subql #1,%d0
000210e6 		moveq #-1,%d1
000210e8 		cmpl %d0,%d1
000210ea 		bnes 000210e4 <rutina_int1+0x46c>
000210ec 		movel #137498,%d0
000210f2 		moveal 000309fc <dft_>,%a0
000210f8 		subql #1,%d0
000210fa 		moveq #-1,%d2
000210fc 		cmpl %d0,%d2
000210fe 		bnes 000210f8 <rutina_int1+0x480>
		retardo(RET_50MS);											// Imprime 1 caracter cada 50 milisegundos
	}
00021100 		tstb %a0@
00021102 		bnes 0002109c <rutina_int1+0x424>
	
	if (scroll >	0) {															// Si ya hay valores previos almacenados
00021104 		tstl 00030144 <scroll>
0002110a 		beqw 000215de <rutina_int1+0x966>
0002110e 		lea 0002436d <_etext+0x5b>,%a0
00021114 		lea 000243ae <_etext+0x9c>,%a1
0002111a 		lea %pc@(0002064e <teclado>),%a2
0002111e 		tstl %a0
00021120 		beqs 00021132 <rutina_int1+0x4ba>
00021122 		tstb %a0@
00021124 		beqs 00021132 <rutina_int1+0x4ba>
00021126 		moveb %a0@+,%d2
00021128 		moveb %d2,%d1
0002112a 		moveq #19,%d0
0002112c 		trap #15
0002112e 		tstb %a0@
00021130 		bnes 00021126 <rutina_int1+0x4ae>
00021132 		tstl %a1
00021134 		beqs 00021148 <rutina_int1+0x4d0>
00021136 		tstb %a1@
00021138 		beqs 00021148 <rutina_int1+0x4d0>
0002113a 		moveal %a1,%a0
0002113c 		moveb %a0@+,%d2
0002113e 		moveb %d2,%d1
00021140 		moveq #19,%d0
00021142 		trap #15
00021144 		tstb %a0@
00021146 		bnes 0002113c <rutina_int1+0x4c4>
		output("¿Desea mostrar los valores de frecuencia y DFT previos a este?\r\n");
		output("	Pulse 1 si quiere mostrarlos, y pulse cualquier otra tecla si no quiere\r\n");
		switch (teclado()) {
00021148 		jsr %a2@
0002114a 		extbl %d0
0002114c 		moveq #49,%d5
0002114e 		cmpl %d0,%d5
00021150 		bnew 000215c4 <rutina_int1+0x94c>
00021154 		lea 000243f9 <_etext+0xe7>,%a0
0002115a 		tstl %a0
0002115c 		beqs 0002116e <rutina_int1+0x4f6>
0002115e 		tstb %a0@
00021160 		beqs 0002116e <rutina_int1+0x4f6>
00021162 		moveb %a0@+,%d2
00021164 		moveb %d2,%d1
00021166 		moveq #19,%d0
00021168 		trap #15
0002116a 		tstb %a0@
0002116c 		bnes 00021162 <rutina_int1+0x4ea>
			case '1':
				output("	Se muestran los datos anteriores almacenados\r\n\r\n");
				LCD_reset();
0002116e 		jsr %a5@
				LCD_init();
00021170 		jsr %a4@
				LCD_inst(CLR_DISP);												// 	Limpiamos display
00021172 		movew #256,%d1
00021176 		movel #384,%d0
0002117c 		movew %d0,000309d4 <puertoS>
00021182 		movew %d0,40000000 <_end+0x3ffcf5ec>
00021188 		movel #8248,%d0
0002118e 		subql #1,%d0
00021190 		moveq #-1,%d2
00021192 		cmpl %d0,%d2
00021194 		bnes 0002118e <rutina_int1+0x516>
00021196 		movew %d1,000309d4 <puertoS>
0002119c 		movew %d1,40000000 <_end+0x3ffcf5ec>
000211a2 		movel #8248,%d0
000211a8 		subql #1,%d0
000211aa 		moveq #-1,%d5
000211ac 		cmpl %d0,%d5
000211ae 		bnes 000211a8 <rutina_int1+0x530>
				LCD_inst(LIN_1LCD);												//	Movemos el cursor a la 1ª línea
000211b0 		movew #-32768,%d1
000211b4 		movel #32896,%d0
000211ba 		movew %d0,000309d4 <puertoS>
000211c0 		movew %d0,40000000 <_end+0x3ffcf5ec>
000211c6 		movel #8248,%d0
000211cc 		subql #1,%d0
000211ce 		moveq #-1,%d2
000211d0 		cmpl %d0,%d2
000211d2 		bnes 000211cc <rutina_int1+0x554>
000211d4 		movew %d1,000309d4 <puertoS>
000211da 		movew %d1,40000000 <_end+0x3ffcf5ec>
000211e0 		movel #8248,%d0
000211e6 		subql #1,%d0
000211e8 		moveq #-1,%d5
000211ea 		cmpl %d0,%d5
000211ec 		bnes 000211e6 <rutina_int1+0x56e>
				frecuencia = "f[Hz]=";												// Mensaje de frecuencia para el LCD
000211ee 		lea 0002435d <_etext+0x4b>,%a0
000211f4 		movel %a0,00030948 <frecuencia>
				dft = "|H(jf)|=";												// Mensaje de DFT para el LCD
000211fa 		movel #148324,%d0
00021200 		movel %d0,00030954 <dft>

					
				frecuencia_a = numeroarray(frecuencia_int);
00021206 		movel 000309e2 <frecuencia_int>,%d3
0002120c 		cmpil #1000,%d3
00021212 		bles 0002121e <rutina_int1+0x5a6>
00021214 		moveq #4,%d1
00021216 		movel %d1,00030a04 <tam>
0002121c 		bras 00021270 <rutina_int1+0x5f8>
0002121e 		moveq #100,%d2
00021220 		cmpl %d3,%d2
00021222 		bges 00021236 <rutina_int1+0x5be>
00021224 		moveq #3,%d5
00021226 		movel %d5,00030a04 <tam>
0002122c 		moveq #32,%d0
0002122e 		moveb %d0,000309fb <array+0x3>
00021234 		bras 00021270 <rutina_int1+0x5f8>
00021236 		moveq #10,%d1
00021238 		cmpl %d3,%d1
0002123a 		bges 00021254 <rutina_int1+0x5dc>
0002123c 		moveq #2,%d2
0002123e 		movel %d2,00030a04 <tam>
00021244 		moveq #32,%d5
00021246 		moveb %d5,000309fa <array+0x2>
0002124c 		moveb %d5,000309fb <array+0x3>
00021252 		bras 00021270 <rutina_int1+0x5f8>
00021254 		moveq #1,%d0
00021256 		movel %d0,00030a04 <tam>
0002125c 		moveq #32,%d1
0002125e 		moveb %d1,000309f9 <array+0x1>
00021264 		moveb %d1,000309fa <array+0x2>
0002126a 		moveb %d1,000309fb <array+0x3>
00021270 		movel 00030a04 <tam>,%d2
00021276 		subql #1,%d2
00021278 		movel %d2,00030944 <p>
0002127e 		movel 00030944 <p>,%d0
00021284 		movel %d3,%d2
00021286 		moveq #10,%d5
00021288 		divsll %d5,%d1,%d2
0002128c 		moveq #48,%d2
0002128e 		addl %d2,%d1
00021290 		moveb %d1,%a3@(00000000,%d0:l)
00021294 		movel %d3,%sp@-
00021296 		jsr 000240f8 <__floatsidf>
0002129c 		addql #4,%sp
0002129e 		movel #-1717986918,%sp@-
000212a4 		movel #1069128089,%sp@-
000212aa 		movel %d1,%sp@-
000212ac 		movel %d0,%sp@-
000212ae 		jsr 00023198 <__muldf3>
000212b4 		lea %sp@(16),%sp
000212b8 		movel %d1,%sp@-
000212ba 		movel %d0,%sp@-
000212bc 		jsr 00024272 <__fixdfsi>
000212c2 		addql #8,%sp
000212c4 		movel %d0,%d3
000212c6 		moveq #-1,%d5
000212c8 		addl %d5,00030944 <p>
000212ce 		tstl %d3
000212d0 		bnes 0002127e <rutina_int1+0x606>
000212d2 		movel %a3,00030a00 <frecuencia_a>
				while(*frecuencia) {												//	Imprime el mensaje frecuencia en el display
000212d8 		moveal 00030948 <frecuencia>,%a0
000212de 		tstb %a0@
000212e0 		beqs 00021350 <rutina_int1+0x6d8>
					LCD_dato(*frecuencia++); 										//	carácter a carácter
000212e2 		moveal 00030948 <frecuencia>,%a0
000212e8 		moveb %a0@,%d1
000212ea 		extw %d1
000212ec 		moveq #1,%d0
000212ee 		addl %d0,00030948 <frecuencia>
000212f4 		movel %d1,%d0
000212f6 		lsll #8,%d0
000212f8 		movew %d0,%d1
000212fa 		oril #192,%d0
00021300 		movew %d0,000309d4 <puertoS>
00021306 		movew %d0,40000000 <_end+0x3ffcf5ec>
0002130c 		movel #8248,%d0
00021312 		subql #1,%d0
00021314 		moveq #-1,%d2
00021316 		cmpl %d0,%d2
00021318 		bnes 00021312 <rutina_int1+0x69a>
0002131a 		moveq #64,%d0
0002131c 		orl %d1,%d0
0002131e 		movew %d0,000309d4 <puertoS>
00021324 		movew %d0,40000000 <_end+0x3ffcf5ec>
0002132a 		movel #8248,%d0
00021330 		subql #1,%d0
00021332 		moveq #-1,%d5
00021334 		cmpl %d0,%d5
00021336 		bnes 00021330 <rutina_int1+0x6b8>
00021338 		movel #137498,%d0
0002133e 		moveal 00030948 <frecuencia>,%a0
00021344 		subql #1,%d0
00021346 		moveq #-1,%d1
00021348 		cmpl %d0,%d1
0002134a 		bnes 00021344 <rutina_int1+0x6cc>
					retardo(RET_50MS);											//	Imprime 1 caracter cada 50 milisegundos
				}
0002134c 		tstb %a0@
0002134e 		bnes 000212e2 <rutina_int1+0x66a>
				while(*frecuencia_a) {												//	Imprime la frecuencia en el display
00021350 		movel 00030a00 <frecuencia_a>,%d0
00021356 		moveal %d0,%a0
00021358 		tstb %a0@
0002135a 		beqs 000213c4 <rutina_int1+0x74c>
					LCD_dato(*frecuencia_a++);	 									// 	carácter a carácter
0002135c 		moveb %a0@,%d1
0002135e 		extw %d1
00021360 		moveq #1,%d2
00021362 		addl %d2,00030a00 <frecuencia_a>
00021368 		movel %d1,%d0
0002136a 		lsll #8,%d0
0002136c 		movew %d0,%d1
0002136e 		oril #192,%d0
00021374 		movew %d0,000309d4 <puertoS>
0002137a 		movew %d0,40000000 <_end+0x3ffcf5ec>
00021380 		movel #8248,%d0
00021386 		subql #1,%d0
00021388 		moveq #-1,%d5
0002138a 		cmpl %d0,%d5
0002138c 		bnes 00021386 <rutina_int1+0x70e>
0002138e 		moveq #64,%d0
00021390 		orl %d1,%d0
00021392 		movew %d0,000309d4 <puertoS>
00021398 		movew %d0,40000000 <_end+0x3ffcf5ec>
0002139e 		movel #8248,%d0
000213a4 		subql #1,%d0
000213a6 		moveq #-1,%d1
000213a8 		cmpl %d0,%d1
000213aa 		bnes 000213a4 <rutina_int1+0x72c>
000213ac 		movel #137498,%d0
000213b2 		moveal 00030a00 <frecuencia_a>,%a0
000213b8 		subql #1,%d0
000213ba 		moveq #-1,%d2
000213bc 		cmpl %d0,%d2
000213be 		bnes 000213b8 <rutina_int1+0x740>
					retardo(RET_50MS);											// 	Imprime 1 caracter cada 50 milisegundos
				}
000213c0 		tstb %a0@
000213c2 		bnes 0002135c <rutina_int1+0x6e4>
				
				LCD_inst(LIN_2LCD);												//	Movemos el cursor a la 2ª línea
000213c4 		movew #-16384,%d1
000213c8 		movel #49280,%d0
000213ce 		movew %d0,000309d4 <puertoS>
000213d4 		movew %d0,40000000 <_end+0x3ffcf5ec>
000213da 		movel #8248,%d0
000213e0 		subql #1,%d0
000213e2 		moveq #-1,%d5
000213e4 		cmpl %d0,%d5
000213e6 		bnes 000213e0 <rutina_int1+0x768>
000213e8 		movew %d1,000309d4 <puertoS>
000213ee 		movew %d1,40000000 <_end+0x3ffcf5ec>
000213f4 		movel #8248,%d0
000213fa 		subql #1,%d0
000213fc 		moveq #-1,%d1
000213fe 		cmpl %d0,%d1
00021400 		bnes 000213fa <rutina_int1+0x782>
				dft_a = numeroarray(dft_int);
00021402 		movel 000309ea <dft_int>,%d3
00021408 		cmpil #1000,%d3
0002140e 		bles 0002141a <rutina_int1+0x7a2>
00021410 		moveq #4,%d2
00021412 		movel %d2,00030a04 <tam>
00021418 		bras 0002146c <rutina_int1+0x7f4>
0002141a 		moveq #100,%d5
0002141c 		cmpl %d3,%d5
0002141e 		bges 00021432 <rutina_int1+0x7ba>
00021420 		moveq #3,%d0
00021422 		movel %d0,00030a04 <tam>
00021428 		moveq #32,%d1
0002142a 		moveb %d1,000309fb <array+0x3>
00021430 		bras 0002146c <rutina_int1+0x7f4>
00021432 		moveq #10,%d2
00021434 		cmpl %d3,%d2
00021436 		bges 00021450 <rutina_int1+0x7d8>
00021438 		moveq #2,%d5
0002143a 		movel %d5,00030a04 <tam>
00021440 		moveq #32,%d0
00021442 		moveb %d0,000309fa <array+0x2>
00021448 		moveb %d0,000309fb <array+0x3>
0002144e 		bras 0002146c <rutina_int1+0x7f4>
00021450 		moveq #1,%d1
00021452 		movel %d1,00030a04 <tam>
00021458 		moveq #32,%d2
0002145a 		moveb %d2,000309f9 <array+0x1>
00021460 		moveb %d2,000309fa <array+0x2>
00021466 		moveb %d2,000309fb <array+0x3>
0002146c 		movel 00030a04 <tam>,%d5
00021472 		subql #1,%d5
00021474 		movel %d5,00030944 <p>
0002147a 		movel 00030944 <p>,%d0
00021480 		movel %d3,%d2
00021482 		moveq #10,%d5
00021484 		divsll %d5,%d1,%d2
00021488 		moveq #48,%d2
0002148a 		addl %d2,%d1
0002148c 		moveb %d1,%a3@(00000000,%d0:l)
00021490 		movel %d3,%sp@-
00021492 		jsr 000240f8 <__floatsidf>
00021498 		addql #4,%sp
0002149a 		movel #-1717986918,%sp@-
000214a0 		movel #1069128089,%sp@-
000214a6 		movel %d1,%sp@-
000214a8 		movel %d0,%sp@-
000214aa 		jsr 00023198 <__muldf3>
000214b0 		lea %sp@(16),%sp
000214b4 		movel %d1,%sp@-
000214b6 		movel %d0,%sp@-
000214b8 		jsr 00024272 <__fixdfsi>
000214be 		addql #8,%sp
000214c0 		movel %d0,%d3
000214c2 		moveq #-1,%d5
000214c4 		addl %d5,00030944 <p>
000214ca 		tstl %d3
000214cc 		bnes 0002147a <rutina_int1+0x802>
000214ce 		movel %a3,00030950 <dft_a>
				while(*dft) {													//	Imprime el mensaje módulo de la dft en el display
000214d4 		moveal 00030954 <dft>,%a0
000214da 		tstb %a0@
000214dc 		beqs 0002154c <rutina_int1+0x8d4>
					LCD_dato(*dft++); 											//	carácter a carácter
000214de 		moveal 00030954 <dft>,%a0
000214e4 		moveb %a0@,%d1
000214e6 		extw %d1
000214e8 		moveq #1,%d0
000214ea 		addl %d0,00030954 <dft>
000214f0 		movel %d1,%d0
000214f2 		lsll #8,%d0
000214f4 		movew %d0,%d1
000214f6 		oril #192,%d0
000214fc 		movew %d0,000309d4 <puertoS>
00021502 		movew %d0,40000000 <_end+0x3ffcf5ec>
00021508 		movel #8248,%d0
0002150e 		subql #1,%d0
00021510 		moveq #-1,%d2
00021512 		cmpl %d0,%d2
00021514 		bnes 0002150e <rutina_int1+0x896>
00021516 		moveq #64,%d0
00021518 		orl %d1,%d0
0002151a 		movew %d0,000309d4 <puertoS>
00021520 		movew %d0,40000000 <_end+0x3ffcf5ec>
00021526 		movel #8248,%d0
0002152c 		subql #1,%d0
0002152e 		moveq #-1,%d5
00021530 		cmpl %d0,%d5
00021532 		bnes 0002152c <rutina_int1+0x8b4>
00021534 		movel #137498,%d0
0002153a 		moveal 00030954 <dft>,%a0
00021540 		subql #1,%d0
00021542 		moveq #-1,%d1
00021544 		cmpl %d0,%d1
00021546 		bnes 00021540 <rutina_int1+0x8c8>
					retardo(RET_50MS);											//	Imprime 1 caracter cada 50 milisegundos
				}
00021548 		tstb %a0@
0002154a 		bnes 000214de <rutina_int1+0x866>
				while(*dft_a) {													//	Imprime el módulo de la dft en el display
0002154c 		movel 00030950 <dft_a>,%d0
00021552 		moveal %d0,%a0
00021554 		tstb %a0@
00021556 		beqw 000215de <rutina_int1+0x966>
					LCD_dato(*dft_a++); 											// 	carácter a carácter
0002155a 		moveb %a0@,%d1
0002155c 		extw %d1
0002155e 		moveq #1,%d2
00021560 		addl %d2,00030950 <dft_a>
00021566 		movel %d1,%d0
00021568 		lsll #8,%d0
0002156a 		movew %d0,%d1
0002156c 		oril #192,%d0
00021572 		movew %d0,000309d4 <puertoS>
00021578 		movew %d0,40000000 <_end+0x3ffcf5ec>
0002157e 		movel #8248,%d0
00021584 		subql #1,%d0
00021586 		moveq #-1,%d5
00021588 		cmpl %d0,%d5
0002158a 		bnes 00021584 <rutina_int1+0x90c>
0002158c 		moveq #64,%d0
0002158e 		orl %d1,%d0
00021590 		movew %d0,000309d4 <puertoS>
00021596 		movew %d0,40000000 <_end+0x3ffcf5ec>
0002159c 		movel #8248,%d0
000215a2 		subql #1,%d0
000215a4 		moveq #-1,%d1
000215a6 		cmpl %d0,%d1
000215a8 		bnes 000215a2 <rutina_int1+0x92a>
000215aa 		movel #137498,%d0
000215b0 		moveal 00030950 <dft_a>,%a0
000215b6 		subql #1,%d0
000215b8 		moveq #-1,%d2
000215ba 		cmpl %d0,%d2
000215bc 		bnes 000215b6 <rutina_int1+0x93e>
					retardo(RET_50MS);											//	Imprime 1 caracter cada 50 milisegundos
				}
000215be 		tstb %a0@
000215c0 		bnes 0002155a <rutina_int1+0x8e2>
				break;
000215c2 		bras 000215de <rutina_int1+0x966>
000215c4 		lea 0002442b <_etext+0x119>,%a0
000215ca 		tstl %a0
000215cc 		beqs 000215de <rutina_int1+0x966>
000215ce 		tstb %a0@
000215d0 		beqs 000215de <rutina_int1+0x966>
000215d2 		moveb %a0@+,%d2
000215d4 		moveb %d2,%d1
000215d6 		moveq #19,%d0
000215d8 		trap #15
000215da 		tstb %a0@
000215dc 		bnes 000215d2 <rutina_int1+0x95a>
			default:
				output("");
		}
	}
	
	frecuencia_int = frec_lcd;
000215de 		movel 000309f2 <frec_lcd>,%d5
000215e4 		movel %d5,000309e2 <frecuencia_int>
	dft_int = dft_lcd;
000215ea 		moveal 000309da <dft_lcd>,%a0
000215f0 		movel %a0,000309ea <dft_int>
	scroll++;													// Se incrementa scroll para poder ya almacenar valores anteriores
000215f6 		moveq #1,%d0
000215f8 		addl %d0,00030144 <scroll>
000215fe 		tstl %d4
00021600 		beqs 00021614 <rutina_int1+0x99c>
00021602 		moveal %d4,%a0
00021604 		tstb %a0@
00021606 		beqs 00021614 <rutina_int1+0x99c>
00021608 		moveb %a0@+,%d2
0002160a 		moveb %d2,%d1
0002160c 		moveq #19,%d0
0002160e 		trap #15
00021610 		tstb %a0@
00021612 		bnes 00021608 <rutina_int1+0x990>
	output("\r\nPulse F para acceder al menú\r\n\r\n");
	mbar_writeLong(MCFSIM_ICR1, 0xD888C888);									// Al ser interrupción externa debemos volverla a activar
00021614 		moveal #268435488,%a0
0002161a 		movel #-662124408,%a0@
}
00021620 		moveml %fp@(-32),%d2-%d5/%a2-%a5
00021626 		unlk %fp
00021628 		rts

//------------------------------------------------------
// void __init(void)
//
// Descripción:
//   Función por defecto de inicialización del sistema
//------------------------------------------------------
void __init(void) {
	mbar_writeByte(MCFSIM_PIVR,V_BASE);										// Fija comienzo de vectores de interrupción en V_BASE.

	ACCESO_A_MEMORIA_LONG(DIR_VTMR0)= (ULONG)_prep_TOUT0; 								// Escribimos la dirección de la función para TMR0
	ACCESO_A_MEMORIA_LONG(DIR_VINT1) = (ULONG) _prep_INT1;								// Escribimos la dirección de la función para INT1

	mbar_writeShort(MCFSIM_TMR0, (PRESCALADO-1)<<8|0x3D);								// TMR0: PS=1-1=0 CE=00 OM=1 ORI=1 FRR=1 CLK=10 RST=1
	mbar_writeShort(MCFSIM_TCN0, 0x0000);										// Ponemos a 0 el contador del TIMER0
	mbar_writeShort(MCFSIM_TRR0, CNT_INT1);										// Fijamos la cuenta final del contador
	
	mbar_writeLong(MCFSIM_PITR, mbar_readLong(MCFSIM_PITR) | 0x80000000);						// Configuramos INT1 para que se active con flanco de subida
	mbar_writeLong(MCFSIM_ICR1, 0xD888C888);									// Marca la interrupción  como no pendiente y de nivel 4
	
	DAC_ADC_init();													// Inicialización DAC_ADC
	LCD_reset();													// Reset del LCD
	LCD_init();													// Inicialización del display
	output("____________________\r\n\r\nCOMIENZA EL PROGRAMA\r\n____________________\r\n\r\n");			// Imprime el mensaje de comienzo del programa
	output("Pulse F para acceder al menú\r\n\r\n");									// Imprime el mensaje de como abrir el menú
	sti();														// Habilitamos interrupciones
}

//------------------------------------------------------
// void bucleMain(void)
//
// Descripción:
//   Función del programa principal
//------------------------------------------------------
void bucleMain(void) {
0002162a <bucleMain>	linkw %fp,#-32
0002162e 		lea %sp@(-40),%sp
00021632 		moveml %d2-%d7/%a2-%a5,%sp@
	if (teclado() == 'F') {																// Si pulsamos F salen las opciones del menú
00021636 		lea %pc@(0002064e <teclado>),%a2
0002163a 		jsr %a2@
0002163c 		extbl %d0
0002163e 		movel %a2,%d4
00021640 		moveq #70,%d1
00021642 		cmpl %d0,%d1
00021644 		bnew 000224f4 <bucleMain+0xeca>
00021648 		lea 000244b7 <_etext+0x1a5>,%a0
0002164e 		lea 000244e8 <_etext+0x1d6>,%a1
00021654 		lea 00024515 <_etext+0x203>,%a3
0002165a 		lea 00024542 <_etext+0x230>,%a2
00021660 		lea 0002457c <_etext+0x26a>,%a4
00021666 		lea 000245a9 <_etext+0x297>,%a5
0002166c 		movel #148971,%d3
00021672 		movel #148524,%d6
00021678 		tstl %a0
0002167a 		beqs 0002168c <bucleMain+0x62>
0002167c 		tstb %a0@
0002167e 		beqs 0002168c <bucleMain+0x62>
00021680 		moveb %a0@+,%d2
00021682 		moveb %d2,%d1
00021684 		moveq #19,%d0
00021686 		trap #15
00021688 		tstb %a0@
0002168a 		bnes 00021680 <bucleMain+0x56>
0002168c 		tstl %a1
0002168e 		beqs 000216a2 <bucleMain+0x78>
00021690 		tstb %a1@
00021692 		beqs 000216a2 <bucleMain+0x78>
00021694 		moveal %a1,%a0
00021696 		moveb %a0@+,%d2
00021698 		moveb %d2,%d1
0002169a 		moveq #19,%d0
0002169c 		trap #15
0002169e 		tstb %a0@
000216a0 		bnes 00021696 <bucleMain+0x6c>
000216a2 		tstl %a3
000216a4 		beqs 000216b8 <bucleMain+0x8e>
000216a6 		tstb %a3@
000216a8 		beqs 000216b8 <bucleMain+0x8e>
000216aa 		moveal %a3,%a0
000216ac 		moveb %a0@+,%d2
000216ae 		moveb %d2,%d1
000216b0 		moveq #19,%d0
000216b2 		trap #15
000216b4 		tstb %a0@
000216b6 		bnes 000216ac <bucleMain+0x82>
000216b8 		tstl %a2
000216ba 		beqs 000216ce <bucleMain+0xa4>
000216bc 		tstb %a2@
000216be 		beqs 000216ce <bucleMain+0xa4>
000216c0 		moveal %a2,%a0
000216c2 		moveb %a0@+,%d2
000216c4 		moveb %d2,%d1
000216c6 		moveq #19,%d0
000216c8 		trap #15
000216ca 		tstb %a0@
000216cc 		bnes 000216c2 <bucleMain+0x98>
000216ce 		tstl %a4
000216d0 		beqs 000216e4 <bucleMain+0xba>
000216d2 		tstb %a4@
000216d4 		beqs 000216e4 <bucleMain+0xba>
000216d6 		moveal %a4,%a0
000216d8 		moveb %a0@+,%d2
000216da 		moveb %d2,%d1
000216dc 		moveq #19,%d0
000216de 		trap #15
000216e0 		tstb %a0@
000216e2 		bnes 000216d8 <bucleMain+0xae>
000216e4 		tstl %a5
000216e6 		beqs 000216fa <bucleMain+0xd0>
000216e8 		tstb %a5@
000216ea 		beqs 000216fa <bucleMain+0xd0>
000216ec 		moveal %a5,%a0
000216ee 		moveb %a0@+,%d2
000216f0 		moveb %d2,%d1
000216f2 		moveq #19,%d0
000216f4 		trap #15
000216f6 		tstb %a0@
000216f8 		bnes 000216ee <bucleMain+0xc4>
000216fa 		tstl %d3
000216fc 		beqs 00021710 <bucleMain+0xe6>
000216fe 		moveal %d3,%a0
00021700 		tstb %a0@
00021702 		beqs 00021710 <bucleMain+0xe6>
00021704 		moveb %a0@+,%d2
00021706 		moveb %d2,%d1
00021708 		moveq #19,%d0
0002170a 		trap #15
0002170c 		tstb %a0@
0002170e 		bnes 00021704 <bucleMain+0xda>
		output("	Pulse 1 para cambiar el número de frecuencias\r\n");
		output("	Pulse 2 para cambiar la frecuencia mínima\r\n");
		output("	Pulse 3 para cambiar la frecuencia máxima\r\n");
		output("	Pulse 4 para cambiar el número de muestras para la DFT\r\n");
		output("	Pulse 5 para cambiar el tiempo de barrido\r\n");		
		output("	Pulse 6 para elegir el tipo de distribución de las frecuencias\r\n");
		output("	Pulse cualquier otro botón para salir\r\n\r\n");
		
		// Escribimos en el display la tecla pulsada
		switch (teclado()) {
00021710 		moveal %d4,%a1
00021712 		jsr %a1@
00021714 		moveq #-49,%d1
00021716 		addl %d1,%d0
00021718 		extbl %d0
0002171a 		moveq #5,%d2
0002171c 		cmpl %d0,%d2
0002171e 		bcsw 000224c4 <bucleMain+0xe9a>
00021722 		movew %pc@(0002172c <bucleMain+0x102>,%d0:l:2),%d0
00021726 		extl %d0
00021728 		jmp %pc@(0002172c <bucleMain+0x102>,%d0:l)
0002172c 		orib #-64,%a4
00021730 		addib #78,%d4
00021734 		btst %d4,%a2@(2670)
00021738 		lea 00024616 <_etext+0x304>,%a0
0002173e 		lea %pc@(0002070c <getCadTeclado>),%a1
00021742 		lea 000246c4 <_etext+0x3b2>,%a4
00021748 		movel %fp,%d5
0002174a 		subql #1,%d5
0002174c 		lea 000246de <_etext+0x3cc>,%a5
00021752 		tstl %a0
00021754 		beqs 00021766 <bucleMain+0x13c>
00021756 		tstb %a0@
00021758 		beqs 00021766 <bucleMain+0x13c>
0002175a 		moveb %a0@+,%d2
0002175c 		moveb %d2,%d1
0002175e 		moveq #19,%d0
00021760 		trap #15
00021762 		tstb %a0@
00021764 		bnes 0002175a <bucleMain+0x130>
			case '1':															// Si pulsamos 1
				output("		Introduzca número de frecuencias (máx: 30)\r\n");						//	Imprime mensaje
				n_frecs = getCadTeclado(cadena);											//	Lee una cadena del teclado y la asigna a n_frecs
00021766 		pea 00030a08 <cadena>
0002176c 		jsr %a1@
0002176e 		movel %d0,00030128 <n_frecs>
				if (n_frecs >	30) {													//	Limita el valor máximo
00021774 		addql #4,%sp
00021776 		moveq #30,%d3
00021778 		cmpl %d0,%d3
0002177a 		bccs 00021782 <bucleMain+0x158>
					n_frecs = 30;
0002177c 		movel %d3,00030128 <n_frecs>
				}
				t_comp = t_barrido/n_frecs;
00021782 		movel 00030128 <n_frecs>,%d1
00021788 		movel 0003012c <t_barrido>,%d2
0002178e 		divull %d1,%d2,%d2
00021792 		movel %d2,00030138 <t_comp>
				if (escala == 1) {
00021798 		moveal 00030140 <escala>,%a2
0002179e 		moveq #1,%d3
000217a0 		cmpl %a2,%d3
000217a2 		bnew 0002188a <bucleMain+0x260>
					salto = (0.1 * (f_max - f_min)/(n_frecs - 1));									// 	"salto" es la distancia entre frecuencias
000217a6 		movel 00030134 <f_max>,%d2
000217ac 		subl 00030130 <f_min>,%d2
000217b2 		movel %d2,%sp@-
000217b4 		jsr 000240f8 <__floatsidf>
000217ba 		addql #4,%sp
000217bc 		tstl %d2
000217be 		bges 000217d6 <bucleMain+0x1ac>
000217c0 		clrl %sp@-
000217c2 		movel #1106247680,%sp@-
000217c8 		movel %d1,%sp@-
000217ca 		movel %d0,%sp@-
000217cc 		jsr 00022d08 <__adddf3>
000217d2 		lea %sp@(16),%sp
000217d6 		movel #-1717986918,%sp@-
000217dc 		movel #1069128089,%sp@-
000217e2 		movel %d1,%sp@-
000217e4 		movel %d0,%sp@-
000217e6 		jsr 00023198 <__muldf3>
000217ec 		lea %sp@(16),%sp
000217f0 		movel %d0,%d3
000217f2 		movel %d1,%d4
000217f4 		movel 00030128 <n_frecs>,%d2
000217fa 		subql #1,%d2
000217fc 		movel %d2,%sp@-
000217fe 		jsr 000240f8 <__floatsidf>
00021804 		addql #4,%sp
00021806 		tstl %d2
00021808 		bges 00021820 <bucleMain+0x1f6>
0002180a 		clrl %sp@-
0002180c 		movel #1106247680,%sp@-
00021812 		movel %d1,%sp@-
00021814 		movel %d0,%sp@-
00021816 		jsr 00022d08 <__adddf3>
0002181c 		lea %sp@(16),%sp
00021820 		movel %d1,%sp@-
00021822 		movel %d0,%sp@-
00021824 		movel %d4,%sp@-
00021826 		movel %d3,%sp@-
00021828 		jsr 00023380 <__divdf3>
0002182e 		lea %sp@(16),%sp
00021832 		movel %d1,%sp@-
00021834 		movel %d0,%sp@-
00021836 		jsr 0002382c <__fixunsdfsi>
0002183c 		addql #8,%sp
0002183e 		movel %d0,0003013c <salto>
					for (k = 1; k < n_frecs - 1; k++) {										// 	Para cada frecuencia
00021844 		moveq #1,%d1
00021846 		movel %d1,000309d0 <k>
0002184c 		movel 00030128 <n_frecs>,%d1
00021852 		subql #1,%d1
00021854 		cmpl %a2,%d1
00021856 		blsw 00021a5c <bucleMain+0x432>
0002185a 		lea 00030148 <pasos>,%a0
00021860 		movel %d0,%d4
00021862 		movel %d1,%d2
						pasos[k] = (pasos[0] + k * salto);									// 		Rellenamos el array pasos con su valor correspondiente
00021864 		movel 000309d0 <k>,%d1
0002186a 		movel %d1,%d0
0002186c 		mulsl %d4,%d0
00021870 		addl %a0@,%d0
00021872 		movel %d0,%a0@(00000000,%d1:l:4)
00021876 		movel %d1,%d3
00021878 		addql #1,%d3
0002187a 		movel %d3,000309d0 <k>
00021880 		addql #1,%d1
00021882 		cmpl %d1,%d2
00021884 		bhis 00021864 <bucleMain+0x23a>
					}
				} else {
00021886 		braw 00021a5c <bucleMain+0x432>
					if (n_frecs < 7) {												// Si el número de frecuencias es superior a 7
0002188a 		lea 00030800 <logs>,%a2
00021890 		moveq #6,%d0
00021892 		cmpl %d1,%d0
00021894 		bcss 000218c8 <bucleMain+0x29e>
00021896 		lea 00024645 <_etext+0x333>,%a0
0002189c 		tstl %a0
0002189e 		beqs 000218b0 <bucleMain+0x286>
000218a0 		tstb %a0@
000218a2 		beqs 000218b0 <bucleMain+0x286>
000218a4 		moveb %a0@+,%d2
000218a6 		moveb %d2,%d1
000218a8 		moveq #19,%d0
000218aa 		trap #15
000218ac 		tstb %a0@
000218ae 		bnes 000218a4 <bucleMain+0x27a>
						output("			Para la distribución logarítmica, el mínimo número de frecuencias es de 7 frecuencias: n_frecs se fijará en 7 frecuencias\r\n");
						n_frecs = 7;												// Fija el número de frecuencias en 7
000218b0 		moveq #7,%d1
000218b2 		movel %d1,00030128 <n_frecs>
						t_comp = t_barrido/7;											//	Calcula el tiempo de componente
000218b8 		movel 0003012c <t_barrido>,%d2
000218be 		divull %d1,%d2,%d2
000218c2 		movel %d2,00030138 <t_comp>
					}
					// Actualización del array pasos
					pasoLogs = logs[n_frecs - 7];
000218c8 		movel 00030128 <n_frecs>,%d0
000218ce 		subql #7,%d0
000218d0 		movel %a2@(00000000,%d0:l:4),%d0
000218d4 		movel %d0,00030a10 <pasoLogs>
					pasos[0] = f_min * 0.1;
000218da 		movel 00030130 <f_min>,%d2
000218e0 		movel %d2,%sp@-
000218e2 		jsr 000240f8 <__floatsidf>
000218e8 		addql #4,%sp
000218ea 		tstl %d2
000218ec 		bges 00021904 <bucleMain+0x2da>
000218ee 		clrl %sp@-
000218f0 		movel #1106247680,%sp@-
000218f6 		movel %d1,%sp@-
000218f8 		movel %d0,%sp@-
000218fa 		jsr 00022d08 <__adddf3>
00021900 		lea %sp@(16),%sp
00021904 		moveal #1069128089,%a2
0002190a 		moveal #-1717986918,%a3
00021910 		movel %a3,%sp@-
00021912 		movel %a2,%sp@-
00021914 		movel %d1,%sp@-
00021916 		movel %d0,%sp@-
00021918 		jsr 00023198 <__muldf3>
0002191e 		lea %sp@(16),%sp
00021922 		movel %d1,%sp@-
00021924 		movel %d0,%sp@-
00021926 		jsr 00024272 <__fixdfsi>
0002192c 		addql #8,%sp
0002192e 		movel %d0,00030148 <pasos>
					pasos[n_frecs - 1] = f_max * 0.1;
00021934 		movel 00030128 <n_frecs>,%d4
0002193a 		subql #1,%d4
0002193c 		lsll #2,%d4
0002193e 		movel 00030134 <f_max>,%d2
00021944 		movel %d2,%sp@-
00021946 		jsr 000240f8 <__floatsidf>
0002194c 		addql #4,%sp
0002194e 		tstl %d2
00021950 		bges 00021968 <bucleMain+0x33e>
00021952 		clrl %sp@-
00021954 		movel #1106247680,%sp@-
0002195a 		movel %d1,%sp@-
0002195c 		movel %d0,%sp@-
0002195e 		jsr 00022d08 <__adddf3>
00021964 		lea %sp@(16),%sp
00021968 		movel %a3,%sp@-
0002196a 		movel %a2,%sp@-
0002196c 		movel %d1,%sp@-
0002196e 		movel %d0,%sp@-
00021970 		jsr 00023198 <__muldf3>
00021976 		lea %sp@(16),%sp
0002197a 		movel %d1,%sp@-
0002197c 		movel %d0,%sp@-
0002197e 		jsr 00024272 <__fixdfsi>
00021984 		addql #8,%sp
00021986 		lea 00030148 <pasos>,%a0
0002198c 		movel %d0,%a0@(00000000,%d4:l)
					for (i = 1; i < n_frecs; i++) {
00021990 		moveq #1,%d0
00021992 		movel %d0,000309e6 <i>
00021998 		cmpl 00030128 <n_frecs>,%d0
0002199e 		bccw 00021a5c <bucleMain+0x432>
000219a2 		moveal 00030130 <f_min>,%a2
000219a8 		lea 00023198 <__muldf3>,%a3
						pasos[i] = f_min * 0.1 * pasoLogs;
000219ae 		movel 000309e6 <i>,%d4
000219b4 		lsll #2,%d4
000219b6 		movel %a2,%sp@-
000219b8 		jsr 000240f8 <__floatsidf>
000219be 		addql #4,%sp
000219c0 		tstl %a2
000219c2 		bges 000219da <bucleMain+0x3b0>
000219c4 		clrl %sp@-
000219c6 		movel #1106247680,%sp@-
000219cc 		movel %d1,%sp@-
000219ce 		movel %d0,%sp@-
000219d0 		jsr 00022d08 <__adddf3>
000219d6 		lea %sp@(16),%sp
000219da 		movel #-1717986918,%sp@-
000219e0 		movel #1069128089,%sp@-
000219e6 		movel %d1,%sp@-
000219e8 		movel %d0,%sp@-
000219ea 		jsr %a3@
000219ec 		lea %sp@(16),%sp
000219f0 		movel %d0,%d2
000219f2 		movel %d1,%d3
000219f4 		movel 00030a10 <pasoLogs>,%d1
000219fa 		movel %d1,%sp@-
000219fc 		jsr 00024198 <__extendsfdf2>
00021a02 		addql #4,%sp
00021a04 		movel %d1,%sp@-
00021a06 		movel %d0,%sp@-
00021a08 		movel %d3,%sp@-
00021a0a 		movel %d2,%sp@-
00021a0c 		jsr %a3@
00021a0e 		lea %sp@(16),%sp
00021a12 		movel %d1,%sp@-
00021a14 		movel %d0,%sp@-
00021a16 		jsr 00024272 <__fixdfsi>
00021a1c 		addql #8,%sp
00021a1e 		lea 00030148 <pasos>,%a0
00021a24 		movel %d0,%a0@(00000000,%d4:l)
						pasoLogs *= pasoLogs;
00021a28 		movel 00030a10 <pasoLogs>,%d0
00021a2e 		movel %d0,%sp@-
00021a30 		movel %d0,%sp@-
00021a32 		jsr 00023bc8 <__mulsf3>
00021a38 		addql #8,%sp
00021a3a 		movel %d0,00030a10 <pasoLogs>
00021a40 		movel 000309e6 <i>,%d0
00021a46 		moveal %d0,%a1
00021a48 		addql #1,%a1
00021a4a 		movel %a1,000309e6 <i>
00021a50 		addql #1,%d0
00021a52 		cmpl 00030128 <n_frecs>,%d0
00021a58 		bcsw 000219ae <bucleMain+0x384>
00021a5c 		movel 00030128 <n_frecs>,%d4
00021a62 		tstl %a4
00021a64 		beqs 00021a78 <bucleMain+0x44e>
00021a66 		tstb %a4@
00021a68 		beqs 00021a78 <bucleMain+0x44e>
00021a6a 		moveal %a4,%a0
00021a6c 		moveb %a0@+,%d2
00021a6e 		moveb %d2,%d1
00021a70 		moveq #19,%d0
00021a72 		trap #15
00021a74 		tstb %a0@
00021a76 		bnes 00021a6c <bucleMain+0x442>
00021a78 		tstl %d4
00021a7a 		bges 00021a8a <bucleMain+0x460>
00021a7c 		moveq #45,%d2
00021a7e 		moveb %d2,%d1
00021a80 		moveq #19,%d0
00021a82 		trap #15
00021a84 		movel %d4,%d2
00021a86 		negl %d2
00021a88 		bras 00021a8c <bucleMain+0x462>
00021a8a 		movel %d4,%d2
00021a8c 		moveal %d5,%a0
00021a8e 		clrb %d0
00021a90 		moveb %d0,%fp@(-1)
00021a94 		moveq #2,%d4
00021a96 		andl %d0,%d4
00021a98 		tstb %d4
00021a9a 		beqs 00021aac <bucleMain+0x482>
00021a9c 		movel %d2,%d1
00021a9e 		moveq #10,%d3
00021aa0 		divull %d3,%d0,%d1
00021aa4 		lea 00024323 <_etext+0x11>,%a1
00021aaa 		bras 00021aba <bucleMain+0x490>
00021aac 		movel %d2,%d1
00021aae 		moveq #10,%d3
00021ab0 		divull %d3,%d0,%d1
00021ab4 		lea 00024312 <_etext>,%a1
00021aba 		moveb %a1@(00000000,%d0:l),%a0@-
00021abe 		moveq #10,%d1
00021ac0 		divull %d1,%d2,%d2
00021ac4 		bnes 00021a98 <bucleMain+0x46e>
00021ac6 		movel %a0,%sp@-
00021ac8 		jsr 000225d8 <output>
00021ace 		tstl %a5
00021ad0 		beqw 000224de <bucleMain+0xeb4>
00021ad4 		tstb %a5@
00021ad6 		beqw 000224de <bucleMain+0xeb4>
00021ada 		moveal %a5,%a0
00021adc 		moveb %a0@+,%d2
00021ade 		moveb %d2,%d1
00021ae0 		moveq #19,%d0
00021ae2 		trap #15
00021ae4 		tstb %a0@
00021ae6 		bnes 00021adc <bucleMain+0x4b2>
					}
				}
				output("		Número de frecuencias: ");
				outNum(10,n_frecs,0);													//	Imprime el número de frecuencias
				output(" frecuencias\r\n\r\n");												//	Retorno de carro y salto de línea
				break;
00021ae8 		braw 000224de <bucleMain+0xeb4>
00021aec 		lea 000246ef <_etext+0x3dd>,%a0
00021af2 		lea %pc@(0002070c <getCadTeclado>),%a1
00021af6 		movel #145452,%d7
00021afc 		movel %fp,%d5
00021afe 		subql #1,%d5
00021b00 		lea 0002472e <_etext+0x41c>,%a2
00021b06 		lea 00024744 <_etext+0x432>,%a5
00021b0c 		tstl %a0
00021b0e 		beqs 00021b20 <bucleMain+0x4f6>
00021b10 		tstb %a0@
00021b12 		beqs 00021b20 <bucleMain+0x4f6>
00021b14 		moveb %a0@+,%d2
00021b16 		moveb %d2,%d1
00021b18 		moveq #19,%d0
00021b1a 		trap #15
00021b1c 		tstb %a0@
00021b1e 		bnes 00021b14 <bucleMain+0x4ea>
			case '2':															// Si pulsamos 2
				output("		Introduzca la frecuencia mínima (mín: 50 Hz, máx: 1971 Hz)\r\n");				//	Imprime mensaje
				f_min = getCadTeclado(cadena);												//	Lee una cadena del teclado y la asigna a f_min
00021b20 		pea 00030a08 <cadena>
00021b26 		jsr %a1@
00021b28 		movel %d0,00030130 <f_min>
				if (f_min >	1971) {													//	Limita el valor máximo
00021b2e 		addql #4,%sp
00021b30 		cmpil #1971,%d0
00021b36 		blss 00021b46 <bucleMain+0x51c>
					f_min = 1971;
00021b38 		movel #1971,%d2
00021b3e 		movel %d2,00030130 <f_min>
				} else if (f_min < 50) {												//	Limita el valor mínimo
00021b44 		bras 00021b54 <bucleMain+0x52a>
00021b46 		moveq #49,%d3
00021b48 		cmpl %d0,%d3
00021b4a 		bcss 00021b54 <bucleMain+0x52a>
					f_min = 50;
00021b4c 		moveq #50,%d0
00021b4e 		movel %d0,00030130 <f_min>
				}
				if (f_max < f_min + n_frecs) {												//	Limita diferencia entre f_min y f_max
00021b54 		movel 00030128 <n_frecs>,%d2
00021b5a 		movel 00030130 <f_min>,%d0
00021b60 		addl %d2,%d0
00021b62 		movel 00030134 <f_max>,%d1
00021b68 		cmpl %d1,%d0
00021b6a 		blss 00021b74 <bucleMain+0x54a>
					f_min = f_max - n_frecs;
00021b6c 		subl %d2,%d1
00021b6e 		movel %d1,00030130 <f_min>
				}
				pasos[0] = f_min * 0.1;													// 	La primera posición de pasos[] es la frecuencia mínima entre 10
00021b74 		movel 00030130 <f_min>,%d2
00021b7a 		movel %d2,%sp@-
00021b7c 		jsr 000240f8 <__floatsidf>
00021b82 		addql #4,%sp
00021b84 		tstl %d2
00021b86 		bges 00021b9e <bucleMain+0x574>
00021b88 		clrl %sp@-
00021b8a 		movel #1106247680,%sp@-
00021b90 		movel %d1,%sp@-
00021b92 		movel %d0,%sp@-
00021b94 		jsr 00022d08 <__adddf3>
00021b9a 		lea %sp@(16),%sp
00021b9e 		movel #1069128089,%d3
00021ba4 		movel #-1717986918,%d4
00021baa 		movel %d4,%sp@-
00021bac 		movel %d3,%sp@-
00021bae 		movel %d1,%sp@-
00021bb0 		movel %d0,%sp@-
00021bb2 		jsr 00023198 <__muldf3>
00021bb8 		lea %sp@(16),%sp
00021bbc 		movel %d1,%sp@-
00021bbe 		movel %d0,%sp@-
00021bc0 		jsr 00024272 <__fixdfsi>
00021bc6 		addql #8,%sp
00021bc8 		movel %d0,00030148 <pasos>
				salto = (0.1 * (f_max - f_min)/(n_frecs - 1));										// 	"salto" es la distancia entre frecuencias
00021bce 		movel 00030134 <f_max>,%d2
00021bd4 		subl 00030130 <f_min>,%d2
00021bda 		movel %d2,%sp@-
00021bdc 		jsr 000240f8 <__floatsidf>
00021be2 		addql #4,%sp
00021be4 		tstl %d2
00021be6 		bges 00021bfe <bucleMain+0x5d4>
00021be8 		clrl %sp@-
00021bea 		movel #1106247680,%sp@-
00021bf0 		movel %d1,%sp@-
00021bf2 		movel %d0,%sp@-
00021bf4 		jsr 00022d08 <__adddf3>
00021bfa 		lea %sp@(16),%sp
00021bfe 		movel %d4,%sp@-
00021c00 		movel %d3,%sp@-
00021c02 		movel %d1,%sp@-
00021c04 		movel %d0,%sp@-
00021c06 		jsr 00023198 <__muldf3>
00021c0c 		lea %sp@(16),%sp
00021c10 		movel %d0,%d3
00021c12 		movel %d1,%d4
00021c14 		movel 00030128 <n_frecs>,%d2
00021c1a 		subql #1,%d2
00021c1c 		movel %d2,%sp@-
00021c1e 		jsr 000240f8 <__floatsidf>
00021c24 		addql #4,%sp
00021c26 		tstl %d2
00021c28 		bges 00021c40 <bucleMain+0x616>
00021c2a 		clrl %sp@-
00021c2c 		movel #1106247680,%sp@-
00021c32 		movel %d1,%sp@-
00021c34 		movel %d0,%sp@-
00021c36 		jsr 00022d08 <__adddf3>
00021c3c 		lea %sp@(16),%sp
00021c40 		movel %d1,%sp@-
00021c42 		movel %d0,%sp@-
00021c44 		movel %d4,%sp@-
00021c46 		movel %d3,%sp@-
00021c48 		jsr 00023380 <__divdf3>
00021c4e 		lea %sp@(16),%sp
00021c52 		movel %d1,%sp@-
00021c54 		movel %d0,%sp@-
00021c56 		moveal %d7,%a0
00021c58 		jsr %a0@
00021c5a 		addql #8,%sp
00021c5c 		movel %d0,0003013c <salto>
				for (k = 1; k < n_frecs - 1; k++) {											// 	Para cada frecuencia
00021c62 		moveq #1,%d1
00021c64 		movel %d1,000309d0 <k>
00021c6a 		movel 00030128 <n_frecs>,%d1
00021c70 		subql #1,%d1
00021c72 		moveq #1,%d2
00021c74 		cmpl %d1,%d2
00021c76 		bccs 00021c9e <bucleMain+0x674>
00021c78 		lea 00030148 <pasos>,%a0
00021c7e 		movel %d0,%d3
00021c80 		movel %d1,%d4
					pasos[k] = (pasos[0] + k * salto);										// 		Rellenamos el array pasos con su valor correspondiente
00021c82 		movel %d2,%d1
00021c84 		movel %d2,%d0
00021c86 		mulsl %d3,%d0
00021c8a 		addl %a0@,%d0
00021c8c 		movel %d0,%a0@(00000000,%d2:l:4)
00021c90 		addql #1,%d2
00021c92 		addql #1,%d1
00021c94 		cmpl %d1,%d4
00021c96 		bhis 00021c82 <bucleMain+0x658>
00021c98 		movel %d2,000309d0 <k>
00021c9e 		movel 00030130 <f_min>,%d4
00021ca4 		tstl %a2
00021ca6 		beqs 00021cba <bucleMain+0x690>
00021ca8 		tstb %a2@
00021caa 		beqs 00021cba <bucleMain+0x690>
00021cac 		moveal %a2,%a0
00021cae 		moveb %a0@+,%d2
00021cb0 		moveb %d2,%d1
00021cb2 		moveq #19,%d0
00021cb4 		trap #15
00021cb6 		tstb %a0@
00021cb8 		bnes 00021cae <bucleMain+0x684>
00021cba 		tstl %d4
00021cbc 		bges 00021ccc <bucleMain+0x6a2>
00021cbe 		moveq #45,%d2
00021cc0 		moveb %d2,%d1
00021cc2 		moveq #19,%d0
00021cc4 		trap #15
00021cc6 		movel %d4,%d2
00021cc8 		negl %d2
00021cca 		bras 00021cce <bucleMain+0x6a4>
00021ccc 		movel %d4,%d2
00021cce 		moveal %d5,%a0
00021cd0 		clrb %d3
00021cd2 		moveb %d3,%fp@(-1)
00021cd6 		clrb %d0
00021cd8 		moveq #2,%d4
00021cda 		andl %d0,%d4
00021cdc 		tstb %d4
00021cde 		beqs 00021cf0 <bucleMain+0x6c6>
00021ce0 		movel %d2,%d1
00021ce2 		moveq #10,%d3
00021ce4 		divull %d3,%d0,%d1
00021ce8 		lea 00024323 <_etext+0x11>,%a1
00021cee 		bras 00021cfe <bucleMain+0x6d4>
00021cf0 		movel %d2,%d1
00021cf2 		moveq #10,%d3
00021cf4 		divull %d3,%d0,%d1
00021cf8 		lea 00024312 <_etext>,%a1
00021cfe 		moveb %a1@(00000000,%d0:l),%a0@-
00021d02 		moveq #10,%d1
00021d04 		divull %d1,%d2,%d2
00021d08 		bnes 00021cdc <bucleMain+0x6b2>
00021d0a 		movel %a0,%sp@-
00021d0c 		jsr 000225d8 <output>
00021d12 		tstl %a5
00021d14 		beqw 000224de <bucleMain+0xeb4>
00021d18 		tstb %a5@
00021d1a 		beqw 000224de <bucleMain+0xeb4>
00021d1e 		moveal %a5,%a0
00021d20 		moveb %a0@+,%d2
00021d22 		moveb %d2,%d1
00021d24 		moveq #19,%d0
00021d26 		trap #15
00021d28 		tstb %a0@
00021d2a 		bnes 00021d20 <bucleMain+0x6f6>
				}
				output("		Frecuencia mínima: ");	
				outNum(10,f_min,0);													// 	Imprime el valor de la frecuencia mínima
				output(" Hz\r\n\r\n");													// 	Retorno de carro y salto de línea
				break;
00021d2c 		braw 000224de <bucleMain+0xeb4>
00021d30 		lea 0002474c <_etext+0x43a>,%a0
00021d36 		lea %pc@(0002070c <getCadTeclado>),%a1
00021d3a 		movel #145452,%d7
00021d40 		movel %fp,%d5
00021d42 		subql #1,%d5
00021d44 		lea 00024744 <_etext+0x432>,%a5
00021d4a 		lea 0002478b <_etext+0x479>,%a4
00021d50 		tstl %a0
00021d52 		beqs 00021d64 <bucleMain+0x73a>
00021d54 		tstb %a0@
00021d56 		beqs 00021d64 <bucleMain+0x73a>
00021d58 		moveb %a0@+,%d2
00021d5a 		moveb %d2,%d1
00021d5c 		moveq #19,%d0
00021d5e 		trap #15
00021d60 		tstb %a0@
00021d62 		bnes 00021d58 <bucleMain+0x72e>
			case '3':															// Si pulsamos 3
				output("		Introduzca la frecuencia máxima (mín: 79 Hz, máx: 2000 Hz)\r\n");				// 	Imprime mensaje
				f_max = getCadTeclado(cadena);												// 	Lee una cadena del teclado y la asigna a f_max
00021d64 		pea 00030a08 <cadena>
00021d6a 		jsr %a1@
00021d6c 		movel %d0,00030134 <f_max>
				if (f_max >	2000) {													//	Limita el valor máximo
00021d72 		addql #4,%sp
00021d74 		cmpil #2000,%d0
00021d7a 		blss 00021d8a <bucleMain+0x760>
					f_max = 2000;
00021d7c 		movel #2000,%d2
00021d82 		movel %d2,00030134 <f_max>
				} else if (f_max < 79) {												//	Limita el valor mínimo
00021d88 		bras 00021d98 <bucleMain+0x76e>
00021d8a 		moveq #78,%d3
00021d8c 		cmpl %d0,%d3
00021d8e 		bcss 00021d98 <bucleMain+0x76e>
					f_max = 79;
00021d90 		moveq #79,%d0
00021d92 		movel %d0,00030134 <f_max>
				}
				if (f_max < f_min + n_frecs) {												//	Limita diferencia entre f_min y f_max
00021d98 		movel 00030128 <n_frecs>,%d1
00021d9e 		movel 00030130 <f_min>,%d0
00021da4 		addl %d1,%d0
00021da6 		cmpl 00030134 <f_max>,%d0
00021dac 		blss 00021db4 <bucleMain+0x78a>
					f_max = f_min + n_frecs;
00021dae 		movel %d0,00030134 <f_max>
				}
				pasos[n_frecs - 1] = f_max * 0.1;											// 	La última posición de pasos[] es la frecuencia máxima entre 10
00021db4 		movel %d1,%d4
00021db6 		subql #1,%d4
00021db8 		lsll #2,%d4
00021dba 		movel 00030134 <f_max>,%d2
00021dc0 		movel %d2,%sp@-
00021dc2 		jsr 000240f8 <__floatsidf>
00021dc8 		addql #4,%sp
00021dca 		tstl %d2
00021dcc 		bges 00021de4 <bucleMain+0x7ba>
00021dce 		clrl %sp@-
00021dd0 		movel #1106247680,%sp@-
00021dd6 		movel %d1,%sp@-
00021dd8 		movel %d0,%sp@-
00021dda 		jsr 00022d08 <__adddf3>
00021de0 		lea %sp@(16),%sp
00021de4 		moveal #1069128089,%a2
00021dea 		moveal #-1717986918,%a3
00021df0 		movel %a3,%sp@-
00021df2 		movel %a2,%sp@-
00021df4 		movel %d1,%sp@-
00021df6 		movel %d0,%sp@-
00021df8 		jsr 00023198 <__muldf3>
00021dfe 		lea %sp@(16),%sp
00021e02 		movel %d1,%sp@-
00021e04 		movel %d0,%sp@-
00021e06 		jsr 00024272 <__fixdfsi>
00021e0c 		addql #8,%sp
00021e0e 		lea 00030148 <pasos>,%a0
00021e14 		movel %d0,%a0@(00000000,%d4:l)
				salto = (0.1 * (f_max - f_min)/(n_frecs - 1));										//	 "salto" es la distancia entre frecuencias
00021e18 		movel 00030134 <f_max>,%d2
00021e1e 		subl 00030130 <f_min>,%d2
00021e24 		movel %d2,%sp@-
00021e26 		jsr 000240f8 <__floatsidf>
00021e2c 		addql #4,%sp
00021e2e 		tstl %d2
00021e30 		bges 00021e48 <bucleMain+0x81e>
00021e32 		clrl %sp@-
00021e34 		movel #1106247680,%sp@-
00021e3a 		movel %d1,%sp@-
00021e3c 		movel %d0,%sp@-
00021e3e 		jsr 00022d08 <__adddf3>
00021e44 		lea %sp@(16),%sp
00021e48 		movel %a3,%sp@-
00021e4a 		movel %a2,%sp@-
00021e4c 		movel %d1,%sp@-
00021e4e 		movel %d0,%sp@-
00021e50 		jsr 00023198 <__muldf3>
00021e56 		lea %sp@(16),%sp
00021e5a 		movel %d0,%d3
00021e5c 		movel %d1,%d4
00021e5e 		movel 00030128 <n_frecs>,%d2
00021e64 		subql #1,%d2
00021e66 		movel %d2,%sp@-
00021e68 		jsr 000240f8 <__floatsidf>
00021e6e 		addql #4,%sp
00021e70 		tstl %d2
00021e72 		bges 00021e8a <bucleMain+0x860>
00021e74 		clrl %sp@-
00021e76 		movel #1106247680,%sp@-
00021e7c 		movel %d1,%sp@-
00021e7e 		movel %d0,%sp@-
00021e80 		jsr 00022d08 <__adddf3>
00021e86 		lea %sp@(16),%sp
00021e8a 		movel %d1,%sp@-
00021e8c 		movel %d0,%sp@-
00021e8e 		movel %d4,%sp@-
00021e90 		movel %d3,%sp@-
00021e92 		jsr 00023380 <__divdf3>
00021e98 		lea %sp@(16),%sp
00021e9c 		movel %d1,%sp@-
00021e9e 		movel %d0,%sp@-
00021ea0 		moveal %d7,%a1
00021ea2 		jsr %a1@
00021ea4 		addql #8,%sp
00021ea6 		movel %d0,0003013c <salto>
				for (k = 1; k < n_frecs - 1; k++) {											// 	Para cada frecuencia
00021eac 		moveq #1,%d1
00021eae 		movel %d1,000309d0 <k>
00021eb4 		movel 00030128 <n_frecs>,%d1
00021eba 		subql #1,%d1
00021ebc 		moveq #1,%d2
00021ebe 		cmpl %d1,%d2
00021ec0 		bccs 00021ee8 <bucleMain+0x8be>
00021ec2 		lea 00030148 <pasos>,%a0
00021ec8 		movel %d0,%d3
00021eca 		movel %d1,%d4
					pasos[k] = (pasos[0] + k * salto);										// 		Rellenamos el array pasos con su valor correspondiente
00021ecc 		movel %d2,%d1
00021ece 		movel %d2,%d0
00021ed0 		mulsl %d3,%d0
00021ed4 		addl %a0@,%d0
00021ed6 		movel %d0,%a0@(00000000,%d2:l:4)
00021eda 		addql #1,%d2
00021edc 		addql #1,%d1
00021ede 		cmpl %d1,%d4
00021ee0 		bhis 00021ecc <bucleMain+0x8a2>
00021ee2 		movel %d2,000309d0 <k>
00021ee8 		movel 00030134 <f_max>,%d4
00021eee 		tstl %a4
00021ef0 		beqs 00021f04 <bucleMain+0x8da>
00021ef2 		tstb %a4@
00021ef4 		beqs 00021f04 <bucleMain+0x8da>
00021ef6 		moveal %a4,%a0
00021ef8 		moveb %a0@+,%d2
00021efa 		moveb %d2,%d1
00021efc 		moveq #19,%d0
00021efe 		trap #15
00021f00 		tstb %a0@
00021f02 		bnes 00021ef8 <bucleMain+0x8ce>
00021f04 		tstl %d4
00021f06 		bges 00021f16 <bucleMain+0x8ec>
00021f08 		moveq #45,%d2
00021f0a 		moveb %d2,%d1
00021f0c 		moveq #19,%d0
00021f0e 		trap #15
00021f10 		movel %d4,%d2
00021f12 		negl %d2
00021f14 		bras 00021f18 <bucleMain+0x8ee>
00021f16 		movel %d4,%d2
00021f18 		moveal %d5,%a0
00021f1a 		clrb %d3
00021f1c 		moveb %d3,%fp@(-1)
00021f20 		clrb %d0
00021f22 		moveq #2,%d4
00021f24 		andl %d0,%d4
00021f26 		tstb %d4
00021f28 		beqs 00021f3a <bucleMain+0x910>
00021f2a 		movel %d2,%d1
00021f2c 		moveq #10,%d3
00021f2e 		divull %d3,%d0,%d1
00021f32 		lea 00024323 <_etext+0x11>,%a1
00021f38 		bras 00021f48 <bucleMain+0x91e>
00021f3a 		movel %d2,%d1
00021f3c 		moveq #10,%d3
00021f3e 		divull %d3,%d0,%d1
00021f42 		lea 00024312 <_etext>,%a1
00021f48 		moveb %a1@(00000000,%d0:l),%a0@-
00021f4c 		moveq #10,%d1
00021f4e 		divull %d1,%d2,%d2
00021f52 		bnes 00021f26 <bucleMain+0x8fc>
00021f54 		movel %a0,%sp@-
00021f56 		jsr 000225d8 <output>
00021f5c 		tstl %a5
00021f5e 		beqw 000224de <bucleMain+0xeb4>
00021f62 		tstb %a5@
00021f64 		beqw 000224de <bucleMain+0xeb4>
00021f68 		moveal %a5,%a0
00021f6a 		moveb %a0@+,%d2
00021f6c 		moveb %d2,%d1
00021f6e 		moveq #19,%d0
00021f70 		trap #15
00021f72 		tstb %a0@
00021f74 		bnes 00021f6a <bucleMain+0x940>
				}
				output("		Frecuencia máxima: ");	
				outNum(10,f_max,0);													// 	Imprime el valor de la frecuencia máxima
				output(" Hz\r\n\r\n");													// 	Retorno de carro y salto de línea
				break;			
00021f76 		braw 000224de <bucleMain+0xeb4>
00021f7a 		lea 000247a1 <_etext+0x48f>,%a0
00021f80 		lea %pc@(0002070c <getCadTeclado>),%a1
00021f84 		movel %fp,%d5
00021f86 		subql #1,%d5
00021f88 		lea 000247dc <_etext+0x4ca>,%a2
00021f8e 		lea 000247f3 <_etext+0x4e1>,%a3
00021f94 		tstl %a0
00021f96 		beqs 00021fa8 <bucleMain+0x97e>
00021f98 		tstb %a0@
00021f9a 		beqs 00021fa8 <bucleMain+0x97e>
00021f9c 		moveb %a0@+,%d2
00021f9e 		moveb %d2,%d1
00021fa0 		moveq #19,%d0
00021fa2 		trap #15
00021fa4 		tstb %a0@
00021fa6 		bnes 00021f9c <bucleMain+0x972>
			case '4':															// Si pulsamos 4
				output("		Introduzca el número de muestras para la DFT (máx: 80)\r\n");					// 	Imprime mensaje
				n_dft = getCadTeclado(cadena);												// 	Lee una cadena del teclado y la asigna a n_dft
00021fa8 		pea 00030a08 <cadena>
00021fae 		jsr %a1@
00021fb0 		movel %d0,00030124 <n_dft>
				if (n_dft >	80) {													//	Limita el valor máximo
00021fb6 		addql #4,%sp
00021fb8 		moveq #80,%d2
00021fba 		cmpl %d0,%d2
00021fbc 		bccs 00021fc4 <bucleMain+0x99a>
					n_dft = 80;
00021fbe 		movel %d2,00030124 <n_dft>
00021fc4 		movel 00030124 <n_dft>,%d4
00021fca 		tstl %a2
00021fcc 		beqs 00021fe0 <bucleMain+0x9b6>
00021fce 		tstb %a2@
00021fd0 		beqs 00021fe0 <bucleMain+0x9b6>
00021fd2 		moveal %a2,%a0
00021fd4 		moveb %a0@+,%d2
00021fd6 		moveb %d2,%d1
00021fd8 		moveq #19,%d0
00021fda 		trap #15
00021fdc 		tstb %a0@
00021fde 		bnes 00021fd4 <bucleMain+0x9aa>
00021fe0 		tstl %d4
00021fe2 		bges 00021ff2 <bucleMain+0x9c8>
00021fe4 		moveq #45,%d2
00021fe6 		moveb %d2,%d1
00021fe8 		moveq #19,%d0
00021fea 		trap #15
00021fec 		movel %d4,%d2
00021fee 		negl %d2
00021ff0 		bras 00021ff4 <bucleMain+0x9ca>
00021ff2 		movel %d4,%d2
00021ff4 		moveal %d5,%a0
00021ff6 		clrb %d3
00021ff8 		moveb %d3,%fp@(-1)
00021ffc 		clrb %d0
00021ffe 		moveq #2,%d4
00022000 		andl %d0,%d4
00022002 		tstb %d4
00022004 		beqs 00022016 <bucleMain+0x9ec>
00022006 		movel %d2,%d1
00022008 		moveq #10,%d3
0002200a 		divull %d3,%d0,%d1
0002200e 		lea 00024323 <_etext+0x11>,%a1
00022014 		bras 00022024 <bucleMain+0x9fa>
00022016 		movel %d2,%d1
00022018 		moveq #10,%d3
0002201a 		divull %d3,%d0,%d1
0002201e 		lea 00024312 <_etext>,%a1
00022024 		moveb %a1@(00000000,%d0:l),%a0@-
00022028 		moveq #10,%d1
0002202a 		divull %d1,%d2,%d2
0002202e 		bnes 00022002 <bucleMain+0x9d8>
00022030 		movel %a0,%sp@-
00022032 		jsr 000225d8 <output>
00022038 		tstl %a3
0002203a 		beqw 000224de <bucleMain+0xeb4>
0002203e 		tstb %a3@
00022040 		beqw 000224de <bucleMain+0xeb4>
00022044 		moveal %a3,%a0
00022046 		moveb %a0@+,%d2
00022048 		moveb %d2,%d1
0002204a 		moveq #19,%d0
0002204c 		trap #15
0002204e 		tstb %a0@
00022050 		bnes 00022046 <bucleMain+0xa1c>
				}
				output("		Número de muestras: ");
				outNum(10,n_dft,0);													// 	Imprime el número de muestras para la DFT
				output(" muestras\r\n\r\n");												// 	Retorno de carro y salto de línea
				break;
00022052 		braw 000224de <bucleMain+0xeb4>
00022056 		lea 00024801 <_etext+0x4ef>,%a0
0002205c 		lea %pc@(0002070c <getCadTeclado>),%a1
00022060 		movel %fp,%d5
00022062 		subql #1,%d5
00022064 		lea 00024832 <_etext+0x520>,%a2
0002206a 		lea 00024848 <_etext+0x536>,%a3
00022070 		tstl %a0
00022072 		beqs 00022084 <bucleMain+0xa5a>
00022074 		tstb %a0@
00022076 		beqs 00022084 <bucleMain+0xa5a>
00022078 		moveb %a0@+,%d2
0002207a 		moveb %d2,%d1
0002207c 		moveq #19,%d0
0002207e 		trap #15
00022080 		tstb %a0@
00022082 		bnes 00022078 <bucleMain+0xa4e>
			case '5':															// Si pulsamos 5
				output("		Introduzca el tiempo de barrido (máx: 40 ms)\r\n");						// 	Imprime mensaje
				t_barrido = 4 * getCadTeclado(cadena);											// 	Lee una cadena del teclado, multiplica el número obtenido de la cadena por 4 y la asigna a t_barrido
00022084 		pea 00030a08 <cadena>
0002208a 		jsr %a1@
0002208c 		lsll #2,%d0
0002208e 		movel %d0,0003012c <t_barrido>
				if (t_barrido >	160) {													//	Limita el valor máximo
00022094 		addql #4,%sp
00022096 		cmpil #160,%d0
0002209c 		blss 000220aa <bucleMain+0xa80>
					t_barrido = 160;
0002209e 		movel #160,%d2
000220a4 		movel %d2,0003012c <t_barrido>
				}
				t_comp = t_barrido/n_frecs;												//	Calcula el tiempo de componente
000220aa 		movel 0003012c <t_barrido>,%d3
000220b0 		movel 00030128 <n_frecs>,%d1
000220b6 		divull %d1,%d3,%d3
000220ba 		movel %d3,00030138 <t_comp>
000220c0 		tstl %a2
000220c2 		beqs 000220d6 <bucleMain+0xaac>
000220c4 		tstb %a2@
000220c6 		beqs 000220d6 <bucleMain+0xaac>
000220c8 		moveal %a2,%a0
000220ca 		moveb %a0@+,%d2
000220cc 		moveb %d2,%d1
000220ce 		moveq #19,%d0
000220d0 		trap #15
000220d2 		tstb %a0@
000220d4 		bnes 000220ca <bucleMain+0xaa0>
				output("		Tiempo de barrido: ");
				outNum(10,t_barrido * 0.25,0);												// 	Imprime el tiempo de barrido
000220d6 		movel 0003012c <t_barrido>,%d2
000220dc 		movel %d2,%sp@-
000220de 		jsr 000240f8 <__floatsidf>
000220e4 		addql #4,%sp
000220e6 		tstl %d2
000220e8 		bges 00022100 <bucleMain+0xad6>
000220ea 		clrl %sp@-
000220ec 		movel #1106247680,%sp@-
000220f2 		movel %d1,%sp@-
000220f4 		movel %d0,%sp@-
000220f6 		jsr 00022d08 <__adddf3>
000220fc 		lea %sp@(16),%sp
00022100 		clrl %sp@-
00022102 		movel #1070596096,%sp@-
00022108 		movel %d1,%sp@-
0002210a 		movel %d0,%sp@-
0002210c 		jsr 00023198 <__muldf3>
00022112 		lea %sp@(16),%sp
00022116 		movel %d1,%sp@-
00022118 		movel %d0,%sp@-
0002211a 		jsr 00024272 <__fixdfsi>
00022120 		addql #8,%sp
00022122 		moveal %d0,%a0
00022124 		tstl %a0
00022126 		bges 00022136 <bucleMain+0xb0c>
00022128 		moveq #45,%d2
0002212a 		moveb %d2,%d1
0002212c 		moveq #19,%d0
0002212e 		trap #15
00022130 		movel %a0,%d2
00022132 		negl %d2
00022134 		bras 00022138 <bucleMain+0xb0e>
00022136 		movel %a0,%d2
00022138 		moveal %d5,%a0
0002213a 		clrb %d3
0002213c 		moveb %d3,%fp@(-1)
00022140 		clrb %d0
00022142 		moveq #2,%d4
00022144 		andl %d0,%d4
00022146 		tstb %d4
00022148 		beqs 0002215a <bucleMain+0xb30>
0002214a 		movel %d2,%d1
0002214c 		moveq #10,%d3
0002214e 		divull %d3,%d0,%d1
00022152 		lea 00024323 <_etext+0x11>,%a1
00022158 		bras 00022168 <bucleMain+0xb3e>
0002215a 		movel %d2,%d1
0002215c 		moveq #10,%d3
0002215e 		divull %d3,%d0,%d1
00022162 		lea 00024312 <_etext>,%a1
00022168 		moveb %a1@(00000000,%d0:l),%a0@-
0002216c 		moveq #10,%d1
0002216e 		divull %d1,%d2,%d2
00022172 		bnes 00022146 <bucleMain+0xb1c>
00022174 		movel %a0,%sp@-
00022176 		jsr 000225d8 <output>
0002217c 		tstl %a3
0002217e 		beqw 000224de <bucleMain+0xeb4>
00022182 		tstb %a3@
00022184 		beqw 000224de <bucleMain+0xeb4>
00022188 		moveal %a3,%a0
0002218a 		moveb %a0@+,%d2
0002218c 		moveb %d2,%d1
0002218e 		moveq #19,%d0
00022190 		trap #15
00022192 		tstb %a0@
00022194 		bnes 0002218a <bucleMain+0xb60>
				output(" ms\r\n\r\n");													// 	Retorno de carro y salto de línea
				break;
00022196 		braw 000224de <bucleMain+0xeb4>
0002219a 		lea 00024850 <_etext+0x53e>,%a0
000221a0 		lea 00024964 <_etext+0x652>,%a5
000221a6 		tstl %a0
000221a8 		beqs 000221ba <bucleMain+0xb90>
000221aa 		tstb %a0@
000221ac 		beqs 000221ba <bucleMain+0xb90>
000221ae 		moveb %a0@+,%d2
000221b0 		moveb %d2,%d1
000221b2 		moveq #19,%d0
000221b4 		trap #15
000221b6 		tstb %a0@
000221b8 		bnes 000221ae <bucleMain+0xb84>
			case '6':															// Si pulsamos 6
				output("		Pulse 1 para distribución lineal\r\n		Pulse 2 para distribución logarítmica");	//	Imprime mensaje
				switch (teclado()) {
000221ba 		moveal %d4,%a0
000221bc 		jsr %a0@
000221be 		extbl %d0
000221c0 		moveq #49,%d1
000221c2 		cmpl %d0,%d1
000221c4 		beqs 000221d2 <bucleMain+0xba8>
000221c6 		moveq #50,%d2
000221c8 		cmpl %d0,%d2
000221ca 		beqw 000222f4 <bucleMain+0xcca>
000221ce 		braw 00022492 <bucleMain+0xe68>
000221d2 		lea 0002489c <_etext+0x58a>,%a0
000221d8 		movel #145452,%d7
000221de 		lea 000248a5 <_etext+0x593>,%a2
000221e4 		tstl %a0
000221e6 		beqs 000221f8 <bucleMain+0xbce>
000221e8 		tstb %a0@
000221ea 		beqs 000221f8 <bucleMain+0xbce>
000221ec 		moveb %a0@+,%d2
000221ee 		moveb %d2,%d1
000221f0 		moveq #19,%d0
000221f2 		trap #15
000221f4 		tstb %a0@
000221f6 		bnes 000221ec <bucleMain+0xbc2>
					case '1':													// 	Si pulsamos 1
						output("\r\n			1\r\n");	
						escala = 1;												//		Si escala es 1 es que estamos en distribución lineal
000221f8 		moveq #1,%d3
000221fa 		movel %d3,00030140 <escala>
						salto = (0.1 * (f_max - f_min)/(n_frecs - 1));								// 			"salto" es la distancia entre frecuencias
00022200 		movel 00030134 <f_max>,%d2
00022206 		subl 00030130 <f_min>,%d2
0002220c 		movel %d2,%sp@-
0002220e 		jsr 000240f8 <__floatsidf>
00022214 		addql #4,%sp
00022216 		tstl %d2
00022218 		bges 00022230 <bucleMain+0xc06>
0002221a 		clrl %sp@-
0002221c 		movel #1106247680,%sp@-
00022222 		movel %d1,%sp@-
00022224 		movel %d0,%sp@-
00022226 		jsr 00022d08 <__adddf3>
0002222c 		lea %sp@(16),%sp
00022230 		movel #-1717986918,%sp@-
00022236 		movel #1069128089,%sp@-
0002223c 		movel %d1,%sp@-
0002223e 		movel %d0,%sp@-
00022240 		jsr 00023198 <__muldf3>
00022246 		lea %sp@(16),%sp
0002224a 		movel %d0,%d3
0002224c 		movel %d1,%d4
0002224e 		movel 00030128 <n_frecs>,%d2
00022254 		subql #1,%d2
00022256 		movel %d2,%sp@-
00022258 		jsr 000240f8 <__floatsidf>
0002225e 		addql #4,%sp
00022260 		tstl %d2
00022262 		bges 0002227a <bucleMain+0xc50>
00022264 		clrl %sp@-
00022266 		movel #1106247680,%sp@-
0002226c 		movel %d1,%sp@-
0002226e 		movel %d0,%sp@-
00022270 		jsr 00022d08 <__adddf3>
00022276 		lea %sp@(16),%sp
0002227a 		movel %d1,%sp@-
0002227c 		movel %d0,%sp@-
0002227e 		movel %d4,%sp@-
00022280 		movel %d3,%sp@-
00022282 		jsr 00023380 <__divdf3>
00022288 		lea %sp@(16),%sp
0002228c 		movel %d1,%sp@-
0002228e 		movel %d0,%sp@-
00022290 		moveal %d7,%a0
00022292 		jsr %a0@
00022294 		movel %d0,0003013c <salto>
						for (k_lin = 1; k_lin < n_frecs - 1; k_lin++) {								// 			Para cada frecuencia
0002229a 		moveq #1,%d1
0002229c 		movel %d1,000309ee <k_lin>
000222a2 		movel 00030128 <n_frecs>,%d1
000222a8 		subql #1,%d1
000222aa 		moveq #1,%d2
000222ac 		cmpl %d1,%d2
000222ae 		bccs 000222d6 <bucleMain+0xcac>
000222b0 		lea 00030148 <pasos>,%a0
000222b6 		movel %d0,%d3
000222b8 		movel %d1,%d4
							pasos[k_lin] = (pasos[0] + k_lin * salto);							// 				Rellenamos el array pasos con su valor correspondiente
000222ba 		movel %d2,%d1
000222bc 		movel %d2,%d0
000222be 		mulsl %d3,%d0
000222c2 		addl %a0@,%d0
000222c4 		movel %d0,%a0@(00000000,%d2:l:4)
000222c8 		addql #1,%d2
000222ca 		addql #1,%d1
000222cc 		cmpl %d1,%d4
000222ce 		bhis 000222ba <bucleMain+0xc90>
000222d0 		movel %d2,000309ee <k_lin>
000222d6 		tstl %a2
000222d8 		beqw 000224ac <bucleMain+0xe82>
000222dc 		tstb %a2@
000222de 		beqw 000224ac <bucleMain+0xe82>
000222e2 		moveal %a2,%a0
000222e4 		moveb %a0@+,%d2
000222e6 		moveb %d2,%d1
000222e8 		moveq #19,%d0
000222ea 		trap #15
000222ec 		tstb %a0@
000222ee 		bnes 000222e4 <bucleMain+0xcba>
						}
						output("		Distribución de frecuencias: lineal");
						break;
000222f0 		braw 000224ac <bucleMain+0xe82>
000222f4 		lea 000248cb <_etext+0x5b9>,%a0
000222fa 		lea 00030800 <logs>,%a2
00022300 		lea 000248d4 <_etext+0x5c2>,%a1
00022306 		lea 00024939 <_etext+0x627>,%a4
0002230c 		tstl %a0
0002230e 		beqs 00022320 <bucleMain+0xcf6>
00022310 		tstb %a0@
00022312 		beqs 00022320 <bucleMain+0xcf6>
00022314 		moveb %a0@+,%d2
00022316 		moveb %d2,%d1
00022318 		moveq #19,%d0
0002231a 		trap #15
0002231c 		tstb %a0@
0002231e 		bnes 00022314 <bucleMain+0xcea>
					case '2':													// 	Si pulsamos 2
						output("\r\n			2\r\n");
						escala = 2;												//		Si escala es 2 es que estamos en distribución logarítmica
00022320 		moveq #2,%d3
00022322 		movel %d3,00030140 <escala>
						if (n_frecs < 7) {											// 			Si el número de frecuencias es menor que 7
00022328 		moveq #6,%d0
0002232a 		cmpl 00030128 <n_frecs>,%d0
00022330 		bcss 00022364 <bucleMain+0xd3a>
00022332 		lea 00024645 <_etext+0x333>,%a0
00022338 		tstl %a0
0002233a 		beqs 0002234c <bucleMain+0xd22>
0002233c 		tstb %a0@
0002233e 		beqs 0002234c <bucleMain+0xd22>
00022340 		moveb %a0@+,%d2
00022342 		moveb %d2,%d1
00022344 		moveq #19,%d0
00022346 		trap #15
00022348 		tstb %a0@
0002234a 		bnes 00022340 <bucleMain+0xd16>
							output("			Para la distribución logarítmica, el mínimo número de frecuencias es de 7 frecuencias: n_frecs se fijará en 7 frecuencias\r\n");
							n_frecs = 7;											// 				Fija el número de frecuencias a 7
0002234c 		moveq #7,%d1
0002234e 		movel %d1,00030128 <n_frecs>
							t_comp = t_barrido/7;										//				Calcula el tiempo de componente
00022354 		movel 0003012c <t_barrido>,%d2
0002235a 		divull %d1,%d2,%d2
0002235e 		movel %d2,00030138 <t_comp>
00022364 		tstl %a1
00022366 		beqs 0002237a <bucleMain+0xd50>
00022368 		tstb %a1@
0002236a 		beqs 0002237a <bucleMain+0xd50>
0002236c 		moveal %a1,%a0
0002236e 		moveb %a0@+,%d2
00022370 		moveb %d2,%d1
00022372 		moveq #19,%d0
00022374 		trap #15
00022376 		tstb %a0@
00022378 		bnes 0002236e <bucleMain+0xd44>
						}
						output("			Para la distribución logarítmica, la frecuencia mínima se fijará a 100 Hz y la máxima a 1900 Hz\r\n");
						// Actualización del array pasos
						f_min = 100;
0002237a 		moveq #100,%d3
0002237c 		movel %d3,00030130 <f_min>
						f_max = 1900;
00022382 		moveaw #1900,%a0
00022386 		movel %a0,00030134 <f_max>
						pasoLogs = logs[n_frecs - 7];
0002238c 		movel 00030128 <n_frecs>,%d0
00022392 		moveal %a2@(ffffffe4,%d0:l:4),%a2
00022396 		movel %a2,00030a10 <pasoLogs>
						pasos[0] = f_min * 0.1;
0002239c 		moveq #10,%d1
0002239e 		movel %d1,00030148 <pasos>
						pasos[n_frecs - 1] = f_max * 0.1;
000223a4 		moveaw #190,%a1
000223a8 		lea 00030148 <pasos>,%a0
000223ae 		movel %a1,%a0@(fffffffc,%d0:l:4)
						for (k_log = 1; k_log < n_frecs; k_log++) {
000223b2 		moveq #1,%d1
000223b4 		movel %d1,000309d6 <k_log>
000223ba 		cmpl %d0,%d1
000223bc 		bccw 0002247a <bucleMain+0xe50>
000223c0 		moveal 00030130 <f_min>,%a2
000223c6 		lea 00023198 <__muldf3>,%a3
							pasos[k_log] = f_min * 0.1 * pasoLogs;
000223cc 		movel 000309d6 <k_log>,%d4
000223d2 		lsll #2,%d4
000223d4 		movel %a2,%sp@-
000223d6 		jsr 000240f8 <__floatsidf>
000223dc 		addql #4,%sp
000223de 		tstl %a2
000223e0 		bges 000223f8 <bucleMain+0xdce>
000223e2 		clrl %sp@-
000223e4 		movel #1106247680,%sp@-
000223ea 		movel %d1,%sp@-
000223ec 		movel %d0,%sp@-
000223ee 		jsr 00022d08 <__adddf3>
000223f4 		lea %sp@(16),%sp
000223f8 		movel #-1717986918,%sp@-
000223fe 		movel #1069128089,%sp@-
00022404 		movel %d1,%sp@-
00022406 		movel %d0,%sp@-
00022408 		jsr %a3@
0002240a 		lea %sp@(16),%sp
0002240e 		movel %d0,%d2
00022410 		movel %d1,%d3
00022412 		moveal 00030a10 <pasoLogs>,%a0
00022418 		movel %a0,%sp@-
0002241a 		jsr 00024198 <__extendsfdf2>
00022420 		addql #4,%sp
00022422 		movel %d1,%sp@-
00022424 		movel %d0,%sp@-
00022426 		movel %d3,%sp@-
00022428 		movel %d2,%sp@-
0002242a 		jsr %a3@
0002242c 		lea %sp@(16),%sp
00022430 		movel %d1,%sp@-
00022432 		movel %d0,%sp@-
00022434 		jsr 00024272 <__fixdfsi>
0002243a 		addql #8,%sp
0002243c 		lea 00030148 <pasos>,%a1
00022442 		movel %d0,%a1@(00000000,%d4:l)
							pasoLogs *= pasoLogs;
00022446 		movel 00030a10 <pasoLogs>,%d0
0002244c 		movel %d0,%sp@-
0002244e 		movel %d0,%sp@-
00022450 		jsr 00023bc8 <__mulsf3>
00022456 		addql #8,%sp
00022458 		movel %d0,00030a10 <pasoLogs>
0002245e 		movel 000309d6 <k_log>,%d0
00022464 		movel %d0,%d1
00022466 		addql #1,%d1
00022468 		movel %d1,000309d6 <k_log>
0002246e 		addql #1,%d0
00022470 		cmpl 00030128 <n_frecs>,%d0
00022476 		bcsw 000223cc <bucleMain+0xda2>
0002247a 		tstl %a4
0002247c 		beqs 000224ac <bucleMain+0xe82>
0002247e 		tstb %a4@
00022480 		beqs 000224ac <bucleMain+0xe82>
00022482 		moveal %a4,%a0
00022484 		moveb %a0@+,%d2
00022486 		moveb %d2,%d1
00022488 		moveq #19,%d0
0002248a 		trap #15
0002248c 		tstb %a0@
0002248e 		bnes 00022484 <bucleMain+0xe5a>
						}
						output("		Distribución de frecuencias: logarítmica");
						break;
00022490 		bras 000224ac <bucleMain+0xe82>
00022492 		lea 0002442b <_etext+0x119>,%a0
00022498 		tstl %a0
0002249a 		beqs 000224ac <bucleMain+0xe82>
0002249c 		tstb %a0@
0002249e 		beqs 000224ac <bucleMain+0xe82>
000224a0 		moveb %a0@+,%d2
000224a2 		moveb %d2,%d1
000224a4 		moveq #19,%d0
000224a6 		trap #15
000224a8 		tstb %a0@
000224aa 		bnes 000224a0 <bucleMain+0xe76>
000224ac 		tstl %a5
000224ae 		beqs 000224de <bucleMain+0xeb4>
000224b0 		tstb %a5@
000224b2 		beqs 000224de <bucleMain+0xeb4>
000224b4 		moveal %a5,%a0
000224b6 		moveb %a0@+,%d2
000224b8 		moveb %d2,%d1
000224ba 		moveq #19,%d0
000224bc 		trap #15
000224be 		tstb %a0@
000224c0 		bnes 000224b6 <bucleMain+0xe8c>
					default:
						output("");
				}
				output("\r\n\r\n");													// 	Retorno de carro y salto de línea
				break;
000224c2 		bras 000224de <bucleMain+0xeb4>
000224c4 		lea 0002442b <_etext+0x119>,%a0
000224ca 		tstl %a0
000224cc 		beqs 000224de <bucleMain+0xeb4>
000224ce 		tstb %a0@
000224d0 		beqs 000224de <bucleMain+0xeb4>
000224d2 		moveb %a0@+,%d2
000224d4 		moveb %d2,%d1
000224d6 		moveq #19,%d0
000224d8 		trap #15
000224da 		tstb %a0@
000224dc 		bnes 000224d2 <bucleMain+0xea8>
000224de 		tstl %d6
000224e0 		beqs 000224f4 <bucleMain+0xeca>
000224e2 		moveal %d6,%a0
000224e4 		tstb %a0@
000224e6 		beqs 000224f4 <bucleMain+0xeca>
000224e8 		moveb %a0@+,%d2
000224ea 		moveb %d2,%d1
000224ec 		moveq #19,%d0
000224ee 		trap #15
000224f0 		tstb %a0@
000224f2 		bnes 000224e8 <bucleMain+0xebe>
			default:															// Si pulsamos cualquier otra tecla
				output("");														//	Sale del menú
		}
		output("\r\nPulse F para acceder al menú\r\n\r\n");											// Imprime el mensaje de como abrir el menú
	}
}
000224f4 		moveml %fp@(-72),%d2-%d7/%a2-%a5
000224fa 		unlk %fp
000224fc 		rts
000224fe <_exit>	linkw %fp,#0
00022502 		moveb #0,%d1
00022506 		moveq #0,%d0
00022508 		trap #15
0002250a 		unlk %fp
0002250c 		rts
0002250e <inch>	linkw %fp,#0
00022512 		movel %d2,%sp@-
00022514 		moveq #16,%d0
00022516 		trap #15
00022518 		movel %d1,%d2
0002251a 		moveb %d2,%d0
0002251c 		extbl %d0
0002251e 		movel %sp@+,%d2
00022520 		unlk %fp
00022522 		rts
00022524 <inche>	linkw %fp,#0
00022528 		movel %d2,%sp@-
0002252a 		moveq #16,%d0
0002252c 		trap #15
0002252e 		movel %d1,%d2
00022530 		extbl %d2
00022532 		movel %d2,%sp@-
00022534 		jsr 00022544 <outch>
0002253a 		movel %d2,%d0
0002253c 		movel %fp@(-4),%d2
00022540 		unlk %fp
00022542 		rts
00022544 <outch>	linkw %fp,#0
00022548 		movel %d2,%sp@-
0002254a 		moveb %fp@(11),%d2
0002254e 		moveb %d2,%d1
00022550 		moveq #19,%d0
00022552 		trap #15
00022554 		movel %sp@+,%d2
00022556 		unlk %fp
00022558 		rts
0002255a <outNum>	linkw %fp,#-32
0002255e 		lea %sp@(-20),%sp
00022562 		moveml %d2-%d5/%a2,%sp@
00022566 		movel %fp@(8),%d3
0002256a 		movel %fp@(12),%d4
0002256e 		movel %fp@(16),%d0
00022572 		moveb %d0,%d5
00022574 		lea 00024312 <_etext>,%a2
0002257a 		lea 00024323 <_etext+0x11>,%a1
00022580 		moveq #1,%d1
00022582 		andl %d1,%d0
00022584 		tstb %d0
00022586 		bnes 0002259a <outNum+0x40>
00022588 		tstl %d4
0002258a 		bges 0002259a <outNum+0x40>
0002258c 		moveq #45,%d2
0002258e 		moveb %d2,%d1
00022590 		moveq #19,%d0
00022592 		trap #15
00022594 		movel %d4,%d2
00022596 		negl %d2
00022598 		bras 0002259c <outNum+0x42>
0002259a 		movel %d4,%d2
0002259c 		lea %fp@(-1),%a0
000225a0 		clrb %a0@
000225a2 		moveq #2,%d4
000225a4 		andl %d5,%d4
000225a6 		tstb %d4
000225a8 		beqs 000225b6 <outNum+0x5c>
000225aa 		movel %d2,%d1
000225ac 		divull %d3,%d0,%d1
000225b0 		moveb %a1@(00000000,%d0:l),%a0@-
000225b4 		bras 000225c0 <outNum+0x66>
000225b6 		movel %d2,%d1
000225b8 		divull %d3,%d0,%d1
000225bc 		moveb %a2@(00000000,%d0:l),%a0@-
000225c0 		divull %d3,%d2,%d2
000225c4 		bnes 000225a6 <outNum+0x4c>
000225c6 		movel %a0,%sp@-
000225c8 		jsr 000225d8 <output>
000225ce 		moveml %fp@(-52),%d2-%d5/%a2
000225d4 		unlk %fp
000225d6 		rts
000225d8 <output>	linkw %fp,#0
000225dc 		movel %d2,%sp@-
000225de 		moveal %fp@(8),%a0
000225e2 		tstl %a0
000225e4 		beqs 000225f6 <output+0x1e>
000225e6 		tstb %a0@
000225e8 		beqs 000225f6 <output+0x1e>
000225ea 		moveb %a0@+,%d2
000225ec 		moveb %d2,%d1
000225ee 		moveq #19,%d0
000225f0 		trap #15
000225f2 		tstb %a0@
000225f4 		bnes 000225ea <output+0x12>
000225f6 		movel %sp@+,%d2
000225f8 		unlk %fp
000225fa 		rts
000225fc <retardo>	linkw %fp,#0
00022600 		moveal %fp@(8),%a0
00022604 		lea %a0@(00000000,%a0:l:4),%a1
00022608 		lea %a0@(00000000,%a1:l:2),%a1
0002260c 		movel %a1,%d0
0002260e 		lsll #2,%d0
00022610 		moveq #-32,%d1
00022612 		addl %d1,%d0
00022614 		lsrl #4,%d0
00022616 		subql #1,%d0
00022618 		moveq #-1,%d1
0002261a 		cmpl %d0,%d1
0002261c 		bnes 00022616 <retardo+0x1a>
0002261e 		unlk %fp
00022620 		rts
00022622 <_strlen>	linkw %fp,#0
00022626 		clrl %d0
00022628 		moveal %fp@(8),%a0
0002262c 		tstb %a0@+
0002262e 		beqs 00022636 <_strlen+0x14>
00022630 		addql #1,%d0
00022632 		tstb %a0@+
00022634 		bnes 00022630 <_strlen+0xe>
00022636 		unlk %fp
00022638 		rts
0002263a <memcpy>	linkw %fp,#0
0002263e 		movel %d2,%sp@-
00022640 		movel %fp@(8),%d0
00022644 		moveal %d0,%a1
00022646 		moveal %fp@(12),%a0
0002264a 		movel %fp@(16),%d1
0002264e 		bras 00022652 <memcpy+0x18>
00022650 		moveb %a0@+,%a1@+
00022652 		subql #1,%d1
00022654 		moveq #-1,%d2
00022656 		cmpl %d1,%d2
00022658 		bnes 00022650 <memcpy+0x16>
0002265a 		movel %sp@+,%d2
0002265c 		unlk %fp
0002265e 		rts
00022660 <memset>	linkw %fp,#0
00022664 		movel %d2,%sp@-
00022666 		moveal %fp@(8),%a1
0002266a 		movel %fp@(12),%d0
0002266e 		moveal %a1,%a0
00022670 		movel %fp@(16),%d1
00022674 		bras 00022678 <memset+0x18>
00022676 		moveb %d0,%a0@+
00022678 		subql #1,%d1
0002267a 		moveq #-1,%d2
0002267c 		cmpl %d1,%d2
0002267e 		bnes 00022676 <memset+0x16>
  return dst0;
00022680 		movel %a1,%d0
}
00022682 		movel %sp@+,%d2
00022684 		unlk %fp
00022686 		rts
00022688 <DAC_ADC_init>	linkw %fp,#0
0002268c 		moveal #268435500,%a0
00022692 		movew #-32768,%a0@
00022696 		lea %a0@(84),%a0
0002269a 		movel #8388608,%a0@
000226a0 		lea %a0@(36),%a0
000226a4 		clrw %a0@
000226a6 		addql #8,%a0
000226a8 		movew #-12275,%a0@
000226ac 		lea %a0@(-12),%a0
000226b0 		movew #-32768,%a0@
000226b4 		unlk %fp
000226b6 		rts
000226b8 <DAC_escribeTxRAM>	linkw %fp,#0
000226bc 		movel %fp@(8),%d0
000226c0 		moveal #268435632,%a0
000226c6 		clrw %a0@
000226c8 		addql #4,%a0
000226ca 		addl %d0,%d0
000226cc 		movew %d0,%a0@
000226ce 		unlk %fp
000226d0 		rts
000226d2 <DAC_escribeCommandRAM>	linkw %fp,#0
000226d6 		moveal #268435632,%a0
000226dc 		movew #32,%a0@
000226e0 		addql #4,%a0
000226e2 		movew #19712,%a0@
000226e6 		unlk %fp
000226e8 		rts
000226ea <DAC_dato>	linkw %fp,#0
000226ee 		movel %d2,%sp@-
000226f0 		movel %fp@(8),%d1
000226f4 		tstb 00030000 <primeraVez.45>
000226fa 		bnes 0002270e <DAC_dato+0x24>
000226fc 		moveal #268435628,%a0
00022702 		movew %a0@,%d0
00022704 		moveq #1,%d2
00022706 		andl %d2,%d0
00022708 		tstw %d0
0002270a 		beqs 00022702 <DAC_dato+0x18>
0002270c 		bras 00022716 <DAC_dato+0x2c>
0002270e 		clrb %d0
00022710 		moveb %d0,00030000 <primeraVez.45>
00022716 		moveal #268435628,%a0
0002271c 		movew %a0@,%d0
0002271e 		moveq #1,%d2
00022720 		orl %d2,%d0
00022722 		movew %d0,%a0@
00022724 		lea %a0@(-12),%a0
00022728 		movew #-32765,%a0@
0002272c 		andil #4095,%d1
00022732 		moveal #268435632,%a1
00022738 		clrw %a1@
0002273a 		lea %a0@(20),%a0
0002273e 		addl %d1,%d1
00022740 		movew %d1,%a0@
00022742 		movew #32,%a1@
00022746 		movew #19712,%a0@
0002274a 		lea %a0@(-12),%a0
0002274e 		movew #4096,%a0@
00022752 		subql #4,%a0
00022754 		movew %a0@,%d0
00022756 		oril #32768,%d0
0002275c 		movew %d0,%a0@
0002275e 		movel %sp@+,%d2
00022760 		unlk %fp
00022762 		rts
00022764 <ADC_escribeTxRAM>	linkw %fp,#0
00022768 		moveal #268435632,%a0
0002276e 		clrw %a0@
00022770 		addql #4,%a0
00022772 		movew #-26729,%a0@
00022776 		clrw %a0@
00022778 		clrw %a0@
0002277a 		unlk %fp
0002277c 		rts
0002277e <ADC_escribeCommandRAM>	linkw %fp,#0
00022782 		moveal #268435632,%a0
00022788 		movew #32,%a0@
0002278c 		addql #4,%a0
0002278e 		movew #-29184,%a0@
00022792 		movew #-29184,%a0@
00022796 		movew #3584,%a0@
0002279a 		unlk %fp
0002279c 		rts
0002279e <ADC_leeRxRAM>	linkw %fp,#0
000227a2 		moveal #268435632,%a0
000227a8 		movew #16,%a0@
000227ac 		addql #4,%a0
000227ae 		movew %a0@,%d0
000227b0 		movew %a0@,%d0
000227b2 		andil #65535,%d0
000227b8 		movew %a0@,%d1
000227ba 		andil #65535,%d1
000227c0 		asrl #3,%d1
000227c2 		lsll #5,%d0
000227c4 		addl %d0,%d1
000227c6 		btst #11,%d1
000227ca 		beqs 000227d4 <ADC_leeRxRAM+0x36>
000227cc 		oril #-4096,%d1
000227d2 		bras 000227da <ADC_leeRxRAM+0x3c>
000227d4 		andil #4095,%d1
000227da 		movel %d1,%d0
000227dc 		unlk %fp
000227de 		rts
000227e0 <ADC_dato>	linkw %fp,#0
000227e4 		moveal #268435616,%a0
000227ea 		movew #-32752,%a0@
000227ee 		moveal #268435632,%a1
000227f4 		clrw %a1@
000227f6 		lea %a0@(20),%a0
000227fa 		movew #-26729,%a0@
000227fe 		clrw %a0@
00022800 		clrw %a0@
00022802 		movew #32,%a1@
00022806 		movew #-29184,%a0@
0002280a 		movew #-29184,%a0@
0002280e 		movew #3584,%a0@
00022812 		lea %a0@(-12),%a0
00022816 		movew #4608,%a0@
0002281a 		subql #4,%a0
0002281c 		movew %a0@,%d0
0002281e 		oril #32768,%d0
00022824 		movew %d0,%a0@
00022826 		addql #8,%a0
00022828 		movew %a0@,%d0
0002282a 		moveq #1,%d1
0002282c 		andl %d1,%d0
0002282e 		tstw %d0
00022830 		beqs 00022828 <ADC_dato+0x48>
00022832 		moveal #268435628,%a0
00022838 		movew %a0@,%d0
0002283a 		orl %d1,%d0
0002283c 		movew %d0,%a0@
0002283e 		addql #4,%a0
00022840 		movew #16,%a0@
00022844 		addql #4,%a0
00022846 		movew %a0@,%d0
00022848 		movew %a0@,%d0
0002284a 		andil #65535,%d0
00022850 		movew %a0@,%d1
00022852 		andil #65535,%d1
00022858 		asrl #3,%d1
0002285a 		lsll #5,%d0
0002285c 		addl %d0,%d1
0002285e 		btst #11,%d1
00022862 		beqs 0002286c <ADC_dato+0x8c>
00022864 		oril #-4096,%d1
0002286a 		bras 00022872 <ADC_dato+0x92>
0002286c 		andil #4095,%d1
00022872 		movel %d1,%d0
00022874 		unlk %fp
00022876 		rts
00022878 <set_puertoS_H>	linkw %fp,#0
0002287c 		clrl %d1
0002287e 		moveb 000309d5 <puertoS+0x1>,%d1
00022884 		clrw %d0
00022886 		moveb %fp@(11),%d0
0002288a 		lsll #8,%d0
0002288c 		orl %d0,%d1
0002288e 		movew %d1,000309d4 <puertoS>
00022894 		movew %d1,40000000 <_end+0x3ffcf5ec>
0002289a 		unlk %fp
0002289c 		rts
0002289e <set_puertoS>	linkw %fp,#0
000228a2 		movew 000309d4 <puertoS>,%d0
000228a8 		andil #65280,%d0
000228ae 		clrw %d1
000228b0 		moveb %fp@(11),%d1
000228b4 		orl %d1,%d0
000228b6 		movew %d0,000309d4 <puertoS>
000228bc 		movew %d0,40000000 <_end+0x3ffcf5ec>
000228c2 		unlk %fp
000228c4 		rts
000228c6 <set16_puertoS>	linkw %fp,#0
000228ca 		movel %fp@(8),%d0
000228ce 		movew %d0,000309d4 <puertoS>
000228d4 		movew %d0,40000000 <_end+0x3ffcf5ec>
000228da 		unlk %fp
000228dc 		rts
000228de <lee16_puertoE>	linkw %fp,#0
000228e2 		clrl %d0
000228e4 		movew 50000002 <_end+0x4ffcf5ee>,%d0
000228ea 		unlk %fp
000228ec 		rts
000228ee <lee_puertoE>	linkw %fp,#0
000228f2 		clrl %d0
000228f4 		moveb 50000003 <_end+0x4ffcf5ef>,%d0
}
000228fa 		unlk %fp
000228fc 		rts

//-------------------------------------------------
// void gpio_setup(void)
// 
// Descripción:
//  Configuración del módulo de entrada/salida de 
//   propósito general del M5272 (GPIO) 
//
//-------------------------------------------------
void gpio_setup(void)
{  
000228fe <gpio_setup>	linkw %fp,#0
  // Configuracion del puerto A
  mbar_writeLong(MCFSIM_PACNT, 0x00000000);	// Puerto A como Puerto IO
00022902 		moveal #268435584,%a0
00022908 		clrl %a0@
  mbar_writeShort(MCFSIM_PADDR, 0x7E80);	// Son todo entradas
0002290a 		addql #4,%a0
0002290c 		movew #32384,%a0@

  // Configuracion del puerto B
  // El puerto B comparte los pines Ethernet y la primera UART
  mbar_writeLong(MCFSIM_PBCNT, 0x55554155); 
00022910 		addql #4,%a0
00022912 		movel #1431650645,%a0@
  mbar_writeShort(MCFSIM_PBDDR, 0x0000); 	// Sólo afecta a PB5 y PB6 (in)
00022918 		addql #4,%a0
0002291a 		clrw %a0@
}
0002291c 		unlk %fp
0002291e 		rts

//----------------------------------------------------
//          Rutinas de I/O de los puertos 0 y 1
//----------------------------------------------------
UBYTE lee_puerto1(void)
{
00022920 <lee_puerto1>	linkw %fp,#0
00022924 		movel %d2,%sp@-
  UWORD puerto,mascara;
  puerto=(UWORD)(mbar_readLong(MCFSIM_PADAT)>>16);
00022926 		moveal #268435590,%a0
0002292c 		movel %a0@,%d0
0002292e 		clrw %d0
00022930 		swap %d0
  mascara=((puerto>>1)&0x80);	// Valor IOPRT 15
00022932 		movel %d0,%d1
00022934 		lsrl #1,%d1
00022936 		andil #128,%d1
  puerto&=0x7F; 		// IO_PORT14-IOPORT8
0002293c 		moveq #127,%d2
0002293e 		andl %d2,%d0
  puerto|=mascara;
00022940 		orl %d1,%d0
  return ((UBYTE)(puerto&0xFF));
00022942 		andil #255,%d0
}
00022948 		movel %sp@+,%d2
0002294a 		unlk %fp
0002294c 		rts

void set_puerto1 (UBYTE valor)
{
0002294e <set_puerto1>	linkw %fp,#0
00022952 		movel %d3,%sp@-
00022954 		movel %d2,%sp@-
00022956 		movel %fp@(8),%d2
  UWORD puerto,mascara;
  puerto=(UWORD)(mbar_readLong(MCFSIM_PADAT)>>16);
0002295a 		moveal #268435590,%a0
00022960 		movel %a0@,%d1
00022962 		clrw %d1
00022964 		swap %d1
  mascara=valor;
  mascara<<=1;
00022966 		movel %d2,%d0
00022968 		addl %d0,%d0
  mascara&=0x00100; // Valor IOPRT 15
0002296a 		andil #256,%d0
  mascara|=((UWORD)valor&0x7F); 
00022970 		moveq #127,%d3
00022972 		andl %d3,%d2
00022974 		orl %d2,%d0
  puerto&=0xFE80; // Ponemos a cero el valor leido
00022976 		andil #65152,%d1
  puerto|=mascara;
0002297c 		orl %d0,%d1
  mbar_writeShort(MCFSIM_PADAT,puerto);
0002297e 		movew %d1,%a0@
}
00022980 		movel %sp@+,%d2
00022982 		movel %sp@+,%d3
00022984 		unlk %fp
00022986 		rts

void set_puerto0 (UBYTE valor)
{
00022988 <set_puerto0>	linkw %fp,#0
  UBYTE* pchar;
  pchar=(UBYTE*)BASE_PUERTO0;
  (*pchar)=valor;
0002298c 		moveb %fp@(11),%d0
00022990 		moveb %d0,30000000 <_end+0x2ffcf5ec>
}
00022996 		unlk %fp
00022998 		rts

//--------------------------------------------------------
// void set_led(UWORD valor)
//
// Descripción:
//   Presenta un valor en los LEDs de información de la
//   placa Antares. 
//
// Por ejemplo: set_led(0x07)
//
//     |   SLD0   |   SLD1   |    SLD2    |    SLD3    |
//     |----------|----------|------------|------------|
//     |    ON    |    ON    |     ON     |     OFF    | 
// 
// Autor: Alberto Quintana Ocaña
//--------------------------------------------------------
void set_led(UWORD valor)
{
0002299a <set_led>	linkw %fp,#0
0002299e 		lea %sp@(-12),%sp
000229a2 		moveml %d2-%d4,%sp@
  UWORD puerto1_valor;	// Valor del puerto IO 1
  UWORD mascara;	// Máscara con el valor de los LEDs
			// en las posiciones del puerto 1
  puerto1_valor=(UWORD) (mbar_readLong(MCFSIM_PADAT)>>16);
000229a6 		moveal #268435590,%a0
000229ac 		movel %a0@,%d2
000229ae 		clrw %d2
000229b0 		swap %d2
  mascara=0x0000;
  valor=valor&0x0F;
000229b2 		moveq #15,%d3
000229b4 		andl %fp@(8),%d3
  mascara=((valor<<10)&0x3000);
000229b8 		movel %d3,%d1
000229ba 		moveq #10,%d0
000229bc 		lsll %d0,%d1
000229be 		andil #12288,%d1
  mascara=(((valor<<9)&0x0600)|mascara);
000229c4 		movel %d3,%d0
000229c6 		moveq #9,%d4
000229c8 		lsll %d4,%d0
000229ca 		andil #1536,%d0
000229d0 		orl %d0,%d1
  puerto1_valor&=0xC9FF;// Ponemos a cero los bits de los LEDS
000229d2 		andil #51711,%d2
  puerto1_valor|=mascara;
000229d8 		orl %d1,%d2
  mbar_writeShort(MCFSIM_PADAT,puerto1_valor);
000229da 		movew %d2,%a0@
  set_puerto0(valor|(valor<<4));
000229dc 		movel %d3,%d0
000229de 		lsll #4,%d0
000229e0 		orl %d3,%d0
000229e2 		moveb %d0,30000000 <_end+0x2ffcf5ec>
}
000229e8 		moveml %sp@,%d2-%d4
000229ec 		lea %sp@(12),%sp
000229f0 		unlk %fp
000229f2 		rts
000229f4 <LCD_write>	linkw %fp,#0
000229f8 		movel %d3,%sp@-
000229fa 		movel %d2,%sp@-
000229fc 		movel %fp@(8),%d0
00022a00 		movel %fp@(12),%d2
00022a04 		movew %d0,%d1
00022a06 		moveq #64,%d3
00022a08 		cmpl %d2,%d3
00022a0a 		bnes 00022a10 <LCD_write+0x1c>
00022a0c 		movel %d0,%d1
00022a0e 		lsll #8,%d1
00022a10 		orl %d2,%d1
00022a12 		movel %d1,%d0
00022a14 		oril #128,%d0
00022a1a 		movew %d0,000309d4 <puertoS>
00022a20 		movew %d0,40000000 <_end+0x3ffcf5ec>
00022a26 		movel #8248,%d0
00022a2c 		subql #1,%d0
00022a2e 		moveq #-1,%d2
00022a30 		cmpl %d0,%d2
00022a32 		bnes 00022a2c <LCD_write+0x38>
00022a34 		movew %d1,000309d4 <puertoS>
00022a3a 		movew %d1,40000000 <_end+0x3ffcf5ec>
00022a40 		movel #8248,%d0
00022a46 		subql #1,%d0
00022a48 		moveq #-1,%d3
00022a4a 		cmpl %d0,%d3
00022a4c 		bnes 00022a46 <LCD_write+0x52>
00022a4e 		movel %sp@+,%d2
00022a50 		movel %sp@+,%d3
00022a52 		unlk %fp
00022a54 		rts
00022a56 <busquedaBinaria>	linkw %fp,#0
00022a5a 		movel %a2,%sp@-
00022a5c 		movel %d2,%sp@-
00022a5e 		movel %fp@(8),%d2
00022a62 		subal %a1,%a1
00022a64 		moveaw #31,%a0
00022a68 		moveq #15,%d0
00022a6a 		lea 00030002 <umbrales.103>,%a2
00022a70 		cmpl %a2@,%d2
00022a72 		bges 00022a7c <busquedaBinaria+0x26>
00022a74 		movel 00030082 <adapt_DAC.104>,%d0
00022a7a 		bras 00022ab4 <busquedaBinaria+0x5e>
00022a7c 		cmpl 0003007a <umbrales.103+0x78>,%d2
00022a82 		bles 00022a8c <busquedaBinaria+0x36>
00022a84 		movel 000300fe <adapt_DAC.104+0x7c>,%d0
00022a8a 		bras 00022ab4 <busquedaBinaria+0x5e>
00022a8c 		moveq #4,%d1
00022a8e 		cmpl %a2@(00000000,%d0:l:4),%d2
00022a92 		bges 00022a9a <busquedaBinaria+0x44>
00022a94 		moveal %d0,%a0
00022a96 		movel %a1,%d0
00022a98 		bras 00022a9c <busquedaBinaria+0x46>
00022a9a 		moveal %d0,%a1
00022a9c 		addl %a0,%d0
00022a9e 		movel %d0,%d0
00022aa0 		bpls 00022aa4 <busquedaBinaria+0x4e>
00022aa2 		addql #1,%d0
00022aa4 		asrl #1,%d0
00022aa6 		subql #1,%d1
00022aa8 		bpls 00022a8e <busquedaBinaria+0x38>
00022aaa 		lea 00030082 <adapt_DAC.104>,%a0
00022ab0 		movel %a0@(00000000,%d0:l:4),%d0
}00022ab4 		movel %sp@+,%d2
00022ab6 		moveal %sp@+,%a2
00022ab8 		unlk %fp
00022aba 		rts
00022abc <numeroarray>	linkw %fp,#0
00022ac0 		lea %sp@(-28),%sp
00022ac4 		moveml %d2-%d4/%a2-%a5,%sp@
00022ac8 		movel %fp@(8),%d3
00022acc 		cmpil #1000,%d3
00022ad2 		bles 00022ade <numeroarray+0x22>
00022ad4 		moveq #4,%d0
00022ad6 		movel %d0,00030a04 <tam>
00022adc 		bras 00022b30 <numeroarray+0x74>
00022ade 		moveq #100,%d1
00022ae0 		cmpl %d3,%d1
00022ae2 		bges 00022af6 <numeroarray+0x3a>
00022ae4 		moveq #3,%d4
00022ae6 		movel %d4,00030a04 <tam>
00022aec 		moveq #32,%d0
00022aee 		moveb %d0,000309fb <array+0x3>
00022af4 		bras 00022b30 <numeroarray+0x74>
00022af6 		moveq #10,%d1
00022af8 		cmpl %d3,%d1
00022afa 		bges 00022b14 <numeroarray+0x58>
00022afc 		moveq #2,%d4
00022afe 		movel %d4,00030a04 <tam>
00022b04 		moveq #32,%d0
00022b06 		moveb %d0,000309fa <array+0x2>
00022b0c 		moveb %d0,000309fb <array+0x3>
00022b12 		bras 00022b30 <numeroarray+0x74>
00022b14 		moveq #1,%d1
00022b16 		movel %d1,00030a04 <tam>
00022b1c 		moveq #32,%d4
00022b1e 		moveb %d4,000309f9 <array+0x1>
00022b24 		moveb %d4,000309fa <array+0x2>
00022b2a 		moveb %d4,000309fb <array+0x3>
00022b30 		movel 00030a04 <tam>,%d0
00022b36 		subql #1,%d0
00022b38 		movel %d0,00030944 <p>
00022b3e 		lea 000309f8 <array>,%a5
00022b44 		lea 000240f8 <__floatsidf>,%a4
00022b4a 		lea 00023198 <__muldf3>,%a3
00022b50 		lea 00024272 <__fixdfsi>,%a2
00022b56 		movel 00030944 <p>,%d2
00022b5c 		movel %d3,%d1
00022b5e 		moveq #10,%d4
00022b60 		divsll %d4,%d0,%d1
00022b64 		moveq #48,%d1
00022b66 		addl %d1,%d0
00022b68 		moveb %d0,%a5@(00000000,%d2:l)
00022b6c 		movel %d3,%sp@-
00022b6e 		jsr %a4@
00022b70 		addql #4,%sp
00022b72 		movel #-1717986918,%sp@-
00022b78 		movel #1069128089,%sp@-
00022b7e 		movel %d1,%sp@-
00022b80 		movel %d0,%sp@-
00022b82 		jsr %a3@
00022b84 		lea %sp@(16),%sp
00022b88 		movel %d1,%sp@-
00022b8a 		movel %d0,%sp@-
00022b8c 		jsr %a2@
00022b8e 		addql #8,%sp
00022b90 		movel %d0,%d3
00022b92 		subql #1,%d2
00022b94 		movel %d2,00030944 <p>
00022b9a 		tstl %d3
00022b9c 		bnes 00022b56 <numeroarray+0x9a>
	return array;
00022b9e 		movel #199160,%d0
}00022ba4 		moveml %fp@(-28),%d2-%d4/%a2-%a5
00022baa 		unlk %fp
00022bac 		rts
00022bae <__init>	linkw %fp,#0
00022bb2 		movel %d2,%sp@-
00022bb4 		moveal #268435519,%a0
00022bba 		moveb #64,%a0@
00022bbe 		movel #131098,%d0
00022bc4 		movel %d0,00000114 <F_MAX_EXP+0x15>
00022bc8 		movel #131210,%d0
00022bce 		movel %d0,00000104 <F_MAX_EXP+0x5>
00022bd2 		moveal #268435968,%a0
00022bd8 		movew #61,%a0@
00022bdc 		lea %a0@(12),%a0
00022be0 		clrw %a0@
00022be2 		subql #8,%a0
00022be4 		movew #1031,%a0@
00022be8 		moveal #268435508,%a0
00022bee 		movel %a0@,%d0
00022bf0 		oril #-2147483648,%d0
00022bf6 		movel %d0,%a0@
00022bf8 		lea %a0@(-20),%a0
00022bfc 		movel #-662124408,%a0@
00022c02 		lea %a0@(12),%a0
00022c06 		movew #-32768,%a0@
00022c0a 		lea %a0@(84),%a0
00022c0e 		movel #8388608,%a0@
00022c14 		lea %a0@(36),%a0
00022c18 		clrw %a0@
00022c1a 		addql #8,%a0
00022c1c 		movew #-12275,%a0@
00022c20 		lea %a0@(-12),%a0
00022c24 		movew #-32768,%a0@
00022c28 		jsr %pc@(000205e0 <LCD_reset>)
00022c2c 		jsr %pc@(000204dc <LCD_init>)
00022c30 		lea 0002444f <_etext+0x13d>,%a0
00022c36 		lea 00024496 <_etext+0x184>,%a1
00022c3c 		tstl %a0
00022c3e 		beqs 00022c50 <__init+0xa2>
00022c40 		tstb %a0@
00022c42 		beqs 00022c50 <__init+0xa2>
00022c44 		moveb %a0@+,%d2
00022c46 		moveb %d2,%d1
00022c48 		moveq #19,%d0
00022c4a 		trap #15
00022c4c 		tstb %a0@
00022c4e 		bnes 00022c44 <__init+0x96>
00022c50 		tstl %a1
00022c52 		beqs 00022c66 <__init+0xb8>
00022c54 		tstb %a1@
00022c56 		beqs 00022c66 <__init+0xb8>
00022c58 		moveal %a1,%a0
00022c5a 		moveb %a0@+,%d2
00022c5c 		moveb %d2,%d1
00022c5e 		moveq #19,%d0
00022c60 		trap #15
00022c62 		tstb %a0@
00022c64 		bnes 00022c5a <__init+0xac>
00022c66 		movew %sr,%d0
00022c68 		andil #63743,%d0
00022c6e 		movew %d0,%sr
00022c70 		movel %fp@(-4),%d2
00022c74 		unlk %fp
00022c76 		rts

//------------------------------------------------------
// Definición de rutinas de atención a la interrupción
// Es necesario definirlas aunque estén vacías
void rutina_int2(void) {}
00022c78 <rutina_int2>	linkw %fp,#0
00022c7c 		unlk %fp
00022c7e 		rts
void rutina_int3(void) {}
00022c80 <rutina_int3>	linkw %fp,#0
00022c84 		unlk %fp
00022c86 		rts
void rutina_int4(void) {}
00022c88 <rutina_int4>	linkw %fp,#0
00022c8c 		unlk %fp
00022c8e 		rts
void rutina_tout1(void) {}
00022c90 <rutina_tout1>	linkw %fp,#0
00022c94 		unlk %fp
00022c96 		rts
void rutina_tout2(void) {}
00022c98 <rutina_tout2>	linkw %fp,#0
00022c9c 		unlk %fp
00022c9e 		rts
void rutina_tout3(void) {}00022ca0 <rutina_tout3>	linkw %fp,#0
00022ca4 		unlk %fp
00022ca6 		rts
00022ca8 <Ld$den>	orl %d7,%d0
00022caa 		movew #3,%d7
00022cae 		moveq #2,%d6
00022cb0 		jmp 0002406c <$_exception_handler>
00022cb6 <Ld$infty>	movel #2146435072,%d0
00022cbc 		moveq #0,%d1
00022cbe 		orl %d7,%d0
00022cc0 		movew #5,%d7
00022cc4 		moveq #2,%d6
00022cc6 		jmp 0002406c <$_exception_handler>
00022ccc <Ld$underflow>	moveq #0,%d0
00022cce 		movel %d0,%d1
00022cd0 		movew #3,%d7
00022cd4 		moveq #2,%d6
00022cd6 		jmp 0002406c <$_exception_handler>
00022cdc <Ld$inop>	moveq #-1,%d0
00022cde 		movel %d0,%d1
00022ce0 		movew #17,%d7
00022ce4 		moveq #2,%d6
00022ce6 		jmp 0002406c <$_exception_handler>
00022cec <Ld$div$0>	movel #2146435072,%d0
00022cf2 		moveq #0,%d1
00022cf4 		orl %d7,%d0
00022cf6 		movew #9,%d7
00022cfa 		moveq #2,%d6
00022cfc 		jmp 0002406c <$_exception_handler>
00022d02 <__subdf3>	bchg #31,%sp@(12)
00022d08 <__adddf3>	linkw %fp,#-24
00022d0c 		moveml %d2-%d7,%sp@
00022d10 		movel %fp@(8),%d0
00022d14 		movel %fp@(12),%d1
00022d18 		movel %fp@(16),%d2
00022d1c 		movel %fp@(20),%d3
00022d20 		movel %d0,%d7
00022d22 		addl %d1,%d1
00022d24 		addxl %d0,%d0
00022d26 		beqw 000230ac <Ladddf$b>
00022d2a 		movel %d2,%d6
00022d2c 		addl %d3,%d3
00022d2e 		addxl %d2,%d2
00022d30 		beqw 000230b4 <Ladddf$a>
00022d34 		andil #-2147483648,%d7
00022d3a 		swap %d6
00022d3c 		andil #32768,%d6
00022d42 		orl %d6,%d7
00022d44 		moveal %d7,%a0
00022d46 		movel #2097151,%d6
00022d4c 		movel #2097152,%d7
00022d52 		movel %d0,%d4
00022d54 		andl %d6,%d0
00022d56 		notl %d6
00022d58 		andl %d6,%d4
00022d5a 		beqw 0002309e <Ladddf$a$den>
00022d5e 		cmpl %d6,%d4
00022d60 		beqw 00023122 <Ladddf$nf>
00022d64 		orl %d7,%d0
00022d66 <Ladddf$1>	swap %d4
00022d68 		lsrl #5,%d4
00022d6a 		movel %d2,%d5
00022d6c 		andl %d6,%d5
00022d6e 		beqw 000230a4 <Ladddf$b$den>
00022d72 		cmpl %d6,%d5
00022d74 		beqw 00023122 <Ladddf$nf>
00022d78 		notl %d6
00022d7a 		andl %d6,%d2
00022d7c 		orl %d7,%d2
00022d7e <Ladddf$2>	swap %d5
00022d80 		lsrl #5,%d5
00022d82 		movel %a2,%sp@-
00022d84 		movel %a3,%sp@-
00022d86 		movel %a4,%sp@-
00022d88 		moveal %d4,%a2
00022d8a 		moveal %d5,%a3
00022d8c 		moveq #0,%d7
00022d8e 		movel %d7,%d6
00022d90 		movel %d3,%d5
00022d92 		movel %d2,%d4
00022d94 		movel %d7,%d3
00022d96 		movel %d7,%d2
00022d98 		moveal %d4,%a4
00022d9a 		movel %a2,%d4
00022d9c 		moveal %a4,%a2
00022d9e 		moveal %d5,%a4
00022da0 		movel %a3,%d5
00022da2 		moveal %a4,%a3
00022da4 		cmpl %d4,%d5
00022da6 		beqw 00022ee6 <Ladddf$3>
00022daa 		bhiw 00022e48 <Ladddf$2+0xca>
00022dae 		movew %d4,%d2
00022db0 		subl %d5,%d2
00022db2 		moveal %d4,%a4
00022db4 		movel %a2,%d4
00022db6 		moveal %a4,%a2
00022db8 		moveal %d5,%a4
00022dba 		movel %a3,%d5
00022dbc 		moveal %a4,%a3
00022dbe 		cmpil #55,%d2
00022dc4 		bgew 0002307e <Ladddf$b$small>
00022dc8 		cmpil #32,%d2
00022dce 		bgew 00022e1a <Ladddf$2+0x9c>
00022dd2 		cmpil #16,%d2
00022dd8 		bgew 00022e2c <Ladddf$2+0xae>
00022ddc 		braw 00022e0c <Ladddf$2+0x8e>
00022de0 		lsrl #1,%d7
00022de2 		btst #0,%d6
00022de6 		beqw 00022dee <Ladddf$2+0x70>
00022dea 		bset #31,%d7
00022dee 		lsrl #1,%d6
00022df0 		btst #0,%d5
00022df4 		beqw 00022dfc <Ladddf$2+0x7e>
00022df8 		bset #31,%d6
00022dfc 		lsrl #1,%d5
00022dfe 		btst #0,%d4
00022e02 		beqw 00022e0a <Ladddf$2+0x8c>
00022e06 		bset #31,%d5
00022e0a 		lsrl #1,%d4
00022e0c 		subql #1,%d2
00022e0e 		bplw 00022de0 <Ladddf$2+0x62>
00022e12 		moveq #0,%d2
00022e14 		movel %d2,%d3
00022e16 		braw 00022ef2 <Ladddf$4>
00022e1a 		movel %d6,%d7
00022e1c 		movel %d5,%d6
00022e1e 		movel %d4,%d5
00022e20 		moveq #0,%d4
00022e22 		subil #32,%d2
00022e28 		braw 00022dd2 <Ladddf$2+0x54>
00022e2c 		movew %d6,%d7
00022e2e 		swap %d7
00022e30 		movew %d5,%d6
00022e32 		swap %d6
00022e34 		movew %d4,%d5
00022e36 		swap %d5
00022e38 		movew #0,%d4
00022e3c 		swap %d4
00022e3e 		subil #16,%d2
00022e44 		braw 00022e0c <Ladddf$2+0x8e>
00022e48 		movel %d5,%d6
00022e4a 		movel %d4,%d5
00022e4c 		movel %d6,%d4
00022e4e 		subl %d5,%d6
00022e50 		moveal %d4,%a4
00022e52 		movel %a2,%d4
00022e54 		moveal %a4,%a2
00022e56 		moveal %d5,%a4
00022e58 		movel %a3,%d5
00022e5a 		moveal %a4,%a3
00022e5c 		cmpil #55,%d6
00022e62 		bgew 0002305e <Ladddf$a$small>
00022e66 		cmpil #32,%d6
00022e6c 		bgew 00022eb8 <Ladddf$2+0x13a>
00022e70 		cmpil #16,%d6
00022e76 		bgew 00022eca <Ladddf$2+0x14c>
00022e7a 		braw 00022eaa <Ladddf$2+0x12c>
00022e7e 		lsrl #1,%d3
00022e80 		btst #0,%d2
00022e84 		beqw 00022e8c <Ladddf$2+0x10e>
00022e88 		bset #31,%d3
00022e8c 		lsrl #1,%d2
00022e8e 		btst #0,%d1
00022e92 		beqw 00022e9a <Ladddf$2+0x11c>
00022e96 		bset #31,%d2
00022e9a 		lsrl #1,%d1
00022e9c 		btst #0,%d0
00022ea0 		beqw 00022ea8 <Ladddf$2+0x12a>
00022ea4 		bset #31,%d1
00022ea8 		lsrl #1,%d0
00022eaa 		subql #1,%d6
00022eac 		bplw 00022e7e <Ladddf$2+0x100>
00022eb0 		moveq #0,%d7
00022eb2 		movel %d7,%d6
00022eb4 		braw 00022ef2 <Ladddf$4>
00022eb8 		movel %d2,%d3
00022eba 		movel %d1,%d2
00022ebc 		movel %d0,%d1
00022ebe 		moveq #0,%d0
00022ec0 		subil #32,%d6
00022ec6 		braw 00022e70 <Ladddf$2+0xf2>
00022eca 		movew %d2,%d3
00022ecc 		swap %d3
00022ece 		movew %d1,%d2
00022ed0 		swap %d2
00022ed2 		movew %d0,%d1
00022ed4 		swap %d1
00022ed6 		movew #0,%d0
00022eda 		swap %d0
00022edc 		subil #16,%d6
00022ee2 		braw 00022eaa <Ladddf$2+0x12c>
00022ee6 <Ladddf$3>	moveal %d4,%a4
00022ee8 		movel %a2,%d4
00022eea 		moveal %a4,%a2
00022eec 		moveal %d5,%a4
00022eee 		movel %a3,%d5
00022ef0 		moveal %a4,%a3
00022ef2 <Ladddf$4>	moveal %d7,%a4
00022ef4 		movel %a0,%d7
00022ef6 		moveal %a4,%a0
00022ef8 		moveal %d6,%a4
00022efa 		movel %a3,%d6
00022efc 		moveal %a4,%a3
00022efe 		movel %d7,%d6
00022f00 		movew #0,%d7
00022f04 		swap %d6
00022f06 		movew #0,%d6
00022f0a 		eorl %d7,%d6
00022f0c 		bmiw 00022fb4 <Lsubdf$0>
00022f10 		moveal %d7,%a4
00022f12 		movel %a0,%d7
00022f14 		moveal %a4,%a0
00022f16 		moveal %d6,%a4
00022f18 		movel %a3,%d6
00022f1a 		moveal %a4,%a3
00022f1c 		addl %d7,%d3
00022f1e 		addxl %d6,%d2
00022f20 		addxl %d5,%d1
00022f22 		addxl %d4,%d0
00022f24 		movel %a2,%d4
00022f26 		movel %a0,%d7
00022f28 		andil #-2147483648,%d7
00022f2e 		moveal %sp@+,%a4
00022f30 		moveal %sp@+,%a3
00022f32 		moveal %sp@+,%a2
00022f34 		btst #54,%d0
00022f38 		beqw 00022f6a <Ladddf$4+0x78>
00022f3c 		lsrl #1,%d3
00022f3e 		btst #0,%d2
00022f42 		beqw 00022f4a <Ladddf$4+0x58>
00022f46 		bset #31,%d3
00022f4a 		lsrl #1,%d2
00022f4c 		btst #0,%d1
00022f50 		beqw 00022f58 <Ladddf$4+0x66>
00022f54 		bset #31,%d2
00022f58 		lsrl #1,%d1
00022f5a 		btst #0,%d0
00022f5e 		beqw 00022f66 <Ladddf$4+0x74>
00022f62 		bset #31,%d1
00022f66 		lsrl #1,%d0
00022f68 		addql #1,%d4
00022f6a 		lea 00022f92 <Ladddf$5>,%a0
00022f70 		lea 00030838 <_fpCCR>,%a1
00022f76 		clrl %d6
00022f78 		movew %a1@(6),%d6
00022f7c 		beqw 000237aa <Lround$to$nearest>
00022f80 		cmpil #2,%d6
00022f86 		bhiw 0002382a <Lround$to$minus>
00022f8a 		bltw 0002382a <Lround$to$minus>
00022f8e 		braw 0002382a <Lround$to$minus>
00022f92 <Ladddf$5>	cmpil #2047,%d4
00022f98 		bgew 00022fac <Ladddf$5+0x1a>
00022f9c 		bclr #52,%d0
00022fa0 		lsll #4,%d4
00022fa2 		swap %d0
00022fa4 		orl %d4,%d0
00022fa6 		swap %d0
00022fa8 		braw 000230fa <Ladddf$ret>
00022fac 		movew #1,%d5
00022fb0 		braw 00022cb6 <Ld$infty>
00022fb4 <Lsubdf$0>	moveal %d7,%a4
00022fb6 		movel %a0,%d7
00022fb8 		moveal %a4,%a0
00022fba 		moveal %d6,%a4
00022fbc 		movel %a3,%d6
00022fbe 		moveal %a4,%a3
00022fc0 		subl %d7,%d3
00022fc2 		subxl %d6,%d2
00022fc4 		subxl %d5,%d1
00022fc6 		subxl %d4,%d0
00022fc8 		beqw 000230f4 <Ladddf$ret$1>
00022fcc 		bplw 00022fe0 <Lsubdf$0+0x2c>
00022fd0 		movel %a0,%d7
00022fd2 		bchg #31,%d7
00022fd6 		moveal %d7,%a0
00022fd8 		negl %d3
00022fda 		negxl %d2
00022fdc 		negxl %d1
00022fde 		negxl %d0
00022fe0 		movel %a2,%d4
00022fe2 		movel %a0,%d7
00022fe4 		andil #-2147483648,%d7
00022fea 		moveal %sp@+,%a4
00022fec 		moveal %sp@+,%a3
00022fee 		moveal %sp@+,%a2
00022ff0 		btst #54,%d0
00022ff4 		beqw 00023026 <Lsubdf$0+0x72>
00022ff8 		lsrl #1,%d3
00022ffa 		btst #0,%d2
00022ffe 		beqw 00023006 <Lsubdf$0+0x52>
00023002 		bset #31,%d3
00023006 		lsrl #1,%d2
00023008 		btst #0,%d1
0002300c 		beqw 00023014 <Lsubdf$0+0x60>
00023010 		bset #31,%d2
00023014 		lsrl #1,%d1
00023016 		btst #0,%d0
0002301a 		beqw 00023022 <Lsubdf$0+0x6e>
0002301e 		bset #31,%d1
00023022 		lsrl #1,%d0
00023024 		addql #1,%d4
00023026 		lea 0002304e <Lsubdf$1>,%a0
0002302c 		lea 00030838 <_fpCCR>,%a1
00023032 		clrl %d6
00023034 		movew %a1@(6),%d6
00023038 		beqw 000237aa <Lround$to$nearest>
0002303c 		cmpil #2,%d6
00023042 		bhiw 0002382a <Lround$to$minus>
00023046 		bltw 0002382a <Lround$to$minus>
0002304a 		braw 0002382a <Lround$to$minus>
0002304e <Lsubdf$1>	bclr #52,%d0
00023052 		lsll #4,%d4
00023054 		swap %d0
00023056 		orl %d4,%d0
00023058 		swap %d0
0002305a 		braw 000230fa <Ladddf$ret>
0002305e <Ladddf$a$small>	moveal %sp@+,%a4
00023060 		moveal %sp@+,%a3
00023062 		moveal %sp@+,%a2
00023064 		movel %fp@(16),%d0
00023068 		movel %fp@(20),%d1
0002306c 		lea 00030838 <_fpCCR>,%a0
00023072 		movew #0,%a0@
00023076 		moveml %sp@,%d2-%d7
0002307a 		unlk %fp
0002307c 		rts
0002307e <Ladddf$b$small>	moveal %sp@+,%a4
00023080 		moveal %sp@+,%a3
00023082 		moveal %sp@+,%a2
00023084 		movel %fp@(8),%d0
00023088 		movel %fp@(12),%d1
0002308c 		lea 00030838 <_fpCCR>,%a0
00023092 		movew #0,%a0@
00023096 		moveml %sp@,%d2-%d7
0002309a 		unlk %fp
0002309c 		rts
0002309e <Ladddf$a$den>	movel %d7,%d4
000230a0 		braw 00022d66 <Ladddf$1>
000230a4 <Ladddf$b$den>	movel %d7,%d5
000230a6 		notl %d6
000230a8 		braw 00022d7e <Ladddf$2>
000230ac <Ladddf$b>	movel %d2,%d0
000230ae 		movel %d3,%d1
000230b0 		braw 000230bc <Ladddf$a+0x8>
000230b4 <Ladddf$a>	movel %fp@(8),%d0
000230b8 		movel %fp@(12),%d1
000230bc 		movew #1,%d5
000230c0 		movel %d0,%d7
000230c2 		andil #-2147483648,%d7
000230c8 		bclr #31,%d0
000230cc 		cmpil #2146435072,%d0
000230d2 		bgew 000230e4 <Ladddf$a+0x30>
000230d6 		movel %d0,%d0
000230d8 		bnew 000230fa <Ladddf$ret>
000230dc 		bclr #31,%d7
000230e0 		braw 000230fa <Ladddf$ret>
000230e4 		andil #1048575,%d0
000230ea 		orl %d1,%d0
000230ec 		bnew 00022cdc <Ld$inop>
000230f0 		braw 00022cb6 <Ld$infty>
000230f4 <Ladddf$ret$1>	moveal %sp@+,%a4
000230f6 		moveal %sp@+,%a3
000230f8 		moveal %sp@+,%a2
000230fa <Ladddf$ret>	lea 00030838 <_fpCCR>,%a0
00023100 		movew #0,%a0@
00023104 		orl %d7,%d0
00023106 		moveml %sp@,%d2-%d7
0002310a 		unlk %fp
0002310c 		rts
0002310e <Ladddf$ret$den>	lsrl #1,%d1
00023110 		btst #0,%d0
00023114 		beqw 0002311c <Ladddf$ret$den+0xe>
00023118 		bset #31,%d1
0002311c 		lsrl #1,%d0
0002311e 		braw 000230fa <Ladddf$ret>
00023122 <Ladddf$nf>	movew #1,%d5
00023126 		movel %fp@(8),%d0
0002312a 		movel %fp@(12),%d1
0002312e 		movel %fp@(16),%d2
00023132 		movel %fp@(20),%d3
00023136 		movel #2146435072,%d4
0002313c 		movel %d0,%d7
0002313e 		movel %d2,%d6
00023140 		bclr #31,%d0
00023144 		bclr #31,%d2
00023148 		cmpl %d4,%d0
0002314a 		bhiw 00022cdc <Ld$inop>
0002314e 		bnew 00023158 <Ladddf$nf+0x36>
00023152 		tstl %d1
00023154 		bnew 00022cdc <Ld$inop>
00023158 		cmpl %d4,%d2
0002315a 		bhiw 00022cdc <Ld$inop>
0002315e 		bnew 00023168 <Ladddf$nf+0x46>
00023162 		tstl %d3
00023164 		bnew 00022cdc <Ld$inop>
00023168 		eorl %d7,%d6
0002316a 		bmiw 00023178 <Ladddf$nf+0x56>
0002316e 		andil #-2147483648,%d7
00023174 		braw 00022cb6 <Ld$infty>
00023178 		cmpl %d2,%d0
0002317a 		bnew 00023184 <Ladddf$nf+0x62>
0002317e 		cmpl %d3,%d1
00023180 		beqw 00022cdc <Ld$inop>
00023184 		andil #-2147483648,%d7
0002318a 		cmpl %d4,%d0
0002318c 		beqw 00022cb6 <Ld$infty>
00023190 		bchg #31,%d7
00023194 		braw 00022cb6 <Ld$infty>
00023198 <__muldf3>	linkw %fp,#-24
0002319c 		moveml %d2-%d7,%sp@
000231a0 		movel %fp@(8),%d0
000231a4 		movel %fp@(12),%d1
000231a8 		movel %fp@(16),%d2
000231ac 		movel %fp@(20),%d3
000231b0 		movel %d0,%d7
000231b2 		eorl %d2,%d7
000231b4 		andil #-2147483648,%d7
000231ba 		moveal %d7,%a0
000231bc 		movel #2146435072,%d7
000231c2 		movel %d7,%d6
000231c4 		notl %d6
000231c6 		bclr #31,%d0
000231ca 		movel %d0,%d4
000231cc 		orl %d1,%d4
000231ce 		beqw 0002332c <Lmuldf$a$0>
000231d2 		movel %d0,%d4
000231d4 		bclr #31,%d2
000231d8 		movel %d2,%d5
000231da 		orl %d3,%d5
000231dc 		beqw 00023318 <Lmuldf$b$0>
000231e0 		movel %d2,%d5
000231e2 		cmpl %d7,%d0
000231e4 		bhiw 000232f0 <Lmuldf$inop>
000231e8 		beqw 00023308 <Lmuldf$a$nf>
000231ec 		cmpl %d7,%d2
000231ee 		bhiw 000232f0 <Lmuldf$inop>
000231f2 		beqw 000232f8 <Lmuldf$b$nf>
000231f6 		andl %d7,%d4
000231f8 		beqw 00023354 <Lmuldf$a$den>
000231fc 		andl %d6,%d0
000231fe 		oril #1048576,%d0
00023204 		swap %d4
00023206 		lsrl #4,%d4
00023208 <Lmuldf$1>	andl %d7,%d5
0002320a 		beqw 0002336a <Lmuldf$b$den>
0002320e 		andl %d6,%d2
00023210 		oril #1048576,%d2
00023216 		swap %d5
00023218 		lsrl #4,%d5
0002321a <Lmuldf$2>	addl %d5,%d4
0002321c 		subil #1023,%d4
00023222 		movel %a2,%sp@-
00023224 		movel %a3,%sp@-
00023226 		movel %a4,%sp@-
00023228 		moveal #0,%a2
0002322e 		moveal %d4,%a3
00023230 		moveq #11,%d7
00023232 		lsll %d7,%d2
00023234 		movel %d3,%d6
00023236 		lsll %d7,%d3
00023238 		andil #-2097152,%d6
0002323e 		moveq #21,%d7
00023240 		lsrl %d7,%d6
00023242 		orl %d6,%d2
00023244 		movel %d2,%d6
00023246 		movel %d3,%d7
00023248 		movel %d0,%d4
0002324a 		movel %d1,%d5
0002324c 		moveq #0,%d3
0002324e 		movel %d3,%d2
00023250 		movel %d3,%d1
00023252 		movel %d3,%d0
00023254 		moveal #52,%a1
0002325a 		moveal %d7,%a4
0002325c 		movel %a1,%d7
0002325e 		moveal %a4,%a1
00023260 		moveal %d7,%a4
00023262 		movel %a1,%d7
00023264 		moveal %a4,%a1
00023266 		addl %d3,%d3
00023268 		addxl %d2,%d2
0002326a 		addxl %d1,%d1
0002326c 		addxl %d0,%d0
0002326e 		addl %d7,%d7
00023270 		addxl %d6,%d6
00023272 		bccw 0002328a <Lmuldf$2+0x70>
00023276 		moveal %d7,%a4
00023278 		movel %a2,%d7
0002327a 		moveal %a4,%a2
0002327c 		addl %d5,%d3
0002327e 		addxl %d4,%d2
00023280 		addxl %d7,%d1
00023282 		addxl %d7,%d0
00023284 		moveal %d7,%a4
00023286 		movel %a2,%d7
00023288 		moveal %a4,%a2
0002328a 		moveal %d7,%a4
0002328c 		movel %a1,%d7
0002328e 		moveal %a4,%a1
00023290 		subql #1,%d7
00023292 		bplw 00023260 <Lmuldf$2+0x46>
00023296 		movel %a3,%d4
00023298 		moveal %sp@+,%a4
0002329a 		moveal %sp@+,%a3
0002329c 		moveal %sp@+,%a2
0002329e 		swap %d0
000232a0 		swap %d1
000232a2 		movew %d1,%d0
000232a4 		swap %d2
000232a6 		movew %d2,%d1
000232a8 		swap %d3
000232aa 		movew %d3,%d2
000232ac 		movew #0,%d3
000232b0 		moveq #29,%d6
000232b2 		lsrl #3,%d3
000232b4 		movel %d2,%d7
000232b6 		lsll %d6,%d7
000232b8 		orl %d7,%d3
000232ba 		lsrl #3,%d2
000232bc 		movel %d1,%d7
000232be 		lsll %d6,%d7
000232c0 		orl %d7,%d2
000232c2 		lsrl #3,%d1
000232c4 		movel %d0,%d7
000232c6 		lsll %d6,%d7
000232c8 		orl %d7,%d1
000232ca 		lsrl #3,%d0
000232cc 		movel %a0,%d7
000232ce 		movew #2,%d5
000232d2 		btst #22,%d0
000232d6 		beqw 000235aa <Lround$exit>
000232da 		lsrl #1,%d1
000232dc 		btst #0,%d0
000232e0 		beqw 000232e8 <Lmuldf$2+0xce>
000232e4 		bset #31,%d1
000232e8 		lsrl #1,%d0
000232ea 		addql #1,%d4
000232ec 		braw 000235aa <Lround$exit>
000232f0 <Lmuldf$inop>	movew #2,%d5
000232f4 		braw 00022cdc <Ld$inop>
000232f8 <Lmuldf$b$nf>	movew #2,%d5
000232fc 		movel %a0,%d7
000232fe 		tstl %d3
00023300 		bnew 00022cdc <Ld$inop>
00023304 		braw 00022cb6 <Ld$infty>
00023308 <Lmuldf$a$nf>	movew #2,%d5
0002330c 		movel %a0,%d7
0002330e 		tstl %d1
00023310 		bnew 00022cdc <Ld$inop>
00023314 		braw 00022cb6 <Ld$infty>
00023318 <Lmuldf$b$0>	movew #2,%d5
0002331c 		movel %d2,%d7
0002331e 		movel %d0,%d2
00023320 		movel %d7,%d0
00023322 		movel %d3,%d7
00023324 		movel %d1,%d3
00023326 		movel %d7,%d1
00023328 		braw 00023338 <Lmuldf$a$0+0xc>
0002332c <Lmuldf$a$0>	movel %fp@(16),%d2
00023330 		movel %fp@(20),%d3
00023334 		bclr #31,%d2
00023338 		cmpil #2146435072,%d2
0002333e 		bgew 00022cdc <Ld$inop>
00023342 		lea 00030838 <_fpCCR>,%a0
00023348 		movew #0,%a0@
0002334c 		moveml %sp@,%d2-%d7
00023350 		unlk %fp
00023352 		rts
00023354 <Lmuldf$a$den>	moveq #1,%d4
00023356 		andl %d6,%d0
00023358 		addl %d1,%d1
0002335a 		addxl %d0,%d0
0002335c 		subql #1,%d4
0002335e 		btst #20,%d0
00023362 		bnew 00023208 <Lmuldf$1>
00023366 		braw 00023358 <Lmuldf$a$den+0x4>
0002336a <Lmuldf$b$den>	moveq #1,%d5
0002336c 		andl %d6,%d2
0002336e 		addl %d3,%d3
00023370 		addxl %d2,%d2
00023372 		subql #1,%d5
00023374 		btst #20,%d2
00023378 		bnew 0002321a <Lmuldf$2>
0002337c 		braw 0002336e <Lmuldf$b$den+0x4>
00023380 <__divdf3>	linkw %fp,#-24
00023384 		moveml %d2-%d7,%sp@
00023388 		movel %fp@(8),%d0
0002338c 		movel %fp@(12),%d1
00023390 		movel %fp@(16),%d2
00023394 		movel %fp@(20),%d3
00023398 		movel %d0,%d7
0002339a 		eorl %d2,%d7
0002339c 		andil #-2147483648,%d7
000233a2 		moveal %d7,%a0
000233a4 		movel #2146435072,%d7
000233aa 		movel %d7,%d6
000233ac 		notl %d6
000233ae 		bclr #31,%d0
000233b2 		movel %d0,%d4
000233b4 		orl %d1,%d4
000233b6 		beqw 00023502 <Ldivdf$a$0>
000233ba 		movel %d0,%d4
000233bc 		bclr #31,%d2
000233c0 		movel %d2,%d5
000233c2 		orl %d3,%d5
000233c4 		beqw 0002353c <Ldivdf$b$0>
000233c8 		movel %d2,%d5
000233ca 		cmpl %d7,%d0
000233cc 		bhiw 000234fa <Ldivdf$inop>
000233d0 		beqw 00023564 <Ldivdf$a$nf>
000233d4 		cmpl %d7,%d2
000233d6 		bhiw 000234fa <Ldivdf$inop>
000233da 		beqw 00023556 <Ldivdf$b$nf>
000233de 		andl %d7,%d4
000233e0 		beqw 0002357e <Ldivdf$a$den>
000233e4 		andl %d6,%d0
000233e6 		oril #1048576,%d0
000233ec 		swap %d4
000233ee 		lsrl #4,%d4
000233f0 <Ldivdf$1>	andl %d7,%d5
000233f2 		beqw 00023594 <Ldivdf$b$den>
000233f6 		andl %d6,%d2
000233f8 		oril #1048576,%d2
000233fe 		swap %d5
00023400 		lsrl #4,%d5
00023402 <Ldivdf$2>	subl %d5,%d4
00023404 		addil #1022,%d4
0002340a 		moveq #0,%d6
0002340c 		movel %d6,%d7
0002340e 		moveal #0,%a1
00023414 		moveq #22,%d5
00023416 		cmpl %d0,%d2
00023418 		bhiw 00023426 <Ldivdf$2+0x24>
0002341c 		beqw 00023434 <Ldivdf$2+0x32>
00023420 		subl %d3,%d1
00023422 		subxl %d2,%d0
00023424 		bset %d5,%d6
00023426 		addl %d1,%d1
00023428 		addxl %d0,%d0
0002342a 		subql #1,%d5
0002342c 		bplw 00023416 <Ldivdf$2+0x14>
00023430 		braw 0002343e <Ldivdf$2+0x3c>
00023434 		cmpl %d1,%d3
00023436 		bhiw 00023426 <Ldivdf$2+0x24>
0002343a 		braw 00023420 <Ldivdf$2+0x1e>
0002343e 		moveq #31,%d5
00023440 		cmpl %d0,%d2
00023442 		bhiw 00023450 <Ldivdf$2+0x4e>
00023446 		beqw 0002345e <Ldivdf$2+0x5c>
0002344a 		subl %d3,%d1
0002344c 		subxl %d2,%d0
0002344e 		bset %d5,%d7
00023450 		addl %d1,%d1
00023452 		addxl %d0,%d0
00023454 		subql #1,%d5
00023456 		bplw 00023440 <Ldivdf$2+0x3e>
0002345a 		braw 00023468 <Ldivdf$2+0x66>
0002345e 		cmpl %d1,%d3
00023460 		bhiw 00023450 <Ldivdf$2+0x4e>
00023464 		braw 0002344a <Ldivdf$2+0x48>
00023468 		moveq #53,%d5
0002346a 		cmpl %d2,%d0
0002346c 		bhiw 0002348c <Ldivdf$2+0x8a>
00023470 		beqw 00023486 <Ldivdf$2+0x84>
00023474 		addl %d1,%d1
00023476 		addxl %d0,%d0
00023478 		subql #1,%d5
0002347a 		bplw 0002346a <Ldivdf$2+0x68>
0002347e 		moveq #0,%d2
00023480 		movel %d2,%d3
00023482 		braw 000234b4 <Ldivdf$2+0xb2>
00023486 		cmpl %d1,%d3
00023488 		bhiw 00023474 <Ldivdf$2+0x72>
0002348c 		moveq #0,%d2
0002348e 		movel %d2,%d3
00023490 		subil #53,%d5
00023496 		addil #63,%d5
0002349c 		cmpil #31,%d5
000234a2 		bhiw 000234b2 <Ldivdf$2+0xb0>
000234a6 		bset %d5,%d3
000234a8 		braw 000234b4 <Ldivdf$2+0xb2>
000234ac 		subil #32,%d5
000234b2 		bset %d5,%d2
000234b4 		movel %d6,%d0
000234b6 		movel %d7,%d1
000234b8 		moveq #0,%d3
000234ba 		btst #22,%d0
000234be 		beqw 000234f0 <Ldivdf$2+0xee>
000234c2 		lsrl #1,%d3
000234c4 		btst #0,%d2
000234c8 		beqw 000234d0 <Ldivdf$2+0xce>
000234cc 		bset #31,%d3
000234d0 		lsrl #1,%d2
000234d2 		btst #0,%d1
000234d6 		beqw 000234de <Ldivdf$2+0xdc>
000234da 		bset #31,%d2
000234de 		lsrl #1,%d1
000234e0 		btst #0,%d0
000234e4 		beqw 000234ec <Ldivdf$2+0xea>
000234e8 		bset #31,%d1
000234ec 		lsrl #1,%d0
000234ee 		addql #1,%d4
000234f0 		movel %a0,%d7
000234f2 		movew #3,%d5
000234f6 		braw 000235aa <Lround$exit>
000234fa <Ldivdf$inop>	movew #3,%d5
000234fe 		braw 00022cdc <Ld$inop>
00023502 <Ldivdf$a$0>	movew #3,%d5
00023506 		bclr #31,%d2
0002350a 		movel %d2,%d4
0002350c 		orl %d3,%d4
0002350e 		beqw 00022cdc <Ld$inop>
00023512 		cmpil #2146435072,%d2
00023518 		bhiw 00022cdc <Ld$inop>
0002351c 		bltw 00023526 <Ldivdf$a$0+0x24>
00023520 		tstl %d3
00023522 		bnew 00022cdc <Ld$inop>
00023526 		moveq #0,%d0
00023528 		movel %d0,%d1
0002352a 		lea 00030838 <_fpCCR>,%a0
00023530 		movew #0,%a0@
00023534 		moveml %sp@,%d2-%d7
00023538 		unlk %fp
0002353a 		rts
0002353c <Ldivdf$b$0>	movew #3,%d5
00023540 		movel %a0,%d7
00023542 		cmpil #2146435072,%d0
00023548 		bhiw 00022cdc <Ld$inop>
0002354c 		tstl %d1
0002354e 		bnew 00022cdc <Ld$inop>
00023552 		braw 00022cec <Ld$div$0>
00023556 <Ldivdf$b$nf>	movew #3,%d5
0002355a 		tstl %d3
0002355c 		bnew 00022cdc <Ld$inop>
00023560 		braw 00022ccc <Ld$underflow>
00023564 <Ldivdf$a$nf>	movew #3,%d5
00023568 		tstl %d1
0002356a 		bnew 00022cdc <Ld$inop>
0002356e 		cmpl %d7,%d2
00023570 		bgew 00022cdc <Ld$inop>
00023574 		tstl %d3
00023576 		bnew 00022cdc <Ld$inop>
0002357a 		braw 00022cb6 <Ld$infty>
0002357e <Ldivdf$a$den>	moveq #1,%d4
00023580 		andl %d6,%d0
00023582 		addl %d1,%d1
00023584 		addxl %d0,%d0
00023586 		subql #1,%d4
00023588 		btst #20,%d0
0002358c 		bnew 000233f0 <Ldivdf$1>
00023590 		braw 00023582 <Ldivdf$a$den+0x4>
00023594 <Ldivdf$b$den>	moveq #1,%d5
00023596 		andl %d6,%d2
00023598 		addl %d3,%d3
0002359a 		addxl %d2,%d2
0002359c 		subql #1,%d5
0002359e 		btst #20,%d2
000235a2 		bnew 00023402 <Ldivdf$2>
000235a6 		braw 00023598 <Ldivdf$b$den+0x4>
000235aa <Lround$exit>	cmpil #-54,%d4
000235b0 		bltw 00022ccc <Ld$underflow>
000235b4 		moveal %d7,%a0
000235b6 		moveq #0,%d6
000235b8 		movel %d6,%d7
000235ba 		cmpil #1,%d4
000235c0 		bgew 00023620 <Lround$exit+0x76>
000235c4 		addql #1,%d4
000235c6 		lsrl #1,%d7
000235c8 		btst #0,%d6
000235cc 		beqw 000235d4 <Lround$exit+0x2a>
000235d0 		bset #31,%d7
000235d4 		lsrl #1,%d6
000235d6 		btst #0,%d3
000235da 		beqw 000235e2 <Lround$exit+0x38>
000235de 		bset #31,%d6
000235e2 		lsrl #1,%d3
000235e4 		btst #0,%d2
000235e8 		beqw 000235f0 <Lround$exit+0x46>
000235ec 		bset #31,%d3
000235f0 		lsrl #1,%d2
000235f2 		btst #0,%d1
000235f6 		beqw 000235fe <Lround$exit+0x54>
000235fa 		bset #31,%d2
000235fe 		lsrl #1,%d1
00023600 		btst #0,%d0
00023604 		beqw 0002360c <Lround$exit+0x62>
00023608 		bset #31,%d1
0002360c 		lsrl #1,%d0
0002360e 		cmpil #1,%d4
00023614 		beqw 00023620 <Lround$exit+0x76>
00023618 		braw 000235c4 <Lround$exit+0x1a>
0002361c 		braw 00022ccc <Ld$underflow>
00023620 		orl %d6,%d2
00023622 		orl %d7,%d3
00023624 		movel %a0,%d7
00023626 		lea 0002364e <Lround$0>,%a0
0002362c 		lea 00030838 <_fpCCR>,%a1
00023632 		clrl %d6
00023634 		movew %a1@(6),%d6
00023638 		beqw 000237aa <Lround$to$nearest>
0002363c 		cmpil #2,%d6
00023642 		bhiw 0002382a <Lround$to$minus>
00023646 		bltw 0002382a <Lround$to$minus>
0002364a 		braw 0002382a <Lround$to$minus>
0002364e <Lround$0>	cmpil #2047,%d4
00023654 		bgew 00022cb6 <Ld$infty>
00023658 		movew %d4,%d4
0002365a 		beqw 00022ca8 <Ld$den>
0002365e 		lsll #4,%d4
00023660 		bclr #20,%d0
00023664 		swap %d0
00023666 		orl %d4,%d0
00023668 		swap %d0
0002366a 		orl %d7,%d0
0002366c 		lea 00030838 <_fpCCR>,%a0
00023672 		movew #0,%a0@
00023676 		moveml %sp@,%d2-%d7
0002367a 		unlk %fp
0002367c 		rts
0002367e <__negdf2>	linkw %fp,#-24
00023682 		moveml %d2-%d7,%sp@
00023686 		movew #4,%d5
0002368a 		movel %fp@(8),%d0
0002368e 		movel %fp@(12),%d1
00023692 		bchg #31,%d0
00023696 		movel %d0,%d2
00023698 		bclr #31,%d2
0002369c 		movel %d2,%d4
0002369e 		orl %d1,%d4
000236a0 		beqw 000236d6 <__negdf2+0x58>
000236a4 		cmpil #2146435072,%d2
000236aa 		bltw 000236c4 <__negdf2+0x46>
000236ae 		bhiw 00022cdc <Ld$inop>
000236b2 		tstl %d1
000236b4 		bnew 00022cdc <Ld$inop>
000236b8 		movel %d0,%d7
000236ba 		andil #-2147483648,%d7
000236c0 		braw 00022cb6 <Ld$infty>
000236c4 		lea 00030838 <_fpCCR>,%a0
000236ca 		movew #0,%a0@
000236ce 		moveml %sp@,%d2-%d7
000236d2 		unlk %fp
000236d4 		rts
000236d6 		bclr #31,%d0
000236da 		braw 000236c4 <__negdf2+0x46>
000236de <__cmpdf2>	linkw %fp,#-24
000236e2 		moveml %d2-%d7,%sp@
000236e6 		movew #5,%d5
000236ea 		movel %fp@(8),%d0
000236ee 		movel %fp@(12),%d1
000236f2 		movel %fp@(16),%d2
000236f6 		movel %fp@(20),%d3
000236fa 		movel %d0,%d6
000236fc 		bclr #31,%d0
00023700 		movel %d2,%d7
00023702 		bclr #31,%d2
00023706 		cmpil #2147418112,%d0
0002370c 		bhiw 00022cdc <Ld$inop>
00023710 		beqw 00023796 <Lcmpdf$a$nf>
00023714 		movel %d0,%d4
00023716 		orl %d1,%d4
00023718 		beqw 00023786 <Lcmpdf$a$0>
0002371c <Lcmpdf$0>	cmpil #2147418112,%d2
00023722 		bhiw 00022cdc <Ld$inop>
00023726 		beqw 000237a0 <Lcmpdf$b$nf>
0002372a 		movel %d2,%d4
0002372c 		orl %d3,%d4
0002372e 		beqw 0002378e <Lcmpdf$b$0>
00023732 <Lcmpdf$1>	eorl %d6,%d7
00023734 		bplw 00023742 <Lcmpdf$1+0x10>
00023738 		tstl %d6
0002373a 		bplw 00023772 <Lcmpdf$a$gt$b>
0002373e 		bmiw 0002377c <Lcmpdf$b$gt$a>
00023742 		tstl %d6
00023744 		bplw 00023754 <Lcmpdf$1+0x22>
00023748 		movel %d0,%d7
0002374a 		movel %d2,%d0
0002374c 		movel %d7,%d2
0002374e 		movel %d1,%d7
00023750 		movel %d3,%d1
00023752 		movel %d7,%d3
00023754 		cmpl %d0,%d2
00023756 		bhiw 0002377c <Lcmpdf$b$gt$a>
0002375a 		bnew 00023772 <Lcmpdf$a$gt$b>
0002375e 		cmpl %d1,%d3
00023760 		bhiw 0002377c <Lcmpdf$b$gt$a>
00023764 		bnew 00023772 <Lcmpdf$a$gt$b>
00023768 		moveq #0,%d0
0002376a 		moveml %sp@,%d2-%d7
0002376e 		unlk %fp
00023770 		rts
00023772 <Lcmpdf$a$gt$b>	moveq #1,%d0
00023774 		moveml %sp@,%d2-%d7
00023778 		unlk %fp
0002377a 		rts
0002377c <Lcmpdf$b$gt$a>	moveq #-1,%d0
0002377e 		moveml %sp@,%d2-%d7
00023782 		unlk %fp
00023784 		rts
00023786 <Lcmpdf$a$0>	bclr #31,%d6
0002378a 		braw 0002371c <Lcmpdf$0>
0002378e <Lcmpdf$b$0>	bclr #31,%d7
00023792 		braw 00023732 <Lcmpdf$1>
00023796 <Lcmpdf$a$nf>	tstl %d1
00023798 		bnew 00022cdc <Ld$inop>
0002379c 		braw 0002371c <Lcmpdf$0>
000237a0 <Lcmpdf$b$nf>	tstl %d3
000237a2 		bnew 00022cdc <Ld$inop>
000237a6 		braw 00023732 <Lcmpdf$1>
000237aa <Lround$to$nearest>	btst #21,%d0
000237ae 		bnew 000237ca <Lround$to$nearest+0x20>
000237b2 		cmpil #1,%d4
000237b8 		beqw 000237ca <Lround$to$nearest+0x20>
000237bc 		addl %d3,%d3
000237be 		addxl %d2,%d2
000237c0 		addxl %d1,%d1
000237c2 		addxl %d0,%d0
000237c4 		subql #1,%d4
000237c6 		bplw 000237aa <Lround$to$nearest>
000237ca 		btst #0,%d1
000237ce 		beqw 000237f2 <Lround$to$nearest+0x48>
000237d2 		orl %d2,%d3
000237d4 		bnew 000237ea <Lround$to$nearest+0x40>
000237d8 		movel %d1,%d3
000237da 		andil #2,%d3
000237e0 		moveq #0,%d2
000237e2 		addl %d3,%d1
000237e4 		addxl %d2,%d0
000237e6 		braw 000237f2 <Lround$to$nearest+0x48>
000237ea 		moveq #1,%d3
000237ec 		moveq #0,%d2
000237ee 		addl %d3,%d1
000237f0 		addxl %d2,%d0
000237f2 		lsrl #1,%d1
000237f4 		btst #0,%d0
000237f8 		beqw 00023800 <Lround$to$nearest+0x56>
000237fc 		bset #31,%d1
00023800 		lsrl #1,%d0
00023802 		btst #21,%d0
00023806 		beqw 0002381c <Lround$to$nearest+0x72>
0002380a 		lsrl #1,%d1
0002380c 		btst #0,%d0
00023810 		beqw 00023818 <Lround$to$nearest+0x6e>
00023814 		bset #31,%d1
00023818 		lsrl #1,%d0
0002381a 		addql #1,%d4
0002381c 		btst #20,%d0
00023820 		beqw 00023826 <Lround$to$nearest+0x7c>
00023824 		jmp %a0@
00023826 		moveq #0,%d4
00023828 		jmp %a0@
0002382a <Lround$to$minus>	jmp %a0@
0002382c <__fixunsdfsi>	linkw %fp,#0
00023830 		movel %d3,%sp@-
00023832 		movel %d2,%sp@-
00023834 		movel %fp@(8),%d2
00023838 		movel %fp@(12),%d3
0002383c 		clrl %sp@-
0002383e 		movel #1105199104,%sp@-
00023844 		movel %d3,%sp@-
00023846 		movel %d2,%sp@-
00023848 		jsr 000240d8 <__gedf2>
0002384e 		lea %sp@(16),%sp
00023852 		tstl %d0
00023854 		bges 00023862 <__fixunsdfsi+0x36>
00023856 		movel %d3,%sp@-
00023858 		movel %d2,%sp@-
0002385a 		jsr 00024272 <__fixdfsi>
00023860 		bras 00023888 <__fixunsdfsi+0x5c>
00023862 		clrl %sp@-
00023864 		movel #-1042284544,%sp@-
0002386a 		movel %d3,%sp@-
0002386c 		movel %d2,%sp@-
0002386e 		jsr 00022d08 <__adddf3>
00023874 		lea %sp@(16),%sp
00023878 		movel %d1,%sp@-
0002387a 		movel %d0,%sp@-
0002387c 		jsr 00024272 <__fixdfsi>
00023882 		addil #-2147483648,%d0
00023888 		movel %fp@(-8),%d2
0002388c 		movel %fp@(-4),%d3
00023890 		unlk %fp
00023892 		rts
00023894 <Lf$den>	orl %d7,%d0
00023896 		movew #3,%d7
0002389a 		moveq #1,%d6
0002389c 		jmp 0002406c <$_exception_handler>
000238a2 <Lf$infty>	movel #2139095040,%d0
000238a8 		orl %d7,%d0
000238aa 		movew #5,%d7
000238ae 		moveq #1,%d6
000238b0 		jmp 0002406c <$_exception_handler>
000238b6 <Lf$underflow>	moveq #0,%d0
000238b8 		movew #3,%d7
000238bc 		moveq #1,%d6
000238be 		jmp 0002406c <$_exception_handler>
000238c4 <Lf$inop>	moveq #-1,%d0
000238c6 		movew #17,%d7
000238ca 		moveq #1,%d6
000238cc 		jmp 0002406c <$_exception_handler>
000238d2 <Lf$div$0>	movel #2139095040,%d0
000238d8 		orl %d7,%d0
000238da 		movew #9,%d7
000238de 		moveq #1,%d6
000238e0 		jmp 0002406c <$_exception_handler>
000238e6 <__subsf3>	bchg #31,%sp@(8)
000238ec <__addsf3>	linkw %fp,#-24
000238f0 		moveml %d2-%d7,%sp@
000238f4 		movel %fp@(8),%d0
000238f8 		movel %fp@(12),%d1
000238fc 		movel %d0,%d6
000238fe 		addl %d0,%d0
00023900 		beqw 00023b14 <Laddsf$b>
00023904 		movel %d1,%d7
00023906 		addl %d1,%d1
00023908 		beqw 00023b1c <Laddsf$a>
0002390c 		moveal %d6,%a0
0002390e 		moveal %d7,%a1
00023910 		movel #16777215,%d4
00023916 		movel #16777216,%d5
0002391c 		movel %d0,%d6
0002391e 		andl %d4,%d0
00023920 		notl %d4
00023922 		andl %d4,%d6
00023924 		beqw 00023b02 <Laddsf$a$den>
00023928 		cmpl %d4,%d6
0002392a 		beqw 00023b70 <Laddsf$nf>
0002392e 		swap %d6
00023930 		orl %d5,%d0
00023932 <Laddsf$1>	movel %d1,%d7
00023934 		andl %d4,%d7
00023936 		beqw 00023b0a <Laddsf$b$den>
0002393a 		cmpl %d4,%d7
0002393c 		beqw 00023b70 <Laddsf$nf>
00023940 		swap %d7
00023942 		notl %d4
00023944 		andl %d4,%d1
00023946 		orl %d5,%d1
00023948 <Laddsf$2>	movel %d1,%d2
0002394a 		moveq #0,%d1
0002394c 		movel %d1,%d3
0002394e 		cmpl %d6,%d7
00023950 		beqw 000239f2 <Laddsf$3>
00023954 		bhiw 000239a4 <Laddsf$2+0x5c>
00023958 		subl %d6,%d7
0002395a 		negl %d7
0002395c 		lsrl #8,%d7
0002395e 		cmpil #26,%d7
00023964 		bgew 00023aec <Laddsf$b$small>
00023968 		cmpil #16,%d7
0002396e 		bgew 0002398e <Laddsf$2+0x46>
00023972 		subql #1,%d7
00023974 		lsrl #1,%d3
00023976 		btst #0,%d2
0002397a 		beqw 00023982 <Laddsf$2+0x3a>
0002397e 		bset #31,%d3
00023982 		lsrl #1,%d2
00023984 		subql #1,%d7
00023986 		bplw 00023974 <Laddsf$2+0x2c>
0002398a 		braw 000239f2 <Laddsf$3>
0002398e 		movew %d2,%d3
00023990 		swap %d3
00023992 		movew %d3,%d2
00023994 		swap %d2
00023996 		subil #16,%d7
0002399c 		bnew 00023972 <Laddsf$2+0x2a>
000239a0 		braw 000239f2 <Laddsf$3>
000239a4 		eorl %d6,%d7
000239a6 		eorl %d7,%d6
000239a8 		eorl %d6,%d7
000239aa 		subl %d6,%d7
000239ac 		negl %d7
000239ae 		lsrl #8,%d7
000239b0 		cmpil #26,%d7
000239b6 		bgew 00023ad6 <Laddsf$a$small>
000239ba 		cmpil #16,%d7
000239c0 		bgew 000239e0 <Laddsf$2+0x98>
000239c4 		subql #1,%d7
000239c6 		lsrl #1,%d1
000239c8 		btst #0,%d0
000239cc 		beqw 000239d4 <Laddsf$2+0x8c>
000239d0 		bset #31,%d1
000239d4 		lsrl #1,%d0
000239d6 		subql #1,%d7
000239d8 		bplw 000239c6 <Laddsf$2+0x7e>
000239dc 		braw 000239f2 <Laddsf$3>
000239e0 		movew %d0,%d1
000239e2 		swap %d1
000239e4 		movew %d1,%d0
000239e6 		swap %d0
000239e8 		subil #16,%d7
000239ee 		bnew 000239c4 <Laddsf$2+0x7c>
000239f2 <Laddsf$3>	movel %d6,%d4
000239f4 		movel %a0,%d6
000239f6 		moveal %d4,%a0
000239f8 		movel %d7,%d4
000239fa 		movel %a1,%d7
000239fc 		moveal %d4,%a1
000239fe 		eorl %d6,%d7
00023a00 		bmiw 00023a7c <Lsubsf$0>
00023a04 		movel %d6,%d4
00023a06 		movel %a0,%d6
00023a08 		moveal %d4,%a0
00023a0a 		movel %a0,%d7
00023a0c 		andil #-2147483648,%d7
00023a12 		addl %d3,%d1
00023a14 		addxl %d2,%d0
00023a16 		movel %d6,%d2
00023a18 		lsrl #8,%d2
00023a1a 		btst #25,%d0
00023a1e 		beqw 00023a34 <Laddsf$3+0x42>
00023a22 		lsrl #1,%d1
00023a24 		btst #0,%d0
00023a28 		beqw 00023a30 <Laddsf$3+0x3e>
00023a2c 		bset #31,%d1
00023a30 		lsrl #1,%d0
00023a32 		addql #1,%d2
00023a34 		lea 00023a5c <Laddsf$4>,%a0
00023a3a 		lea 00030838 <_fpCCR>,%a1
00023a40 		clrl %d6
00023a42 		movew %a1@(6),%d6
00023a46 		beqw 00024004 <Lround$to$nearest>
00023a4a 		cmpil #2,%d6
00023a50 		bhiw 0002405c <Lround$to$minus>
00023a54 		bltw 0002405c <Lround$to$minus>
00023a58 		braw 0002405c <Lround$to$minus>
00023a5c <Laddsf$4>	cmpil #255,%d2
00023a62 		bhiw 00023a74 <Laddsf$4+0x18>
00023a66 		bclr #23,%d0
00023a6a 		lsll #7,%d2
00023a6c 		swap %d2
00023a6e 		orl %d2,%d0
00023a70 		braw 00023b56 <Laddsf$ret>
00023a74 		movew #1,%d5
00023a78 		braw 000238a2 <Lf$infty>
00023a7c <Lsubsf$0>	movel %d6,%d7
00023a7e 		andil #-2147483648,%d7
00023a84 		subl %d3,%d1
00023a86 		subxl %d2,%d0
00023a88 		beqw 00023b56 <Laddsf$ret>
00023a8c 		bplw 00023a98 <Lsubsf$0+0x1c>
00023a90 		bchg #31,%d7
00023a94 		negl %d1
00023a96 		negxl %d0
00023a98 		movel %d2,%d4
00023a9a 		movel %a0,%d2
00023a9c 		moveal %d4,%a0
00023a9e 		lsrl #8,%d2
00023aa0 		lea 00023ac8 <Lsubsf$1>,%a0
00023aa6 		lea 00030838 <_fpCCR>,%a1
00023aac 		clrl %d6
00023aae 		movew %a1@(6),%d6
00023ab2 		beqw 00024004 <Lround$to$nearest>
00023ab6 		cmpil #2,%d6
00023abc 		bhiw 0002405c <Lround$to$minus>
00023ac0 		bltw 0002405c <Lround$to$minus>
00023ac4 		braw 0002405c <Lround$to$minus>
00023ac8 <Lsubsf$1>	bclr #23,%d0
00023acc 		lsll #7,%d2
00023ace 		swap %d2
00023ad0 		orl %d2,%d0
00023ad2 		braw 00023b56 <Laddsf$ret>
00023ad6 <Laddsf$a$small>	movel %fp@(12),%d0
00023ada 		lea 00030838 <_fpCCR>,%a0
00023ae0 		movew #0,%a0@
00023ae4 		moveml %sp@,%d2-%d7
00023ae8 		unlk %fp
00023aea 		rts
00023aec <Laddsf$b$small>	movel %fp@(8),%d0
00023af0 		lea 00030838 <_fpCCR>,%a0
00023af6 		movew #0,%a0@
00023afa 		moveml %sp@,%d2-%d7
00023afe 		unlk %fp
00023b00 		rts
00023b02 <Laddsf$a$den>	movel %d5,%d6
00023b04 		swap %d6
00023b06 		braw 00023932 <Laddsf$1>
00023b0a <Laddsf$b$den>	movel %d5,%d7
00023b0c 		swap %d7
00023b0e 		notl %d4
00023b10 		braw 00023948 <Laddsf$2>
00023b14 <Laddsf$b>	movel %fp@(12),%d0
00023b18 		braw 00023b20 <Laddsf$a+0x4>
00023b1c <Laddsf$a>	movel %fp@(8),%d0
00023b20 		movew #1,%d5
00023b24 		movel %d0,%d7
00023b26 		andil #-2147483648,%d7
00023b2c 		bclr #31,%d0
00023b30 		cmpil #2139095040,%d0
00023b36 		bgew 00023b48 <Laddsf$a+0x2c>
00023b3a 		movel %d0,%d0
00023b3c 		bnew 00023b56 <Laddsf$ret>
00023b40 		bclr #31,%d7
00023b44 		braw 00023b56 <Laddsf$ret>
00023b48 		andil #8388607,%d0
00023b4e 		bnew 000238c4 <Lf$inop>
00023b52 		braw 000238a2 <Lf$infty>
00023b56 <Laddsf$ret>	lea 00030838 <_fpCCR>,%a0
00023b5c 		movew #0,%a0@
00023b60 		orl %d7,%d0
00023b62 		moveml %sp@,%d2-%d7
00023b66 		unlk %fp
00023b68 		rts
00023b6a <Laddsf$ret$den>	lsrl #1,%d0
00023b6c 		braw 00023b56 <Laddsf$ret>
00023b70 <Laddsf$nf>	movew #1,%d5
00023b74 		movel %fp@(8),%d0
00023b78 		movel %fp@(12),%d1
00023b7c 		movel #2139095040,%d4
00023b82 		movel %d0,%d2
00023b84 		movel %d1,%d3
00023b86 		bclr #31,%d0
00023b8a 		bclr #31,%d1
00023b8e 		cmpl %d4,%d0
00023b90 		bhiw 000238c4 <Lf$inop>
00023b94 		cmpl %d4,%d1
00023b96 		bhiw 000238c4 <Lf$inop>
00023b9a 		eorl %d3,%d2
00023b9c 		bmiw 00023bac <Laddsf$nf+0x3c>
00023ba0 		movel %d0,%d7
00023ba2 		andil #-2147483648,%d7
00023ba8 		braw 000238a2 <Lf$infty>
00023bac 		cmpl %d1,%d0
00023bae 		beqw 000238c4 <Lf$inop>
00023bb2 		movel %d0,%d7
00023bb4 		andil #-2147483648,%d7
00023bba 		cmpl %d4,%d0
00023bbc 		beqw 000238a2 <Lf$infty>
00023bc0 		bchg #31,%d7
00023bc4 		braw 000238a2 <Lf$infty>
00023bc8 <__mulsf3>	linkw %fp,#-24
00023bcc 		moveml %d2-%d7,%sp@
00023bd0 		movel %fp@(8),%d0
00023bd4 		movel %fp@(12),%d1
00023bd8 		movel %d0,%d7
00023bda 		eorl %d1,%d7
00023bdc 		andil #-2147483648,%d7
00023be2 		movel #2139095040,%d6
00023be8 		movel %d6,%d5
00023bea 		notl %d5
00023bec 		movel #8388608,%d4
00023bf2 		bclr #31,%d0
00023bf6 		movel %d0,%d2
00023bf8 		beqw 00023cc8 <Lmulsf$a$0>
00023bfc 		bclr #31,%d1
00023c00 		movel %d1,%d3
00023c02 		beqw 00023cbe <Lmulsf$b$0>
00023c06 		cmpl %d6,%d0
00023c08 		bhiw 00023ca0 <Lmulsf$inop>
00023c0c 		beqw 00023cb0 <Lmulsf$inf>
00023c10 		cmpl %d6,%d1
00023c12 		bhiw 00023ca0 <Lmulsf$inop>
00023c16 		beqw 00023ca8 <Lmulsf$overflow>
00023c1a 		andl %d6,%d2
00023c1c 		beqw 00023cec <Lmulsf$a$den>
00023c20 		andl %d5,%d0
00023c22 		orl %d4,%d0
00023c24 		swap %d2
00023c26 		lsrl #7,%d2
00023c28 <Lmulsf$1>	andl %d6,%d3
00023c2a 		beqw 00023d00 <Lmulsf$b$den>
00023c2e 		andl %d5,%d1
00023c30 		orl %d4,%d1
00023c32 		swap %d3
00023c34 		lsrl #7,%d3
00023c36 <Lmulsf$2>	addl %d3,%d2
00023c38 		subil #127,%d2
00023c3e 		movel %d1,%d6
00023c40 		movel %d0,%d5
00023c42 		moveq #0,%d4
00023c44 		movel %d4,%d1
00023c46 		movel %d4,%d0
00023c48 		lsll #8,%d6
00023c4a 		movew #23,%d3
00023c4e 		addl %d1,%d1
00023c50 		addxl %d0,%d0
00023c52 		lsll #1,%d6
00023c54 		bccw 00023c5c <Lmulsf$2+0x26>
00023c58 		addl %d5,%d1
00023c5a 		addxl %d4,%d0
00023c5c 		subql #1,%d3
00023c5e 		bplw 00023c4e <Lmulsf$2+0x18>
00023c62 		movel %d1,%d3
00023c64 		lsll #8,%d1
00023c66 		addl %d1,%d1
00023c68 		addl %d1,%d1
00023c6a 		moveq #22,%d5
00023c6c 		lsrl %d5,%d3
00023c6e 		orl %d3,%d1
00023c70 		andil #-768,%d1
00023c76 		lsll #8,%d0
00023c78 		addl %d0,%d0
00023c7a 		addl %d0,%d0
00023c7c 		orl %d3,%d0
00023c7e 		movew #2,%d5
00023c82 		btst #25,%d0
00023c86 		beqw 00023e7a <Lround$exit>
00023c8a 		lsrl #1,%d1
00023c8c 		btst #0,%d0
00023c90 		beqw 00023c98 <Lmulsf$2+0x62>
00023c94 		bset #31,%d1
00023c98 		lsrl #1,%d0
00023c9a 		addql #1,%d2
00023c9c 		braw 00023e7a <Lround$exit>
00023ca0 <Lmulsf$inop>	movew #2,%d5
00023ca4 		braw 000238c4 <Lf$inop>
00023ca8 <Lmulsf$overflow>	movew #2,%d5
00023cac 		braw 000238a2 <Lf$infty>
00023cb0 <Lmulsf$inf>	movew #2,%d5
00023cb4 		cmpl %d6,%d1
00023cb6 		bhiw 000238c4 <Lf$inop>
00023cba 		braw 000238a2 <Lf$infty>
00023cbe <Lmulsf$b$0>	movel %d1,%d0
00023cc0 		movel %fp@(8),%d1
00023cc4 		braw 00023ccc <Lmulsf$a$0+0x4>
00023cc8 <Lmulsf$a$0>	movel %fp@(12),%d1
00023ccc 		bclr #31,%d1
00023cd0 		cmpil #2139095040,%d1
00023cd6 		bgew 000238c4 <Lf$inop>
00023cda 		lea 00030838 <_fpCCR>,%a0
00023ce0 		movew #0,%a0@
00023ce4 		moveml %sp@,%d2-%d7
00023ce8 		unlk %fp
00023cea 		rts
00023cec <Lmulsf$a$den>	moveq #1,%d2
00023cee 		andl %d5,%d0
00023cf0 		addl %d0,%d0
00023cf2 		subql #1,%d2
00023cf4 		btst #23,%d0
00023cf8 		bnew 00023c28 <Lmulsf$1>
00023cfc 		braw 00023cf0 <Lmulsf$a$den+0x4>
00023d00 <Lmulsf$b$den>	moveq #1,%d3
00023d02 		andl %d5,%d1
00023d04 		addl %d1,%d1
00023d06 		subql #1,%d3
00023d08 		btst #23,%d1
00023d0c 		bnew 00023c36 <Lmulsf$2>
00023d10 		braw 00023d04 <Lmulsf$b$den+0x4>
00023d14 <__divsf3>	linkw %fp,#-24
00023d18 		moveml %d2-%d7,%sp@
00023d1c 		movel %fp@(8),%d0
00023d20 		movel %fp@(12),%d1
00023d24 		movel %d0,%d7
00023d26 		eorl %d1,%d7
00023d28 		andil #-2147483648,%d7
00023d2e 		movel #2139095040,%d6
00023d34 		movel %d6,%d5
00023d36 		notl %d5
00023d38 		movel #8388608,%d4
00023d3e 		bclr #31,%d0
00023d42 		movel %d0,%d2
00023d44 		beqw 00023e02 <Ldivsf$a$0>
00023d48 		bclr #31,%d1
00023d4c 		movel %d1,%d3
00023d4e 		beqw 00023e2e <Ldivsf$b$0>
00023d52 		cmpl %d6,%d0
00023d54 		bhiw 00023dea <Ldivsf$inop>
00023d58 		beqw 00023e40 <Ldivsf$inf>
00023d5c 		cmpl %d6,%d1
00023d5e 		bhiw 00023dea <Ldivsf$inop>
00023d62 		beqw 00023dfa <Ldivsf$underflow>
00023d66 		andl %d6,%d2
00023d68 		beqw 00023e52 <Ldivsf$a$den>
00023d6c 		andl %d5,%d0
00023d6e 		orl %d4,%d0
00023d70 		swap %d2
00023d72 		lsrl #7,%d2
00023d74 <Ldivsf$1>	andl %d6,%d3
00023d76 		beqw 00023e66 <Ldivsf$b$den>
00023d7a 		andl %d5,%d1
00023d7c 		orl %d4,%d1
00023d7e 		swap %d3
00023d80 		lsrl #7,%d3
00023d82 <Ldivsf$2>	subl %d3,%d2
00023d84 		addil #126,%d2
00023d8a 		moveal %d7,%a0
00023d8c 		moveq #0,%d6
00023d8e 		movel %d6,%d7
00023d90 		movew #25,%d3
00023d94 		cmpl %d0,%d1
00023d96 		bhiw 00023da2 <Ldivsf$2+0x20>
00023d9a 		bset %d3,%d6
00023d9c 		subl %d1,%d0
00023d9e 		beqw 00023dd2 <Ldivsf$2+0x50>
00023da2 		addl %d0,%d0
00023da4 		subql #1,%d3
00023da6 		bplw 00023d94 <Ldivsf$2+0x12>
00023daa 		movew #24,%d3
00023dae 		cmpl %d0,%d1
00023db0 		blew 00023dc2 <Ldivsf$2+0x40>
00023db4 		addl %d0,%d0
00023db6 		subql #1,%d3
00023db8 		bplw 00023dae <Ldivsf$2+0x2c>
00023dbc 		moveq #0,%d1
00023dbe 		braw 00023dd2 <Ldivsf$2+0x50>
00023dc2 		moveq #0,%d1
00023dc4 		subil #24,%d3
00023dca 		addil #31,%d3
00023dd0 		bset %d3,%d1
00023dd2 		movel %d6,%d0
00023dd4 		movel %a0,%d7
00023dd6 		btst #25,%d0
00023dda 		beqw 00023de2 <Ldivsf$2+0x60>
00023dde 		lsrl #1,%d0
00023de0 		addql #1,%d2
00023de2 		movew #3,%d5
00023de6 		braw 00023e7a <Lround$exit>
00023dea <Ldivsf$inop>	movew #3,%d5
00023dee 		braw 000238c4 <Lf$inop>
00023df2 <Ldivsf$overflow>	movew #3,%d5
00023df6 		braw 000238a2 <Lf$infty>
00023dfa <Ldivsf$underflow>	movew #3,%d5
00023dfe 		braw 000238b6 <Lf$underflow>
00023e02 <Ldivsf$a$0>	movew #3,%d5
00023e06 		andil #2147483647,%d1
00023e0c 		beqw 000238c4 <Lf$inop>
00023e10 		cmpil #2139095040,%d1
00023e16 		bhiw 000238c4 <Lf$inop>
00023e1a 		moveq #0,%d0
00023e1c 		lea 00030838 <_fpCCR>,%a0
00023e22 		movew #0,%a0@
00023e26 		moveml %sp@,%d2-%d7
00023e2a 		unlk %fp
00023e2c 		rts
00023e2e <Ldivsf$b$0>	movew #3,%d5
00023e32 		cmpil #2139095040,%d0
00023e38 		bhiw 000238c4 <Lf$inop>
00023e3c 		braw 000238d2 <Lf$div$0>
00023e40 <Ldivsf$inf>	movew #3,%d5
00023e44 		cmpil #2139095040,%d1
00023e4a 		bgew 000238c4 <Lf$inop>
00023e4e 		braw 000238a2 <Lf$infty>
00023e52 <Ldivsf$a$den>	moveq #1,%d2
00023e54 		andl %d5,%d0
00023e56 		addl %d0,%d0
00023e58 		subql #1,%d2
00023e5a 		btst #23,%d0
00023e5e 		bnew 00023d74 <Ldivsf$1>
00023e62 		braw 00023e56 <Ldivsf$a$den+0x4>
00023e66 <Ldivsf$b$den>	moveq #1,%d3
00023e68 		andl %d5,%d1
00023e6a 		addl %d1,%d1
00023e6c 		subql #1,%d3
00023e6e 		btst #23,%d1
00023e72 		bnew 00023d82 <Ldivsf$2>
00023e76 		braw 00023e6a <Ldivsf$b$den+0x4>
00023e7a <Lround$exit>	cmpil #-25,%d2
00023e80 		bltw 000238b6 <Lf$underflow>
00023e84 		moveq #0,%d6
00023e86 		cmpil #1,%d2
00023e8c 		bgew 00023ec2 <Lround$exit+0x48>
00023e90 		addql #1,%d2
00023e92 		lsrl #1,%d6
00023e94 		btst #0,%d1
00023e98 		beqw 00023ea0 <Lround$exit+0x26>
00023e9c 		bset #31,%d6
00023ea0 		lsrl #1,%d1
00023ea2 		btst #0,%d0
00023ea6 		beqw 00023eae <Lround$exit+0x34>
00023eaa 		bset #31,%d1
00023eae 		lsrl #1,%d0
00023eb0 		cmpil #1,%d2
00023eb6 		beqw 00023ec2 <Lround$exit+0x48>
00023eba 		braw 00023e90 <Lround$exit+0x16>
00023ebe 		braw 000238b6 <Lf$underflow>
00023ec2 		orl %d6,%d1
00023ec4 		lea 00023eec <Lround$0>,%a0
00023eca 		lea 00030838 <_fpCCR>,%a1
00023ed0 		clrl %d6
00023ed2 		movew %a1@(6),%d6
00023ed6 		beqw 00024004 <Lround$to$nearest>
00023eda 		cmpil #2,%d6
00023ee0 		bhiw 0002405c <Lround$to$minus>
00023ee4 		bltw 0002405c <Lround$to$minus>
00023ee8 		braw 0002405c <Lround$to$minus>
00023eec <Lround$0>	cmpil #255,%d2
00023ef2 		bgew 000238a2 <Lf$infty>
00023ef6 		movew %d2,%d2
00023ef8 		beqw 00023894 <Lf$den>
00023efc 		lsll #7,%d2
00023efe 		bclr #23,%d0
00023f02 		swap %d0
00023f04 		orl %d2,%d0
00023f06 		swap %d0
00023f08 		orl %d7,%d0
00023f0a 		lea 00030838 <_fpCCR>,%a0
00023f10 		movew #0,%a0@
00023f14 		moveml %sp@,%d2-%d7
00023f18 		unlk %fp
00023f1a 		rts
00023f1c <__negsf2>	linkw %fp,#-24
00023f20 		moveml %d2-%d7,%sp@
00023f24 		movew #4,%d5
00023f28 		movel %fp@(8),%d0
00023f2c 		bchg #31,%d0
00023f30 		movel %d0,%d1
00023f32 		bclr #31,%d1
00023f36 		tstl %d1
00023f38 		beqw 00023f68 <__negsf2+0x4c>
00023f3c 		cmpil #2139095040,%d1
00023f42 		bltw 00023f56 <__negsf2+0x3a>
00023f46 		bhiw 000238c4 <Lf$inop>
00023f4a 		movel %d0,%d7
00023f4c 		andil #-2147483648,%d7
00023f52 		braw 000238a2 <Lf$infty>
00023f56 		lea 00030838 <_fpCCR>,%a0
00023f5c 		movew #0,%a0@
00023f60 		moveml %sp@,%d2-%d7
00023f64 		unlk %fp
00023f66 		rts
00023f68 		bclr #31,%d0
00023f6c 		braw 00023f56 <__negsf2+0x3a>
00023f70 <__cmpsf2>	linkw %fp,#-24
00023f74 		moveml %d2-%d7,%sp@
00023f78 		movew #5,%d5
00023f7c 		movel %fp@(8),%d0
00023f80 		movel %fp@(12),%d1
00023f84 		movel %d0,%d6
00023f86 		andil #2147483647,%d0
00023f8c 		beqw 00023ff4 <Lcmpsf$a$0>
00023f90 		cmpil #2139095040,%d0
00023f96 		bhiw 000238c4 <Lf$inop>
00023f9a <Lcmpsf$1>	movel %d1,%d7
00023f9c 		andil #2147483647,%d1
00023fa2 		beqw 00023ffc <Lcmpsf$b$0>
00023fa6 		cmpil #2139095040,%d1
00023fac 		bhiw 000238c4 <Lf$inop>
00023fb0 <Lcmpsf$2>	eorl %d6,%d7
00023fb2 		bplw 00023fc0 <Lcmpsf$2+0x10>
00023fb6 		tstl %d6
00023fb8 		bplw 00023fe0 <Lcmpsf$a$gt$b>
00023fbc 		bmiw 00023fea <Lcmpsf$b$gt$a>
00023fc0 		tstl %d6
00023fc2 		bplw 00023fcc <Lcmpsf$2+0x1c>
00023fc6 		movel %d0,%d7
00023fc8 		movel %d1,%d0
00023fca 		movel %d7,%d1
00023fcc 		cmpl %d0,%d1
00023fce 		bhiw 00023fea <Lcmpsf$b$gt$a>
00023fd2 		bnew 00023fe0 <Lcmpsf$a$gt$b>
00023fd6 		moveq #0,%d0
00023fd8 		moveml %sp@,%d2-%d7
00023fdc 		unlk %fp
00023fde 		rts
00023fe0 <Lcmpsf$a$gt$b>	moveq #1,%d0
00023fe2 		moveml %sp@,%d2-%d7
00023fe6 		unlk %fp
00023fe8 		rts
00023fea <Lcmpsf$b$gt$a>	moveq #-1,%d0
00023fec 		moveml %sp@,%d2-%d7
00023ff0 		unlk %fp
00023ff2 		rts
00023ff4 <Lcmpsf$a$0>	bclr #31,%d6
00023ff8 		braw 00023f9a <Lcmpsf$1>
00023ffc <Lcmpsf$b$0>	bclr #31,%d7
00024000 		braw 00023fb0 <Lcmpsf$2>
00024004 <Lround$to$nearest>	btst #24,%d0
00024008 		bnew 00024020 <Lround$to$nearest+0x1c>
0002400c 		cmpil #1,%d2
00024012 		beqw 00024020 <Lround$to$nearest+0x1c>
00024016 		addl %d1,%d1
00024018 		addxl %d0,%d0
0002401a 		subql #1,%d2
0002401c 		bplw 00024004 <Lround$to$nearest>
00024020 		btst #0,%d0
00024024 		beqw 00024040 <Lround$to$nearest+0x3c>
00024028 		tstl %d1
0002402a 		bnew 0002403c <Lround$to$nearest+0x38>
0002402e 		movel %d0,%d1
00024030 		andil #2,%d1
00024036 		addl %d1,%d0
00024038 		braw 00024040 <Lround$to$nearest+0x3c>
0002403c 		moveq #1,%d1
0002403e 		addl %d1,%d0
00024040 		lsrl #1,%d0
00024042 		btst #24,%d0
00024046 		beqw 0002404e <Lround$to$nearest+0x4a>
0002404a 		lsrl #1,%d0
0002404c 		addql #1,%d2
0002404e 		btst #23,%d0
00024052 		beqw 00024058 <Lround$to$nearest+0x54>
00024056 		jmp %a0@
00024058 		moveq #0,%d2
0002405a 		jmp %a0@
0002405c <Lround$to$minus>	jmp %a0@
0002405e 		rts
00024060 <__clear_sticky_bit>	lea 00030838 <_fpCCR>,%a0
00024066 		clrw %a0@(4)
0002406a 		rts
0002406c <$_exception_handler>	lea 00030838 <_fpCCR>,%a0
00024072 		movew %d7,%a0@(0)
00024076 		movew %a0@(4),%d4
0002407a 		orl %d7,%d4
0002407c 		movew %d4,%a0@(4)
00024080 		movew %d6,%a0@(8)
00024084 		movew %d5,%a0@(10)
00024088 		cmpil #1,%d6
0002408e 		beqw 000240ae <$_exception_handler+0x42>
00024092 		movel %fp@(8),%a0@(12)
00024098 		movel %fp@(12),%a0@(16)
0002409e 		movel %fp@(16),%a0@(20)
000240a4 		movel %fp@(20),%a0@(24)
000240aa 		braw 000240ba <$_exception_handler+0x4e>
000240ae 		movel %fp@(8),%a0@(12)
000240b4 		movel %fp@(12),%a0@(20)
000240ba 		clrl %d6
000240bc 		movew %a0@(2),%d6
000240c0 		andl %d6,%d7
000240c2 		beqw 000240ce <$_exception_handler+0x62>
000240c6 		pea 00030838 <_fpCCR>
000240cc 		trap #15
000240ce 		moveml %sp@,%d2-%d7
000240d2 		unlk %fp
000240d4 		rts
000240d6 		rts
000240d8 <__gedf2>	linkw %fp,#0
000240dc 		movel %fp@(20),%sp@-
000240e0 		movel %fp@(16),%sp@-
000240e4 		movel %fp@(12),%sp@-
000240e8 		movel %fp@(8),%sp@-
000240ec 		jsr 000236de <__cmpdf2>
000240f2 		unlk %fp
000240f4 		rts
000240f6 		rts
000240f8 <__floatsidf>	linkw %fp,#0
000240fc 		lea %sp@(-12),%sp
00024100 		moveml %d2-%d4,%sp@
00024104 		movel %fp@(8),%d3
00024108 		subal %a0,%a0
0002410a 		movel #1053,%d0
00024110 		tstl %d3
00024112 		bnes 0002411a <__floatsidf+0x22>
00024114 		clrl %d2
00024116 		clrl %d1
00024118 		bras 0002416e <__floatsidf+0x76>
0002411a 		tstl %d3
0002411c 		bges 00024136 <__floatsidf+0x3e>
0002411e 		moveal #-2147483648,%a0
00024124 		negl %d3
00024126 		bpls 00024136 <__floatsidf+0x3e>
00024128 		movel #-1042284544,%d1
0002412e 		clrl %d2
00024130 		bras 0002416e <__floatsidf+0x76>
00024132 		lsll #4,%d3
00024134 		subql #4,%d0
00024136 		cmpil #16777215,%d3
0002413c 		bles 00024132 <__floatsidf+0x3a>
0002413e 		cmpil #1073741823,%d3
00024144 		bgts 00024152 <__floatsidf+0x5a>
00024146 		addl %d3,%d3
00024148 		subql #1,%d0
0002414a 		cmpil #1073741823,%d3
00024150 		bles 00024146 <__floatsidf+0x4e>
00024152 		movel %a0,%d1
00024154 		moveq #20,%d4
00024156 		lsll %d4,%d0
00024158 		orl %d0,%d1
0002415a 		movel %d3,%d0
0002415c 		moveq #10,%d4
0002415e 		asrl %d4,%d0
00024160 		andil #-1048577,%d0
00024166 		orl %d0,%d1
00024168 		movel %d3,%d2
0002416a 		moveq #22,%d0
0002416c 		lsll %d0,%d2
0002416e 		movel %d1,%d0
00024170 		movel %d2,%d1
00024172 		moveml %sp@,%d2-%d4
00024176 		lea %sp@(12),%sp
0002417a 		unlk %fp
0002417c 		rts
0002417e <__floatsisf>	linkw %fp,#0
00024182 		movel %fp@(8),%sp@-
00024186 		jsr %pc@(000240f8 <__floatsidf>)
0002418a 		movel %d1,%sp@-
0002418c 		movel %d0,%sp@-
0002418e 		jsr 000241f2 <__truncdfsf2>
00024194 		unlk %fp
00024196 		rts
00024198 <__extendsfdf2>	linkw %fp,#0
0002419c 		lea %sp@(-12),%sp
000241a0 		moveml %d2-%d4,%sp@
000241a4 		movel %fp@(8),%d1
000241a8 		beqs 000241de <__extendsfdf2+0x46>
000241aa 		movel %d1,%d2
000241ac 		andil #-2147483648,%d2
000241b2 		movel %d1,%d0
000241b4 		moveq #23,%d4
000241b6 		asrl %d4,%d0
000241b8 		andil #255,%d0
000241be 		addil #896,%d0
000241c4 		moveq #20,%d4
000241c6 		lsll %d4,%d0
000241c8 		orl %d0,%d2
000241ca 		andil #8388607,%d1
000241d0 		movel %d1,%d0
000241d2 		lsrl #3,%d0
000241d4 		orl %d0,%d2
000241d6 		movel %d1,%d3
000241d8 		moveq #29,%d0
000241da 		lsll %d0,%d3
000241dc 		bras 000241e2 <__extendsfdf2+0x4a>
000241de 		clrl %d3
000241e0 		clrl %d2
000241e2 		movel %d2,%d0
000241e4 		movel %d3,%d1
000241e6 		moveml %sp@,%d2-%d4
000241ea 		lea %sp@(12),%sp
000241ee 		unlk %fp
000241f0 		rts
000241f2 <__truncdfsf2>	linkw %fp,#0
000241f6 		lea %sp@(-16),%sp
000241fa 		moveml %d2-%d5,%sp@
000241fe 		movel %fp@(8),%d2
00024202 		movel %fp@(12),%d3
00024206 		tstl %d2
00024208 		bnes 00024212 <__truncdfsf2+0x20>
0002420a 		tstl %d3
0002420c 		bnes 00024212 <__truncdfsf2+0x20>
0002420e 		moveq #0,%d0
00024210 		bras 00024266 <__truncdfsf2+0x74>
00024212 		movel %d2,%d0
00024214 		moveq #20,%d1
00024216 		asrl %d1,%d0
00024218 		andil #2047,%d0
0002421e 		movel %d0,%d4
00024220 		addil #-896,%d4
00024226 		movel %d2,%d1
00024228 		andil #1048575,%d1
0002422e 		oril #1048576,%d1
00024234 		moveq #10,%d5
00024236 		lsll %d5,%d1
00024238 		movel %d3,%d0
0002423a 		moveq #22,%d5
0002423c 		lsrl %d5,%d0
0002423e 		orl %d0,%d1
00024240 		lsrl #6,%d1
00024242 		addql #1,%d1
00024244 		asrl #1,%d1
00024246 		btst #24,%d1
0002424a 		beqs 00024250 <__truncdfsf2+0x5e>
0002424c 		asrl #1,%d1
0002424e 		addql #1,%d4
00024250 		andil #-8388609,%d1
00024256 		movel %d2,%d0
00024258 		andil #-2147483648,%d0
0002425e 		moveq #23,%d2
00024260 		lsll %d2,%d4
00024262 		orl %d4,%d0
00024264 		orl %d1,%d0
00024266 		moveml %sp@,%d2-%d5
0002426a 		lea %sp@(16),%sp
0002426e 		unlk %fp
00024270 		rts
00024272 <__fixdfsi>	linkw %fp,#0
00024276 		lea %sp@(-16),%sp
0002427a 		moveml %d2-%d5,%sp@
0002427e 		movel %fp@(8),%d1
00024282 		movel %fp@(12),%d2
00024286 		tstl %d1
00024288 		bnes 00024290 <__fixdfsi+0x1e>
0002428a 		clrl %d0
0002428c 		tstl %d2
0002428e 		beqs 000242ea <__fixdfsi+0x78>
00024290 		movel %d1,%d0
00024292 		moveq #20,%d3
00024294 		asrl %d3,%d0
00024296 		andil #2047,%d0
0002429c 		movel %d0,%d4
0002429e 		addil #-1053,%d4
000242a4 		movel %d1,%d3
000242a6 		andil #1048575,%d3
000242ac 		oril #1048576,%d3
000242b2 		moveq #10,%d5
000242b4 		lsll %d5,%d3
000242b6 		movel %d2,%d0
000242b8 		moveq #22,%d5
000242ba 		lsrl %d5,%d0
000242bc 		orl %d0,%d3
000242be 		tstl %d4
000242c0 		bles 000242d0 <__fixdfsi+0x5e>
000242c2 		movel #2147483647,%d0
000242c8 		tstl %d1
000242ca 		bges 000242ea <__fixdfsi+0x78>
000242cc 		addql #1,%d0
000242ce 		bras 000242ea <__fixdfsi+0x78>
000242d0 		moveq #-32,%d0
000242d2 		cmpl %d4,%d0
000242d4 		blts 000242da <__fixdfsi+0x68>
000242d6 		clrl %d0
000242d8 		bras 000242ea <__fixdfsi+0x78>
000242da 		tstl %d4
000242dc 		bges 000242e2 <__fixdfsi+0x70>
000242de 		negl %d4
000242e0 		asrl %d4,%d3
000242e2 		movel %d3,%d0
000242e4 		tstl %d1
000242e6 		bges 000242ea <__fixdfsi+0x78>
000242e8 		negl %d0
000242ea 		moveml %sp@,%d2-%d5
000242ee 		lea %sp@(16),%sp
000242f2 		unlk %fp
000242f4 		rts
000242f6 <__fixsfsi>	linkw %fp,#0
000242fa 		movel %fp@(8),%d0
000242fe 		movel %d0,%sp@-
00024300 		jsr %pc@(00024198 <__extendsfdf2>)
00024304 		addql #4,%sp
00024306 		movel %d1,%sp@-
00024308 		movel %d0,%sp@-
0002430a 		jsr %pc@(00024272 <__fixdfsi>)
0002430e 		unlk %fp
00024310 		rts
 
//------------------------------------------// 
//            TABLA DE SIMBOLOS             // 
//------------------------------------------// 
00030000 00000001 d primeraVez.45
00030002 00000080 d umbrales.103
00030082 00000080 d adapt_DAC.104
00030102 00000010 d teclas.108
00030112 00000002 D salida
00030114 00000004 D f
00030118 00000004 D contadorDFT
0003011c 00000004 D contadorS_out
00030120 00000004 D contadorReset
00030124 00000004 D n_dft
00030128 00000004 D n_frecs
0003012c 00000004 D t_barrido
00030130 00000004 D f_min
00030134 00000004 D f_max
00030138 00000004 D t_comp
0003013c 00000004 D salto
00030140 00000004 D escala
00030144 00000004 D scroll
00030148 00000078 D pasos
000301c0 00000640 d sinusoide10Hz
00030800 00000038 D logs
00030838 d __exception_bits
00030838 D _fpCCR
0003083a d __trap_enable_bits
0003083c d __sticky_bits
0003083e d __rounding_mode
00030840 d __format
00030842 d __last_operation
00030844 d __operand1
0003084c d __operand2
00030854 00000078 b sumaSeno.118
000308cc 00000078 b sumaCoseno.119
00030944 00000004 B p
00030948 00000004 B frecuencia
0003094c 00000004 B j
00030950 00000004 B dft_a
00030954 00000004 B dft
00030958 00000078 B S_out
000309d0 00000004 B k
000309d4 00000002 B puertoS
000309d6 00000004 B k_log
000309da 00000004 B dft_lcd
000309de 00000004 B frecuencia_
000309e2 00000004 B frecuencia_int
000309e6 00000004 B i
000309ea 00000004 B dft_int
000309ee 00000004 B k_lin
000309f2 00000004 B frec_lcd
000309f8 00000004 B array
000309fc 00000004 B dft_
00030a00 00000004 B frecuencia_a
00030a04 00000004 B tam
00030a08 00000007 B cadena
00030a10 00000004 B pasoLogs
